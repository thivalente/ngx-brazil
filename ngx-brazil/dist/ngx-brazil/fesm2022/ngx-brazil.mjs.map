{"version":3,"file":"ngx-brazil.mjs","sources":["../../../src/_utils/states.ts","../../../src/_utils/utils.ts","../../../src/_utils/inscricao-estadual.ts","../../../src/_utils/create.ts","../../../src/_utils/iptu.ts","../../../src/_utils/validate.ts","../../../src/cpf/validator.ts","../../../src/cpf/directive.ts","../../../src/_utils/masks/create-number-mask.ts","../../../src/_utils/mask-br.ts","../../../src/cpf/pipe.ts","../../../src/cnpj/validator.ts","../../../src/cnpj/directive.ts","../../../src/cnpj/pipe.ts","../../../src/phone-number/validator.ts","../../../src/phone-number/directive.ts","../../../src/phone-number/pipe.ts","../../../src/cellphone/validator.ts","../../../src/cellphone/directive.ts","../../../src/cellphone/pipe.ts","../../../src/inscricaoestadual/validator.ts","../../../src/inscricaoestadual/directive.ts","../../../src/inscricaoestadual/pipe.ts","../../../src/cep/validator.ts","../../../src/cep/directive.ts","../../../src/cep/pipe.ts","../../../src/currency/validator.ts","../../../src/currency/directive.ts","../../../src/currency/pipe.ts","../../../src/number/validator.ts","../../../src/number/directive.ts","../../../src/number/pipe.ts","../../../src/license-plate/validator.ts","../../../src/license-plate/directive.ts","../../../src/license-plate/pipe.ts","../../../src/percentage/validator.ts","../../../src/percentage/directive.ts","../../../src/percentage/pipe.ts","../../../src/renavam/validator.ts","../../../src/renavam/directive.ts","../../../src/renavam/pipe.ts","../../../src/pispasep/validator.ts","../../../src/pispasep/directive.ts","../../../src/pispasep/pipe.ts","../../../src/rg/validator.ts","../../../src/rg/directive.ts","../../../src/rg/pipe.ts","../../../src/time/validator.ts","../../../src/time/directive.ts","../../../src/time/pipe.ts","../../../src/titulo/validator.ts","../../../src/titulo/directive.ts","../../../src/titulo/pipe.ts","../../../src/_utils/masks/constants.ts","../../../src/_utils/masks/utilities.ts","../../../src/_utils/masks/conform-to-mask.ts","../../../src/_utils/masks/adjust-caret-position.ts","../../../src/_utils/masks/create-text-mask-input-element.ts","../../../src/masked-input.directive.ts","../../../src/lib.module.ts","../../../src/ngx-brazil.ts"],"sourcesContent":["export const STATE_ACRONYMS: any = ['AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR', 'RJ', 'RN', 'RO', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO'];\r\n  \r\n  export type StatesType = 'AC' | 'AL' | 'AM' | 'AP' | 'BA' | 'CE' | 'DF' | 'ES' | 'GO' | 'MA' | 'MG' | 'MS' | 'MT' | 'PA' | 'PB' | 'PE' | 'PI' | 'PR' | 'RJ' | 'RN' | 'RO' | 'RR' | 'RS' | 'SC' | 'SE' | 'SP' | 'TO';\r\n  \r\n  export const STATES = [\r\n    { name: 'Acre', shortname: 'AC', slug: 'acre' },\r\n    { name: 'Alagoas', shortname: 'AL', slug: 'alagoas' },\r\n    { name: 'Amapá', shortname: 'AP', slug: 'amapa' },\r\n    { name: 'Amazonas', shortname: 'AM', slug: 'amazonas' },\r\n    { name: 'Bahia', shortname: 'BA', slug: 'bahia' },\r\n    { name: 'Ceará', shortname: 'CE', slug: 'ceara' },\r\n    { name: 'Distrito Federal', shortname: 'DF', slug: 'distrito-federal' },\r\n    { name: 'Espírito Santo', shortname: 'ES', slug: 'espirito-santo' },\r\n    { name: 'Goiás', shortname: 'GO', slug: 'goias' },\r\n    { name: 'Maranhão', shortname: 'MA', slug: 'maranhao' },\r\n    { name: 'Mato Grosso', shortname: 'MT', slug: 'mato-grosso' },\r\n    { name: 'Mato Grosso do Sul', shortname: 'MS', slug: 'mato-grosso-do-sul' },\r\n    { name: 'Minas Gerais', shortname: 'MG', slug: 'minas-gerais' },\r\n    { name: 'Pará', shortname: 'PA', slug: 'para' },\r\n    { name: 'Paraíba', shortname: 'PB', slug: 'paraiba' },\r\n    { name: 'Paraná', shortname: 'PR', slug: 'parana' },\r\n    { name: 'Pernambuco', shortname: 'PE', slug: 'pernambuco' },\r\n    { name: 'Piauí', shortname: 'PI', slug: 'piaui' },\r\n    { name: 'Rio de Janeiro', shortname: 'RJ', slug: 'rio-de-janeiro' },\r\n    { name: 'Rio Grande do Norte', shortname: 'RN', slug: 'rio-grande-do-norte' },\r\n    { name: 'Rio Grande do Sul', shortname: 'RS', slug: 'rio-grande-do-sul' },\r\n    { name: 'Rondônia', shortname: 'RO', slug: 'rondonia' },\r\n    { name: 'Roraima', shortname: 'RR', slug: 'roraima' },\r\n    { name: 'Santa Catarina', shortname: 'SC', slug: 'santa-catarina' },\r\n    { name: 'São Paulo', shortname: 'SP', slug: 'sao-paulo' },\r\n    { name: 'Sergipe', shortname: 'SE', slug: 'sergipe' },\r\n    { name: 'Tocantins', shortname: 'TO', slug: 'tocantins' }\r\n  ];","import { STATE_ACRONYMS } from \"./states\";\r\nimport { BigObject } from \"./interfaces\";\r\n\r\n/**\r\n * Funções utilitárias\r\n */\r\nexport function isPresent(obj: any): boolean {\r\n  return obj !== undefined && obj !== null;\r\n}\r\n\r\nexport function isArray(value: any) {\r\n  return (Array.isArray && Array.isArray(value)) || value instanceof Array;\r\n}\r\n\r\nexport function isString(value: any) {\r\n  return typeof value === 'string' || value instanceof String;\r\n}\r\n\r\nexport function isNumber(value: any) {\r\n  return typeof value === 'number' && !isNaN(value);\r\n}\r\n\r\nexport function isNil(value: any) {\r\n  return typeof value === 'undefined' || value === null;\r\n}\r\n\r\n/**\r\n * Processa Caret Traps (para máscaras de entrada)\r\n */\r\nconst strCaretTrap = '[]';\r\nexport function processCaretTraps(mask: any) {\r\n  const indexes = [];\r\n  let indexOfCaretTrap: number;\r\n  while ((indexOfCaretTrap = mask.indexOf(strCaretTrap)) !== -1) {\r\n    indexes.push(indexOfCaretTrap);\r\n    mask.splice(indexOfCaretTrap, 1);\r\n  }\r\n  return { maskWithoutCaretTraps: mask, indexes };\r\n}\r\n\r\n/**\r\n * Funções para cálculo de dígito verificador usando módulo 11\r\n */\r\nexport const modulo11 = (value: string) => {\r\n  let mults: any = [];\r\n  let weightVal = 2;\r\n  for (let i = 0; i < value.length; i++) {\r\n    mults.push(weightVal);\r\n    weightVal++;\r\n    if (weightVal > 9) weightVal = 2;\r\n  }\r\n\r\n  mults = mults.reverse();\r\n\r\n  let sum = 0;\r\n  for (let i = 0; i < value.length; i++) {\r\n    sum += parseInt(value[i]) * mults[i];\r\n  }\r\n  const digit = (sum * 10) % 11;\r\n  return digit;\r\n};\r\n\r\nexport const modulo11Custom = (string: string, size: number, maxMult = string.length, by10 = true) => {\r\n  if (!by10) size = 1;\r\n  for (let n = 1; n <= size; n++) {\r\n    let soma = 0;\r\n    let mult = 2;\r\n    for (let i = string.length - 1; i >= 0; i--) {\r\n      soma += mult * parseInt(string.charAt(i));\r\n      mult++;\r\n      if (mult > maxMult) mult = 2;\r\n    }\r\n    let dig = by10 ? ((soma * 10) % 11) % 10 : soma % 11;\r\n    if (dig === 10) dig = 0;\r\n    string += dig;\r\n  }\r\n  return string.substr(string.length - size, size);\r\n};\r\n\r\n/**\r\n * Verifica se todos os números de uma string são iguais\r\n */\r\nexport function allNumbersAreSame(inputValue: string) {\r\n  const input: string | void = getAllDigits(inputValue);\r\n  if (typeof input === 'string') {\r\n    const reg = new RegExp('^(\\\\d)(?!\\\\1+$)\\\\d{' + (input.length - 1) + '}$');\r\n    return reg.test(input);\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Extrai todos os dígitos de uma string\r\n */\r\nexport function getAllDigits(input: string) {\r\n  if (!input.match) {\r\n    input = input.toString();\r\n  }\r\n  const match = input.match(/\\d/g);\r\n  return match ? match.join('') : '';\r\n}\r\n\r\n/**\r\n * Extrai todas as palavras de uma string\r\n */\r\nexport function getAllWords(input: string) {\r\n  const match = input.match(/\\w/g);\r\n  return match ? match.join('') : '';\r\n}\r\n\r\n/**\r\n * Converte uma string de moeda para número\r\n */\r\nexport function currencyToNumber(input: string | number) {\r\n  if (typeof input === 'number') {\r\n    return input;\r\n  }\r\n  input = input.replace(/ /g, '').replace(/[^0-9.,]+/, '');\r\n  if (input.indexOf('.') === (input.length - 1) - 2) {\r\n    input = input.replace(/,/g, '');\r\n  } else {\r\n    input = input.replace(/\\./g, '').replace(',', '.');\r\n  }\r\n  return parseFloat(input);\r\n}\r\n\r\nexport const makeGenericFaker = (val: any, options: BigObject<Function> | null = null) => {\r\n    return () => {\r\n      if (!val.textMask || !val.textMask.map) {\r\n        return '';\r\n      }\r\n      const newData = val.textMask.map((c: string | any[], index: number) => {\r\n        if (options && options[index]) {\r\n          return options[index]();\r\n        }\r\n        c = c.toString();\r\n        if (c === /\\d/.toString()) {\r\n          return Math.floor(Math.random() * 10).toString()\r\n        } else if (c === /[A-Za-z]/.toString()) {\r\n          return randomLetter(1).toString();\r\n        } else if (c === /\\w/.toString()) {\r\n          return randomLetterOrNumber(1).toString();\r\n        } else if (c.indexOf('/[') === 0) { // /[1-9]/ ou /[5-9]/\r\n          c = c.replace('/[', '').replace(']/', '');\r\n  \r\n          if (c.indexOf('-') > 0) {\r\n            c = c.split('-');\r\n            if (parseInt(c[1])) {\r\n              const mult = c[1] - c[0];\r\n              const plus = parseInt(c[0]);\r\n              return (Math.floor(Math.random() * mult) + plus).toString();\r\n            } else {\r\n              return rand(1, [c[0], c[1]]);\r\n            }\r\n          } else if (c.indexOf('|') > 0) {\r\n            c = c.split('|');\r\n            const index = Math.floor(Math.random() * c.length);\r\n            return c[index];\r\n          }\r\n  \r\n        } else {\r\n          return c;\r\n        }\r\n      });\r\n      return newData.join('');\r\n    };\r\n  }\r\n\r\n/**\r\n * Converte número para formato de moeda\r\n */\r\nexport function numberToCurrency(value: number) {\r\n  return ' R$ ' + value.toFixed(2).replace('.', ',') + ' ';\r\n}\r\n\r\n/**\r\n * Slugify - transforma uma string em um formato \"slug\" (usado em URLs amigáveis)\r\n */\r\nexport function slugify(value: string) {\r\n  return value.toString().toLowerCase()\r\n    .replace(/[àÀáÁâÂãäÄÅåª]+/g, 'a')\r\n    .replace(/[èÈéÉêÊëË]+/g, 'e')\r\n    .replace(/[ìÌíÍîÎïÏ]+/g, 'i')\r\n    .replace(/[òÒóÓôÔõÕöÖº]+/g, 'o')\r\n    .replace(/[ùÙúÚûÛüÜ]+/g, 'u')\r\n    .replace(/[ýÝÿŸ]+/g, 'y')\r\n    .replace(/[ñÑ]+/g, 'n')\r\n    .replace(/[çÇ]+/g, 'c')\r\n    .replace(/[ß]+/g, 'ss')\r\n    .replace(/[Ææ]+/g, 'ae')\r\n    .replace(/[Øøœ]+/g, 'oe')\r\n    .replace(/[%]+/g, 'pct')\r\n    .replace(/\\s+/g, '-')\r\n    .replace(/[^\\w\\-]+/g, '')\r\n    .replace(/\\-\\-+/g, '-')\r\n    .replace(/^-+/, '')\r\n    .replace(/-+$/, '');\r\n}\r\n\r\nexport function fillString(string: string, size: number, fill: string) {\r\n  if (string.length < size) {\r\n    const dif = size - string.length;\r\n    for (let i = 0; i < dif; i++) {\r\n      string = fill + string\r\n    }\r\n  }\r\n  return string;\r\n}\r\n\r\n/**\r\n * Funções para gerar strings aleatórias\r\n */\r\n\r\nexport function randArray(array: string | any[]) {\r\n    const index = randomNumber(0, array.length);\r\n    return array[index];\r\n}\r\n\r\n\r\nexport function rand(length: number, ...ranges: any[]) {\r\nvar str = \"\";                                                       // the string (initialized to \"\")\r\nwhile (length--) {                                                  // repeat this length of times\r\n    var ind = Math.floor(Math.random() * ranges.length);              // get a random range from the ranges object\r\n    var min = ranges[ind][0].charCodeAt(0),                           // get the minimum char code allowed for this range\r\n    max = ranges[ind][1].charCodeAt(0);                             // get the maximum char code allowed for this range\r\n    var c = Math.floor(Math.random() * (max - min + 1)) + min;        // get a random char code between min and max\r\n    str += String.fromCharCode(c);                                    // convert it back into a character and append it to the string str\r\n}\r\nreturn str;                                                         // return str\r\n}\r\n\r\nexport function randomNumber(begin: number, end: number) {\r\n  const dif = end - begin;\r\n  return Math.floor(Math.random() * dif) + begin;\r\n}\r\n\r\nexport function randomLetter(size = 1, onlyCapitals = false) {\r\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  if (!onlyCapitals) {\r\n    possible += 'abcdefghijklmnopqrstuvwxyz';\r\n  }\r\n  let text = '';\r\n  for (let i = 0; i < size; i++) {\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n  return text;\r\n}\r\n\r\nexport function randomLetterOrNumber(size = 1, onlyCapitals = false) {\r\n    var text = \"\";\r\n    let possible: any = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n    if (onlyCapitals == false) {\r\n      possible += \"abcdefghijklmnopqrstuvwxyz0123456789\";\r\n    }\r\n    possible = possible.split('');\r\n    for (let i = 0; i < size; i++) {\r\n      const pos = Math.floor(Math.random() * possible.length);\r\n      text += possible[pos];\r\n    }\r\n    return text;\r\n}\r\n\r\nexport const randomStateAcronym = () => {\r\n    const total = STATE_ACRONYMS.length;\r\n    return STATE_ACRONYMS[Math.floor(Math.random() * total)];\r\n}\r\n\r\nexport const CORES: string[] = [\"AMARELO\", \"AZUL\", \"BEGE\", \"BRANCA\", \"CINZA\", \"DOURADA\", \"GRENA\", \"LARANJA\", \"MARROM\", \"PRATA\",\r\n\"PRETA\", \"ROSA\", \"ROXA\", \"VERDE\", \"VERMELHA\", \"FANTASIA\"];\r\n\r\n\r\nexport function getSpecialProperty<TModel, TKey extends keyof TModel>(\r\nmodel: TModel,\r\nkey: TKey\r\n) {\r\nreturn model[key];\r\n}\r\n\r\n/**\r\n * Exportação de todas as funções como utilitário\r\n */\r\nexport const utilsBr = {\r\n    isPresent,\r\n    isArray,\r\n    isString,\r\n    isNumber,\r\n    isNil,\r\n    processCaretTraps,\r\n    allNumbersAreSame,\r\n    fillString,\r\n    getAllDigits,\r\n    getAllWords,\r\n    getSpecialProperty,\r\n    currencyToNumber,\r\n    makeGenericFaker,\r\n    numberToCurrency,\r\n    slugify,\r\n    randomNumber,\r\n    randomLetter,\r\n    modulo11,\r\n    modulo11Custom,\r\n    randomLetterOrNumber,\r\n    randomEstadoSigla: randomStateAcronym,\r\n    randArray,\r\n    rand\r\n};","import { BigObject } from './interfaces';\r\n\r\nexport const generateInscricaoEstadual: BigObject<Function> = {\r\n  ac: function (valor: any) {\r\n    if (tamanhoNaoE(valor, 13)) {\r\n      return false;\r\n    }\r\n\r\n    if (naoComecaCom(valor, '01')) {\r\n      return false;\r\n    }\r\n\r\n    const base = primeiros(valor, 11);\r\n\r\n    const primeiroDigito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base));\r\n    const segundoDigito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base + primeiroDigito));\r\n\r\n    return base + primeiroDigito + segundoDigito;\r\n  },\r\n\r\n  am: function (valor: any) {\r\n    if (tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    return calculoTrivialGenerate(valor);\r\n  },\r\n\r\n  al: function (valor: any) {\r\n    if (tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    if (naoComecaCom(valor, '24')) {\r\n      return false;\r\n    }\r\n\r\n    // FORMAÇÃO: 24XNNNNND,  sendo:\r\n    // 24 – Código do Estado\r\n    // X – Tipo de empresa (0-Normal, 3-Produtor Rural, 5-Substituta, 7- Micro-Empresa Ambulante, 8-Micro-Empresa)\r\n    // NNNNN – Número da empresa\r\n    // D – Dígito de verificação calculado pelo Módulo11, pêsos 2 à 9 da direita para a esquerda, exceto D\r\n    // Exemplo: Número 2 4 0 0 0 0 0 4 D\r\n    //                 2 4 X N N N N N D\r\n    // Fonte: http://www.sintegra.gov.br/Cad_Estados/cad_AL.html\r\n\r\n    const base: any = primeiros(valor);\r\n\r\n    // Pesos 9 8 7 6 5 4 3 2\r\n    // SOMA = (2 * 4) + (3 * 0) + (4 * 0) + (5 * 0) + (6 * 0) + (7 * 0) + (8 * 4) + (9 * 2) = 58\r\n    const soma = base.split('').reduce((acc: number, v: string, i: number) => {\r\n      return acc + (9 - i) * Number(v)\r\n    }, 0)\r\n    // PRODUTO = 58 * 10 = 580\r\n    const produto = soma * 10\r\n    // RESTO = 580 – INTEIRO(580 / 11)*11 = 580 – (52*11) = 8\r\n    const resto = produto - Math.floor(produto / 11) * 11\r\n    // DÍGITO = 8 - Caso RESTO seja igual a 10 o DÍGITO será 0 (zero)\r\n    const digito = resto === 10 ? 0 : resto\r\n    return base + digito;\r\n  },\r\n\r\n  ap: function (valor: any) {\r\n    if (tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    if (naoComecaCom(valor, '03')) {\r\n      return false;\r\n    }\r\n\r\n    const base: any = primeiros(valor);\r\n\r\n    let p: number, d: number;\r\n\r\n    if (entre(base, 3000001, 3017000)) {\r\n      p = 5;\r\n      d = 0;\r\n    } else if (entre(base, 3017001, 3019022)) {\r\n      p = 9;\r\n      d = 1;\r\n    } else {\r\n      p = 0;\r\n      d = 0;\r\n    }\r\n\r\n    const resto = mod(p + base, [2, 3, 4, 5, 6, 7, 8, 9, 1]);\r\n\r\n    let digito: number;\r\n    if (resto === 1) {\r\n      digito = 0;\r\n    } else if (resto === 0) {\r\n      digito = d;\r\n    } else {\r\n      digito = 11 - resto;\r\n    }\r\n\r\n    return base + digito;\r\n  },\r\n\r\n  ba: function (valor: any) {\r\n    if (tamanhoNaoE(valor, 8) && tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    const base: any = primeiros(valor, valor.length - 2);\r\n    let primeiroDigito: number, segundoDigito: number;\r\n\r\n    const segundoMultiplicador = serie(2, 7);\r\n    const primeiroMultiplicador = serie(2, 8);\r\n\r\n    let primeiroResto: number, segundoResto: number;\r\n    let digitoComparacao = valor.substring(0, 1);\r\n\r\n    if (tamanhoE(valor, 9)) {\r\n      segundoMultiplicador.push(8);\r\n      primeiroMultiplicador.push(9);\r\n      digitoComparacao = valor.substring(1, 2);\r\n    }\r\n\r\n    if ('0123458'.split('').indexOf(digitoComparacao) !== -1) {\r\n      segundoResto = mod(base, segundoMultiplicador, 10);\r\n      segundoDigito = segundoResto === 0 ? 0 : 10 - segundoResto;\r\n\r\n      primeiroResto = mod(base + segundoDigito, primeiroMultiplicador, 10);\r\n      primeiroDigito = primeiroResto === 0 ? 0 : 10 - primeiroResto;\r\n    } else {\r\n      segundoResto = mod(base, segundoMultiplicador);\r\n      segundoDigito = substracaoPor11SeMaiorQue2CasoContrario0(segundoResto);\r\n\r\n      primeiroResto = mod(base + segundoDigito, primeiroMultiplicador);\r\n      primeiroDigito = substracaoPor11SeMaiorQue2CasoContrario0(primeiroResto);\r\n    }\r\n\r\n    return base + primeiroDigito + segundoDigito;\r\n  },\r\n\r\n  ce: function (valor: any) {\r\n    if (tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n    return calculoTrivialGenerate(valor);\r\n  },\r\n\r\n  df: function (valor: any) {\r\n    if (tamanhoNaoE(valor, 13)) {\r\n      return false;\r\n    }\r\n\r\n    if (naoComecaCom(valor, '07') && naoComecaCom(valor, '08')) {\r\n      return false;\r\n    }\r\n    const base: any = primeiros(valor, 11);\r\n\r\n    const primeiro = substracaoPor11SeMaiorQue2CasoContrario0(mod(base));\r\n    const segundo = substracaoPor11SeMaiorQue2CasoContrario0(mod(base + primeiro));\r\n    return base + primeiro + segundo;\r\n  },\r\n\r\n  es: function (valor: any) {\r\n    return calculoTrivialGenerate(valor);\r\n  },\r\n  go: function (valor: any) {\r\n    if (tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    // Verifica os digitos iniciais do estado\r\n    // Fonte: https://appasp.economia.go.gov.br/Legislacao/arquivos/Secretario/IN/IN_1535_2022.htm\r\n\r\n    if (['10', '11', '15', '20'].indexOf(valor.substring(0, 2)) === -1) {\r\n      return false;\r\n    }\r\n\r\n    const base: any = primeiros(valor);\r\n\r\n    if (base === '11094402') {\r\n      return valor.substr(8) === '1' || valor.substr(8) === '0';\r\n    }\r\n\r\n    const resto = mod(base);\r\n    let digito: number;\r\n\r\n    if (resto === 0) {\r\n      digito = 0;\r\n    } else if (resto === 1) {\r\n      if (entre(base, 10103105, 10119997)) {\r\n        digito = 1;\r\n      } else {\r\n        digito = 0;\r\n      }\r\n    } else {\r\n      digito = 11 - resto;\r\n    }\r\n\r\n    return base + digito;\r\n  },\r\n  ma: function (valor: any) {\r\n    if (tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    if (naoComecaCom(valor, '12')) {\r\n      return false;\r\n    }\r\n\r\n    return calculoTrivialGenerate(valor);\r\n  },\r\n\r\n  mg: function (valor: any) {\r\n    if (tamanhoNaoE(valor, 13)) {\r\n      return false;\r\n    }\r\n\r\n    const base = primeiros(valor, 11);\r\n\r\n    const baseComZero = valor.substring(0, 3) + '0' + valor.substring(3, 11);\r\n\r\n    let i = 0;\r\n    const produtorioLiteral = baseComZero.split('').reduceRight(function (anterior, atual) {\r\n      if (i > [2, 1].length - 1) {\r\n        i = 0;\r\n      }\r\n\r\n      return ([2, 1][i++] * parseInt(atual, 10)).toString() + anterior.toString();\r\n    }, '').split('').reduce(function (anterior, atual) {\r\n      return anterior + parseInt(atual, 10);\r\n    }, 0);\r\n\r\n    let primeiro: any = ((Math.floor(produtorioLiteral / 10) + 1) * 10) - produtorioLiteral;\r\n    if (primeiro === 10) {\r\n      primeiro = 0;\r\n    }\r\n\r\n    const segundo = substracaoPor11SeMaiorQue2CasoContrario0(mod(base + primeiro, serie(2, 11)));\r\n\r\n    return base + primeiro + segundo;\r\n  },\r\n\r\n  ms: function (valor: any) {\r\n    if (naoComecaCom(valor, '28')) {\r\n      return false;\r\n    }\r\n\r\n    return calculoTrivialGenerate(valor);\r\n  },\r\n  mt: function (valor: any) {\r\n    if (tamanhoNaoE(valor, 11) && tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    const base = tamanhoE(valor, 11) ? valor.substring(0, 10) : primeiros(valor);\r\n    return calculoTrivialGenerate(valor, base, true);\r\n  },\r\n  pa: function (valor: any) {\r\n    if (tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    if (naoComecaCom(valor, '15')) {\r\n      return false;\r\n    }\r\n\r\n    return calculoTrivialGenerate(valor);\r\n  },\r\n\r\n  pb: function (valor: any) {\r\n    if (tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    return calculoTrivialGenerate(valor);\r\n  },\r\n\r\n  pe: function (valor: any) {\r\n    const base: any = valor.substring(0, valor.length - 2);\r\n\r\n    const restoPrimeiro = mod(base);\r\n    const primeiro = 11 - restoPrimeiro >= 10 ? 0 : 11 - restoPrimeiro;\r\n\r\n    const restoSegundo = mod(base + primeiro);\r\n    const segundo = 11 - restoSegundo >= 10 ? 0 : 11 - restoSegundo;\r\n\r\n    return base + primeiro + segundo;\r\n  },\r\n\r\n  pi: function (valor: any) {\r\n    return calculoTrivialGenerate(valor);\r\n  },\r\n\r\n  pr: function (valor: any) {\r\n    if (tamanhoNaoE(valor, 10)) {\r\n      return false;\r\n    }\r\n\r\n    const base = primeiros(valor);\r\n\r\n    const restoPrimeiro = mod(base, serie(2, 7));\r\n    const primeiro = 11 - restoPrimeiro >= 10 ? 0 : 11 - restoPrimeiro;\r\n\r\n    const restoSegundo = mod(base + primeiro, serie(2, 7));\r\n    const segundo = 11 - restoSegundo >= 10 ? 0 : 11 - restoSegundo;\r\n\r\n    return base + primeiro + segundo;\r\n  },\r\n  rj: function (valor: any) {\r\n    if (tamanhoNaoE(valor, 8)) {\r\n      return false;\r\n    }\r\n\r\n    const base = primeiros(valor, 7);\r\n    const digito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base, serie(2, 7)));\r\n\r\n    return base + digito;\r\n  },\r\n\r\n  rn: function (valor: any) {\r\n    if (tamanhoNaoE(valor) && tamanhoNaoE(valor, 10)) {\r\n      return false;\r\n    }\r\n\r\n    if (naoComecaCom(valor, '20')) {\r\n      return false;\r\n    }\r\n\r\n    const base = valor.substring(0, valor.length - 1);\r\n\r\n    const multiplicadores = serie(2, 9);\r\n    if (tamanhoE(valor, 10)) {\r\n      multiplicadores.push(10);\r\n    }\r\n\r\n    const resto = (mod(base, multiplicadores) * 10) % 11;\r\n    const digito = resto === 10 ? 0 : resto;\r\n\r\n    return base + digito;\r\n  },\r\n  ro: function (valor: any) {\r\n    let base: any, digito: number, resultadoMod: number;\r\n\r\n    if (tamanhoE(valor, 9)) {\r\n      base = valor.substring(3, 8);\r\n      digito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base));\r\n\r\n      return valor === valor.substring(0, 3) + base + digito;\r\n    } else if (tamanhoE(valor, 14)) {\r\n      base = primeiros(valor, 13);\r\n      resultadoMod = mod(base);\r\n      digito = resultadoMod <= 1 ? 1 : 11 - resultadoMod;\r\n\r\n      return base + digito;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  rr: function (valor: any) {\r\n    if (tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    if (naoComecaCom(valor, '24')) {\r\n      return false;\r\n    }\r\n\r\n    const base = primeiros(valor);\r\n    const digito = mod(base, [8, 7, 6, 5, 4, 3, 2, 1], 9);\r\n\r\n    return base + digito;\r\n  },\r\n\r\n  rs: function (valor: any) {\r\n    if (tamanhoNaoE(valor, 10)) {\r\n      return false;\r\n    }\r\n\r\n    const base = primeiros(valor, 9);\r\n    return calculoTrivialGenerate(valor, base, true);\r\n  },\r\n\r\n  sc: function (valor: any) {\r\n    return calculoTrivialGenerate(valor);\r\n  },\r\n\r\n  se: function (valor: any) {\r\n    if (tamanhoNaoE(valor)) {\r\n      return false;\r\n    }\r\n\r\n    return calculoTrivialGenerate(valor);\r\n  },\r\n\r\n  sp: function (valor: any) {\r\n    valor = valor.toUpperCase();\r\n\r\n    let segundaBase: string;\r\n\r\n    if (valor.substr(0, 1) === 'P') {\r\n      if (tamanhoNaoE(valor, 13)) {\r\n        return false;\r\n      }\r\n\r\n      const base = valor.substring(1, 9);\r\n      segundaBase = valor.substring(10, 13);\r\n      const resto = mod(base, [10, 8, 7, 6, 5, 4, 3, 1]).toString();\r\n      const digito = resto.length > 1 ? resto[1] : resto[0];\r\n\r\n      return 'P' + base + digito + segundaBase;\r\n    } else {\r\n      if (tamanhoNaoE(valor, 12)) {\r\n        return false;\r\n      }\r\n\r\n      const primeiraBase = primeiros(valor);\r\n      segundaBase = valor.substring(9, 11);\r\n\r\n      const primeiroResto = mod(primeiraBase, [10, 8, 7, 6, 5, 4, 3, 1]).toString();\r\n      const primeiro = primeiroResto.length > 1 ? primeiroResto[1] : primeiroResto[0];\r\n\r\n      const segundoResto = mod(primeiraBase + primeiro + segundaBase, serie(2, 10)).toString();\r\n      const segundo = segundoResto.length > 1 ? segundoResto[1] : segundoResto[0];\r\n\r\n      return primeiraBase + primeiro + segundaBase + segundo;\r\n    }\r\n  },\r\n\r\n  to: function (valor: any) {\r\n    if (tamanhoNaoE(valor) && tamanhoNaoE(valor, 11)) {\r\n      return false;\r\n    }\r\n\r\n    let base: any;\r\n\r\n    if (tamanhoE(valor, 11)) {\r\n      if (['01', '02', '03', '99'].indexOf(valor.substring(2, 4)) === -1) {\r\n        return false;\r\n      }\r\n\r\n      base = valor.substring(0, 2) + valor.substring(4, 10);\r\n    } else {\r\n      base = primeiros(valor);\r\n    }\r\n\r\n    const digito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base));\r\n\r\n    return valor.substring(0, valor.length - 1) + digito;\r\n  },\r\n};\r\n\r\nexport const funcoes: BigObject<Function> = {\r\n  ac: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['ac'](valor);\r\n  },\r\n\r\n  am: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['am'](valor);\r\n  },\r\n\r\n  al: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['al'](valor);\r\n  },\r\n\r\n  ap: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['ap'](valor);\r\n  },\r\n\r\n  ba: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['ba'](valor);\r\n  },\r\n\r\n  ce: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['ce'](valor);\r\n  },\r\n\r\n  df: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['df'](valor);\r\n  },\r\n\r\n  es: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['es'](valor);\r\n  },\r\n  go: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['go'](valor);\r\n  },\r\n  ma: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['ma'](valor);\r\n  },\r\n\r\n  mg: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['mg'](valor);\r\n  },\r\n\r\n  ms: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['ms'](valor);\r\n  },\r\n  mt: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['mt'](valor);\r\n  },\r\n  pa: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['pa'](valor);\r\n  },\r\n\r\n  pb: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['pb'](valor);\r\n  },\r\n\r\n  pe: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['pe'](valor);\r\n  },\r\n\r\n  pi: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['pi'](valor);\r\n  },\r\n\r\n  pr: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['pr'](valor);\r\n  },\r\n  rj: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['rj'](valor);\r\n  },\r\n\r\n  rn: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['rn'](valor);\r\n  },\r\n  ro: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['ro'](valor);\r\n  },\r\n  rr: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['rr'](valor);\r\n  },\r\n\r\n  rs: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['rs'](valor);\r\n  },\r\n\r\n  sc: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['sc'](valor);\r\n  },\r\n\r\n  se: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['se'](valor);\r\n  },\r\n\r\n  sp: function (valor: string | boolean) {\r\n    return valor === generateInscricaoEstadual['sp'](valor);\r\n  },\r\n\r\n  to: function (valor: any) {\r\n    return valor === generateInscricaoEstadual['to'](valor);\r\n  },\r\n};\r\n\r\nexport function validateInscricaoEstadual(ie: string | Array<string>, estado: any) {\r\n  if (eIndefinido(estado) || estado === null) {\r\n    estado = '';\r\n  }\r\n  estado = estado.toLowerCase();\r\n\r\n  if (estado !== '' && !(estado in funcoes)) {\r\n    return new Error('estado não é válido');\r\n  }\r\n\r\n  if (eIndefinido(ie)) {\r\n    return new Error('ie deve ser fornecida');\r\n  }\r\n\r\n  if (Array.isArray(ie)) {\r\n    let retorno = true;\r\n    ie.forEach(function (i) {\r\n      if (!validateInscricaoEstadual(i, estado)) {\r\n        retorno = false;\r\n      }\r\n    });\r\n    return retorno;\r\n  }\r\n\r\n  if (typeof ie !== 'string') {\r\n    return new Error('ie deve ser string ou array de strings');\r\n  }\r\n\r\n  if (!allNumbersAreSame(ie)) {\r\n    return new Error('ie com todos dígitos iguais');\r\n  }\r\n\r\n  if (ie.match(/^ISENTO$/i)) {\r\n    return true;\r\n  }\r\n\r\n  ie = ie.replace(/[\\.|\\-|\\/|\\s]/g, '');\r\n\r\n  if (estado === '') {\r\n    if (lookup(ie)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (/^\\d+$/.test(ie) || estado === 'sp' || funcoes[estado]) {\r\n    return funcoes[estado](ie);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport const MASKSIE: BigObject<any> = {\r\n  AC: {\r\n    text: '01.004.823/001-12',\r\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\r\n  },\r\n  AL: {\r\n    text: '240000048',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  AM: {\r\n    text: '04.145.871-0',\r\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  AP: {\r\n    text: '240000048',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  BA: {\r\n    text: '1234567-48',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/],\r\n    textMaskFunction: function mask(userInput: any) {\r\n      const numberLength = getSizeNumbers(userInput);\r\n      if (!userInput || numberLength > 8) {\r\n        return [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\r\n      } else {\r\n        return [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\r\n      }\r\n    }\r\n  },\r\n  CE: {\r\n    text: '06.000001-5',\r\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  DF: {\r\n    text: '06 000001 123-55',\r\n    textMask: [/\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\r\n  },\r\n  ES: {\r\n    text: '082.560.67-6',\r\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  GO: {\r\n    text: '06.000.001-5',\r\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  MA: {\r\n    text: '12.104.376-2',\r\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\r\n  },\r\n  MG: {\r\n    text: '001.819.263/0048',\r\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  MS: {\r\n    text: '001819263',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  MT: {\r\n    text: '0018192630-1',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  PA: {\r\n    text: '06-000001-5',\r\n    textMask: [/\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  PB: {\r\n    text: '06000001-5',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  PE: {\r\n    text: '0192310-24',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\r\n  },\r\n  PI: {\r\n    text: '19.301.656-7',\r\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  PR: {\r\n    text: '19301656-78',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\r\n  },\r\n  RJ: {\r\n    text: '20.040.04-1',\r\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  RN: {\r\n    text: '20.040.040-1',\r\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/],\r\n    textMaskFunction: function mask(userInput: any) {\r\n      const numberLength = getSizeNumbers(userInput);\r\n\r\n      if (!userInput || numberLength > 9) {\r\n        return [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\r\n      } else {\r\n        return [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/];\r\n      }\r\n    }\r\n  },\r\n  RO: {\r\n    text: '101.62521-3',\r\n    textMask: [/\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  RR: {\r\n    text: '24006628-1',\r\n    textMask: [/\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  RS: {\r\n    text: '024/0440013',\r\n    textMask: [/\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  SC: {\r\n    text: '271.234.563',\r\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/]\r\n  },\r\n  SE: {\r\n    text: '27123456-3',\r\n    textMask: [/\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  SP: {\r\n    text: '114.814.878.119',\r\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/]\r\n  },\r\n  TO: {\r\n    text: '11 81 4878119',\r\n    textMask: [/\\d/, /\\d/, ' ', /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n};\r\n\r\nfunction getSizeNumbers(userInput: string) {\r\n  const numbers: any = userInput.match(/\\d/g);\r\n  let numberLength = 0;\r\n  if (numbers) {\r\n    numberLength = numbers.join('').length;\r\n  }\r\n  return numberLength;\r\n}\r\n\r\nfunction eIndefinido(objeto: any) {\r\n  return typeof objeto === typeof undefined;\r\n}\r\n\r\nfunction tamanhoE(string: any[], tamanho: number) {\r\n  return !tamanhoNaoE(string, tamanho);\r\n}\r\n\r\nfunction tamanhoNaoE(string: { length: number }, tamanho = 9) {\r\n  return string.length !== tamanho;\r\n}\r\n\r\nfunction primeiros(string: any, quantidade = 8) {\r\n  return string.substring(0, quantidade);\r\n}\r\n\r\nfunction substracaoPor11SeMaiorQue2CasoContrario0(valor: number) {\r\n  return valor < 2 ? 0 : 11 - valor;\r\n}\r\n\r\nfunction mod(valor: string, multiplicadores = serie(2, 9), divisor = 11) {\r\n  let i = 0;\r\n  return valor.split('').reduceRight(function (anterior: number, atual: string) {\r\n    if (i > multiplicadores.length - 1) {\r\n      i = 0;\r\n    }\r\n    return (multiplicadores[i++] * parseInt(atual, 10)) + anterior;\r\n  }, 0) % divisor;\r\n}\r\n\r\nfunction calculoTrivialGenerate(valor: any, base: any = null, validarTamanho = false) {\r\n  if (!validarTamanho && tamanhoNaoE(valor)) {\r\n    return false;\r\n  }\r\n  if (base === null) {\r\n    base = primeiros(valor);\r\n  }\r\n  const digito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base));\r\n  return base + digito;\r\n}\r\n\r\nfunction naoComecaCom(string: any, valor: string) {\r\n  return string.substring(0, valor.length) !== valor;\r\n}\r\n\r\nfunction entre(valor: string | number, limiteInferior: number, limiteSuperior: number) {\r\n  if (typeof valor === 'string') {\r\n    valor = parseInt(valor, 10);\r\n  }\r\n  return valor >= limiteInferior && valor <= limiteSuperior;\r\n}\r\n\r\nfunction lookup(ie: any) {\r\n  const resultado = [];\r\n  for (const estado in funcoes) {\r\n    if (funcoes[estado](ie)) {\r\n      resultado.push(estado);\r\n    }\r\n  }\r\n  return resultado.length === 0 ? false : resultado;\r\n}\r\n\r\nfunction allNumbersAreSame(input: string) {\r\n  const inputDigits = input.match(/\\d/g);\r\n  return inputDigits ? new Set(inputDigits).size === 1 : false;\r\n}\r\n\r\nfunction serie(de: number, ate: number) {\r\n  const resultado = [];\r\n  while (de <= ate) {\r\n    resultado.push(de++);\r\n  }\r\n  return resultado;\r\n}\r\n","import { STATE_ACRONYMS } from './states';\r\nimport { getAllDigits, fillString, modulo11Custom } from './utils';\r\n\r\n// Função para criar AIH\r\nexport function createAih(value: string | number | any[]): string {\r\n  value = getAllDigits(value.toString());\r\n  if (value.length > 12) {\r\n    value = value.toString().substr(0, value.length - 1);\r\n  }\r\n  const cod = parseInt(value);\r\n  const calc = Math.ceil(cod - (cod / 11));\r\n  const digito = calc.toString().substr(-1);\r\n  return digito;\r\n}\r\n\r\n// Função para criar certidão\r\nexport function createCertidao(value: string): string {\r\n  if (value.length > 30) {\r\n    value = value.substring(0, value.length - 2);\r\n  }\r\n\r\n  let certPriDig = calcularDigitoCertidao(value, 1);\r\n  let certSegDig = calcularDigitoCertidao(value, certPriDig);\r\n\r\n  let certDV: any = certPriDig * 10 + certSegDig;\r\n  if (certDV == 0) certDV = \"00\";\r\n  if (certDV > 0 && certDV < 10) certDV = \"0\" + certDV;\r\n\r\n  return certDV.toString();\r\n}\r\n\r\n// Função para criar CNH Espelho\r\nexport function createCnhEspelho(value: string): string {\r\n  return modulo11Custom(value.substr(0, value.length - 1), 1, 8, false);\r\n}\r\n\r\n// Função para criar Renach Estadual\r\nexport function createRenachEstadual(value: string): string {\r\n  const state = value.substr(0, 2).toLowerCase();\r\n  if (!STATE_ACRONYMS.includes(state)) {\r\n    return '';\r\n  }\r\n  let digits = value.substr(2).replace(/[^\\d]/g, '');\r\n  if (digits.length !== 9) {\r\n    return '';\r\n  }\r\n  return '' + modulo11Custom(digits.substr(0, digits.length - 1), 1, 11);\r\n}\r\n\r\n// Função para criar Renach Segurança\r\nexport function createRenachSeguranca(value: string): string {\r\n  value = value.replace(/[^\\d]+/g, '');\r\n\r\n  if (value.length !== 11) {\r\n    return '';\r\n  }\r\n  \r\n  return \"\" + modulo11Custom(value.substr(0, value.length - 1), 1, 11);\r\n}\r\n\r\n// Função para criar CNH\r\nexport function createCnh(value: string): string {\r\n  value = value.replace(/[^\\d]+/g, '');\r\n  if (value.length != 11 || value === '0') {\r\n    return '';\r\n  }\r\n  return value.substr(-2);\r\n}\r\n\r\nexport function createCnpj(cnpj: string): number[] {\r\n  const cnpjWithoutDigits = cnpj.replace(/[^\\d]+/g, '').substring(0, 12);\r\n\r\n  const firstDigit = calcularDigitoVerificadorCnpj(cnpjWithoutDigits, 12);\r\n  const secondDigit = calcularDigitoVerificadorCnpj(`${cnpjWithoutDigits}${firstDigit}`, 13);\r\n\r\n  return [firstDigit, secondDigit];\r\n}\r\n\r\n// Função para criar CNS\r\nexport function createCns(number: string): string {\r\n  number = getAllDigits(number);\r\n  let somaInicial = calcularSomaCns(number);\r\n  let soma = somaInicial;\r\n  let rest = 0;\r\n\r\n  while (soma % 11 !== 0) {\r\n    rest++;\r\n    soma = somaInicial + (rest * 1);\r\n  }\r\n  return number.substr(-2, 1) + rest;\r\n}\r\n\r\n// Função para criar CPF\r\nexport function createCpf(strCPF: string): string {\r\n  strCPF = strCPF.replace(/[^\\d]+/g, '');\r\n\r\n  if (strCPF === '00000000000') {\r\n    return '';\r\n  }\r\n\r\n  return modulo11Custom(strCPF.substr(0, strCPF.length - 2), 2, 12);\r\n}\r\n\r\n// Função para criar Cartão de Crédito\r\nexport function createCartaoCredito(number: string): number {\r\n  number = \"00000000000000000\" + number;\r\n  number = number.slice(number.length - 18);\r\n\r\n  const creditDig = calcularDigitoCartaoCredito(number);\r\n  return 10 - creditDig;\r\n}\r\n\r\n// Função para criar ECT\r\nexport function createEct(number: string): number {\r\n  number = getAllDigits(number).padStart(8, '0');\r\n  const digito = calcularDigitoEct(number);\r\n  return digito;\r\n}\r\n\r\n// Função para criar PIS/PASEP\r\nexport function createPispasep(number: string): number {\r\n  const nis = fillString(getAllDigits(number), 11, '0');\r\n  const digit = calcularDigitoPispasep(nis);\r\n  return digit;\r\n}\r\n\r\n// Função para criar RENAVAM\r\nexport function createRenavam(renavam: string): number {\r\n  renavam = renavam.padStart(11, '0');\r\n  const digito = calcularDigitoRenavam(renavam);\r\n  return digito;\r\n}\r\n\r\n// Função para criar Processo\r\nexport function createProcesso(number: string): string {\r\n  number = getAllDigits(number).padStart(18, '0');\r\n  return calcularProcesso(number);\r\n}\r\n\r\n// Função para criar Título Atual\r\nexport function createTituloAtual(titulo: string): string {\r\n  const tam = titulo.length;\r\n  const estado = titulo.substr(tam - 4, 2);\r\n  titulo = titulo.substr(0, tam - 2).padStart(11, '0');\r\n\r\n  const digitos = calcularDigitosTitulo(titulo, estado);\r\n  return digitos.join('');\r\n}\r\n\r\n// Função para criar Título\r\nexport function createTitulo(titNum: string): string {\r\n  titNum = getAllDigits(titNum).padStart(11, '0');\r\n  const digitos = calcularDigitosTituloCompleto(titNum);\r\n  return digitos.join('');\r\n}\r\n\r\n// Funções utilitárias adicionais\r\nfunction calcularDigitoCertidao(value: string, fator: number): number {\r\n  let result = 0;\r\n  const weights = [9, 8, 7, 6, 5, 4, 3, 2];\r\n  for (let i = 0; i < value.length; i++) {\r\n    result += parseInt(value[i], 10) * weights[i % weights.length];\r\n  }\r\n  return (result * fator) % 11;\r\n}\r\n\r\nexport function validarDigitosCnpj(cnpj: string): boolean {\r\n  // Remove caracteres não numéricos\r\n  cnpj = cnpj.replace(/[^\\d]+/g, '');\r\n\r\n  // O CNPJ precisa ter exatamente 14 dígitos\r\n  if (cnpj.length !== 14 || !isValidCnpj(cnpj)) {\r\n    return false;\r\n  }\r\n\r\n  // Cálculo do primeiro dígito verificador\r\n  const primeiroDigitoCalculado = calcularDigitoVerificadorCnpj(cnpj, 12);\r\n  \r\n  if (primeiroDigitoCalculado !== parseInt(cnpj.charAt(12), 10)) {\r\n    return false;\r\n  }\r\n\r\n  // Cálculo do segundo dígito verificador\r\n  const segundoDigitoCalculado = calcularDigitoVerificadorCnpj(cnpj, 13);\r\n  \r\n  if (segundoDigitoCalculado !== parseInt(cnpj.charAt(13), 10)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction calcularDigitosCnpj(cnpj: string): number[] {\r\n  const resultados = [];\r\n  let soma = 0;\r\n  let pos = cnpj.length - 7;\r\n  for (let i = 0; i < 12; i++) {\r\n    soma += parseInt(cnpj.charAt(i), 10) * pos--;\r\n    if (pos < 2) pos = 9;\r\n  }\r\n  resultados.push(soma % 11 < 2 ? 0 : 11 - soma % 11);\r\n\r\n  soma = 0;\r\n  pos = cnpj.length - 7;\r\n  for (let i = 0; i < 13; i++) {\r\n    soma += parseInt(cnpj.charAt(i), 10) * pos--;\r\n    if (pos < 2) pos = 9;\r\n  }\r\n  resultados.push(soma % 11 < 2 ? 0 : 11 - soma % 11);\r\n\r\n  return resultados;\r\n}\r\n\r\nfunction calcularDigitoVerificadorCnpj(cnpj: string, tamanho: number): number {\r\n  let soma = 0;\r\n  let pos = tamanho - 7;\r\n\r\n  for (let i = 0; i < tamanho; i++) {\r\n    soma += parseInt(cnpj.charAt(i), 10) * pos--;\r\n    if (pos < 2) {\r\n      pos = 9;\r\n    }\r\n  }\r\n\r\n  const resto = soma % 11;\r\n  return resto < 2 ? 0 : 11 - resto;\r\n}\r\n\r\nfunction calcularSomaCns(number: string): number {\r\n  let soma = 0;\r\n  for (let i = 0; i < number.length; i++) {\r\n    soma += parseInt(number[i], 10) * (15 - i);\r\n  }\r\n  return soma;\r\n}\r\n\r\nfunction calcularDigitoCartaoCredito(number: string): number {\r\n  let soma = 0;\r\n  for (let i = 0; i < number.length; i++) {\r\n    let dig = parseInt(number[i], 10);\r\n    if (i % 2 === 0) dig *= 2;\r\n    if (dig > 9) dig -= 9;\r\n    soma += dig;\r\n  }\r\n  return soma % 10;\r\n}\r\n\r\nfunction calcularDigitoEct(number: string): number {\r\n  const weights = [7, 9, 5, 3, 2, 4, 6, 8];\r\n  let soma = 0;\r\n  for (let i = 0; i < number.length; i++) {\r\n    soma += parseInt(number[i], 10) * weights[i];\r\n  }\r\n  let result = 11 - (soma % 11);\r\n  if (result === 11) result = 5;\r\n  if (result === 10) result = 0;\r\n  return result;\r\n}\r\n\r\nfunction calcularDigitoPispasep(nis: string): number {\r\n  let soma = 0;\r\n  for (let i = 0; i < 10; i++) {\r\n    soma += parseInt(nis[i], 10) * (11 - i);\r\n  }\r\n  return 11 - (soma % 11);\r\n}\r\n\r\nfunction calcularDigitoRenavam(renavam: string): number {\r\n  let soma = 0;\r\n  const weights = [3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r\n  for (let i = 0; i < 10; i++) {\r\n    soma += parseInt(renavam[i], 10) * weights[i];\r\n  }\r\n  const resto = soma % 11;\r\n  return resto === 10 ? 0 : resto;\r\n}\r\n\r\nfunction calcularProcesso(number: string): string {\r\n  let soma = 0;\r\n  const weights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\r\n  for (let i = 0; i < 11; i++) {\r\n    soma += parseInt(number[i], 10) * weights[i];\r\n  }\r\n  const resto1 = soma % 97;\r\n\r\n  soma = 0;\r\n  const weights2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  for (let i = 11; i < 18; i++) {\r\n    soma += parseInt(number[i], 10) * weights2[i - 11];\r\n  }\r\n  const resto2 = (resto1 * 100 + soma * 100) % 97;\r\n  const dv = 98 - resto2;\r\n  return `${number.substr(0, 10)}-${dv}.${number.substr(10)}`;\r\n}\r\n\r\nfunction calcularDigitosTitulo(titulo: string, estado: string): number[] {\r\n  const excecao = estado === '01' || estado === '02';\r\n  let dig1 = calcularDigitoTitulo(titulo, 2);\r\n  if (excecao && dig1 === 0) dig1 = 1;\r\n  let dig2 = calcularDigitoTitulo(titulo + dig1, 4);\r\n  if (excecao && dig2 === 0) dig2 = 1;\r\n  return [dig1, dig2];\r\n}\r\n\r\nfunction calcularDigitoTitulo(titulo: string, peso: number): number {\r\n  let soma = 0;\r\n  const weights = [9, 8, 7, 6, 5, 4, 3, 2];\r\n  for (let i = 0; i < 8; i++) {\r\n    soma += parseInt(titulo[i], 10) * weights[i];\r\n  }\r\n  const resto = soma % 11;\r\n  return resto < 2 ? 0 : 11 - resto;\r\n}\r\n\r\nfunction calcularDigitosTituloCompleto(titNum: string): number[] {\r\n  let titPriDig = calcularDigitoTitulo(titNum, 2);\r\n  let titSegDig = calcularDigitoTitulo(titNum + titPriDig, 4);\r\n  return [titPriDig, titSegDig];\r\n}\r\n\r\nfunction isValidCnpj(cnpj: string): boolean {\r\n  const invalidCnpjs = [\r\n    '00000000000000', '11111111111111', '22222222222222',\r\n    '33333333333333', '44444444444444', '55555555555555',\r\n    '66666666666666', '77777777777777', '88888888888888', '99999999999999'\r\n  ];\r\n  return !invalidCnpjs.includes(cnpj);\r\n}\r\n\r\n// Exporta todas as funções\r\nexport const createBr = {\r\n  createAih,\r\n  createCertidao,\r\n  createCnhEspelho,\r\n  createRenachEstadual,\r\n  createRenachSeguranca,\r\n  createCnh,\r\n  createCnpj,\r\n  createCns,\r\n  createCpf,\r\n  createCartaoCredito,\r\n  createEct,\r\n  createPispasep,\r\n  createRenavam,\r\n  createProcesso,\r\n  createTituloAtual,\r\n  createTitulo\r\n};\r\n","import { getAllDigits, makeGenericFaker } from './utils';\r\n\r\nexport const createIptu = (number: string, estado: string | number, cidade: string | number) => {\r\n  if (!iptuCreate[estado] || !iptuCreate[estado][cidade]) {\r\n    return true;\r\n  }\r\n  number = getAllDigits(number);\r\n  return iptuCreate[estado][cidade](number);\r\n};\r\n\r\nexport const maskIptu = (number: string, estado: string, cidade: string) => {\r\n  if (!iptuMasks[estado] || !iptuMasks[estado][cidade]) {\r\n    return number;\r\n  }\r\n  return iptuMasks[estado][cidade];\r\n};\r\n\r\nexport const validateIptu = (number: string, estado: string | number, cidade: string | number) => {\r\n  if (!iptuValidate[estado] || !iptuValidate[estado][cidade]) {\r\n    return true;\r\n  }\r\n  number = getAllDigits(number);\r\n  return iptuValidate[estado][cidade](number);\r\n};\r\n\r\nexport function createIptuCtba(number: string) {\r\n  number = getAllDigits(number);\r\n  let a1 = parseInt(number.slice(10));\r\n  let a2 = parseInt(number.slice(9, 10));\r\n  let a3 = parseInt(number.slice(8, 9));\r\n  let a4 = parseInt(number.slice(7, 8));\r\n  let a5 = parseInt(number.slice(6, 7));\r\n  let a6 = parseInt(number.slice(5, 6));\r\n  let a7 = parseInt(number.slice(4, 5));\r\n  let a8 = parseInt(number.slice(3, 4));\r\n  let a9 = parseInt(number.slice(2, 3));\r\n  let a10 = parseInt(number.slice(1, 2));\r\n  let a11 = parseInt(number.slice(0, 1));\r\n\r\n  let iptuCtbaDV = 10 - ((a1 * 2 + a2 * 3 + a3 * 4 + a4 * 7 + a5 * 8 + a6 * 9 + a7 * 2 + a8 * 3 + a9 * 4 + a10 * 7 + a11 * 8) % 10);\r\n  if (iptuCtbaDV === 10) { iptuCtbaDV = 0; }\r\n  return iptuCtbaDV;\r\n}\r\n\r\nexport function createIptuSp(number: string) {\r\n  let a1 = parseInt(number.slice(9));\r\n  let a2 = parseInt(number.slice(8, 9));\r\n  let a3 = parseInt(number.slice(7, 8));\r\n  let a4 = parseInt(number.slice(6, 7));\r\n  let a5 = parseInt(number.slice(5, 6));\r\n  let a6 = parseInt(number.slice(4, 5));\r\n  let a7 = parseInt(number.slice(3, 4));\r\n  let a8 = parseInt(number.slice(2, 3));\r\n  let a9 = parseInt(number.slice(1, 2));\r\n  let a10 = parseInt(number.slice(0, 1));\r\n\r\n  let iptuSpDV = (a1 * 9 + a2 * 8 + a3 * 7 + a4 * 6 + a5 * 5 + a6 * 4 + a7 * 3 + a8 * 2 + a9 + a10 * 10) % 11;\r\n  if (iptuSpDV === 10) { iptuSpDV = 1; }\r\n  return iptuSpDV;\r\n}\r\n\r\nexport const fakerIptu = (estado: string | number, cidade: string | number) => {\r\n  if (!iptuMasks[estado] || !iptuMasks[estado][cidade]) {\r\n    return;\r\n  }\r\n  let iptu = makeGenericFaker(iptuMasks[estado][cidade])();\r\n  if (iptuCreate[estado] && iptuCreate[estado][cidade]) {\r\n    const dv = iptuCreate[estado][cidade](iptu);\r\n    const values = iptu.split('');\r\n    values[values.length - 1] = dv;\r\n    iptu = values.join('');\r\n  }\r\n  return iptu;\r\n};\r\n\r\nexport const iptuCreate: Record<string, Record<string, Function>> = {\r\n  'sao-paulo': {\r\n    'sao-paulo': createIptuSp,\r\n  },\r\n  'parana': {\r\n    'curitiba': createIptuCtba,\r\n  },\r\n};\r\n\r\nexport const iptuMasks: Record<string, Record<string, any>> = {\r\n  'minas-gerais': {\r\n    'belo-horizonte': {\r\n      text: '000.000.000.000.0', \r\n      textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/]\r\n    },\r\n    'contagem': {\r\n      text: '20.040.040-1',\r\n      textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/],\r\n      textMaskFunction: function mask(userInput: any) {\r\n        const numbers = userInput.match(/\\d/g);\r\n        let numberLength = 0;\r\n        if (numbers) {\r\n          numberLength = numbers.join('').length;\r\n        }\r\n        if (!userInput || numberLength > 9) {\r\n          return [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\r\n        } else {\r\n          return [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/];\r\n        }\r\n      }\r\n    }\r\n  },\r\n  'sao-paulo': {\r\n    'sao-paulo': {\r\n      text: '00000000000-0',\r\n      textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n    }\r\n  },\r\n  'parana': {\r\n    'curitiba': {\r\n      text: '00000000000-0',\r\n      textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n    }\r\n  }\r\n};\r\n\r\nconst validateRemoveDigit = (number: string, max: number) => {\r\n  number = getAllDigits(number);\r\n  if (number.length > max) {\r\n    return false;\r\n  } else if (number.length === max) {\r\n    number = number.slice(0, -1);\r\n  }\r\n  return number;\r\n};\r\n\r\nexport function validateIptuCtba(value: string) {\r\n  let number = validateRemoveDigit(value, 12);\r\n  if (!number) {\r\n    return false;\r\n  }\r\n  const dv = iptuCreate['parana']['curitiba'](number);\r\n  return parseInt(value[value.length - 1]) === dv;\r\n}\r\n\r\nexport function validateIptuContagem(number: string) {\r\n    const result = validateRemoveDigit(number, 12);\r\n   \r\n    return result;\r\n}\r\n\r\nexport function validateIptuSp(value: string) {\r\n  let number = validateRemoveDigit(value, 12);\r\n  if (!number) {\r\n    return false;\r\n  }\r\n  const dv = iptuCreate['sao-paulo']['sao-paulo'](number);\r\n  return parseInt(value[value.length - 1]) === dv;\r\n}\r\n\r\nexport const iptuValidate: Record<string, Record<string, Function>> = {\r\n  'sao-paulo': {\r\n    'sao-paulo': validateIptuSp,\r\n  },\r\n  'minas-gerais': {\r\n    'contagem': validateIptuContagem,\r\n  },\r\n  'parana': {\r\n    'curitiba': validateIptuCtba,\r\n  }\r\n};\r\n","import { getAllDigits, fillString, getAllWords } from './utils';\r\nimport { BigObject } from './interfaces';\r\nimport { validateInscricaoEstadual } from './inscricao-estadual';\r\nimport { createCpf, createRenavam, createEct, createProcesso, createTituloAtual, createCnh, createCertidao, createAih, createPispasep, createCnhEspelho, createRenachEstadual, createRenachSeguranca, validarDigitosCnpj } from './create';\r\nimport { validateIptu } from './iptu';\r\nimport { STATE_ACRONYMS } from './states';\r\n\r\nexport function validateAih(aih: string) {\r\n  const aihClean = aih.replace(/[^\\d]+/g, '');\r\n  const dvOriginal = aihClean.substr(-1);\r\n  const dv = createAih(aihClean);\r\n  return dvOriginal === dv;\r\n}\r\n\r\nexport function validateCellphone(cel: any) {\r\n  let celClean = cel.replace(/[^\\d]+/g, '');\r\n  celClean = celClean.replace(/_/g, '');\r\n  if (celClean.length !== 11) {\r\n    return false;\r\n  }\r\n  if (celClean[0] == 0 || celClean[2] < 5) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport const CEPRange: BigObject<RegExp> = {\r\n  'SP': /^([1][0-9]{3}|[01][0-9]{4})[0-9]{3}$/g,\r\n  'RJ': /^[2][0-8][0-9]{3}[0-9]{3}$/g,\r\n  'MS': /^[7][9][0-9]{3}[0-9]{3}$/g,\r\n  'MG': /^[3][0-9]{4}[0-9]{3}$/g,\r\n  // Outros estados...\r\n};\r\n\r\nexport function validateCep(cep: string) {\r\n  const cepClean = cep.replace(/[^\\d]+/g, '');\r\n  const exp = /\\d{2}\\.\\d{3}\\-\\d{3}/;\r\n  if (!exp.test(cep) && cepClean.length !== 8) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function cepRanges(cep: string | number) {\r\n  cep = (cep.toString()).replace(/[^\\d]+/g, '');\r\n  cep = parseInt(cep, 10);\r\n  const cepString: string = cep.toString();\r\n  let found: any;\r\n  for (let estado in CEPRange) {\r\n    const v = CEPRange[estado];\r\n    const r = new RegExp(v).test(cepString);\r\n    if (r) {\r\n      found = r;\r\n      return true;\r\n    }\r\n  }\r\n  return !!found;\r\n}\r\n\r\nexport function validateCertidao(value: string) {\r\n  let certidao = getAllDigits(value);\r\n  const format = /[0-9]{32}/;\r\n  if (!format.test(certidao)) {\r\n    return false;\r\n  }\r\n  const dvOriginal = certidao.substr(-2);\r\n  const dv = createCertidao(certidao);\r\n  return dv === dvOriginal;\r\n}\r\n\r\nexport function validateChassi(chassi: string) {\r\n  const zeroNoPrimeiroDigito = /^0/;\r\n  if (zeroNoPrimeiroDigito.test(chassi)) {\r\n    return false;\r\n  }\r\n  chassi = getAllWords(chassi);\r\n  const repeticaoMaisDe6Vezes = /^.{4,}([0-9A-Z])\\1{5,}/;\r\n  if (repeticaoMaisDe6Vezes.test(chassi)) {\r\n    return false;\r\n  }\r\n  const caracteresiIoOqQ = /[iIoOqQ]/;\r\n  if (caracteresiIoOqQ.test(chassi)) {\r\n    return false;\r\n  }\r\n  const ultimos4Numericos = /[0-9]{4}$/;\r\n  if (!ultimos4Numericos.test(chassi)) {\r\n    return false;\r\n  }\r\n  if (chassi.length > 17) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function validateCnae(number: any) {\r\n  return !!number;\r\n}\r\n\r\nexport function validateCnh(value: string) {\r\n  value = value.replace(/[^\\d]/g, '');\r\n  if (value.length !== 11) {\r\n    return false;\r\n  }\r\n  const check = createCnh(value);\r\n  return value.substr(-2) === check;\r\n}\r\n\r\nexport function validateCnhEspelho(value: string) {\r\n  value = value.replace(/[^\\d]/g, '');\r\n  if (value.length !== 10) {\r\n    return false;\r\n  }\r\n  let check = createCnhEspelho(value);\r\n  if (check === '0' || check === '1') check = '0';\r\n  return value.substr(-1) === check;\r\n}\r\n\r\nexport function validateRenachEstadual(value: string) {\r\n  const state = value.substr(0, 2).toLowerCase();\r\n  if (!STATE_ACRONYMS.includes(state)) {\r\n    return false;\r\n  }\r\n  let digits = value.substr(2);\r\n  digits = digits.replace(/[^\\d]/g, '');\r\n  if (digits.length !== 9) {\r\n    return false;\r\n  }\r\n  let check = createRenachEstadual(value);\r\n  if (check === '0' || check === '1') check = '0';\r\n  return value.substr(-1) === check;\r\n}\r\n\r\nexport function validateRenachSeguranca(value: string) {\r\n  value = value.replace(/[^\\d]/g, '');\r\n  if (value.length !== 11) {\r\n    return false;\r\n  }\r\n  let check = createRenachSeguranca(value);\r\n  return value.substr(-1) === check;\r\n}\r\n\r\nexport function validateCnpj(cnpj: string): boolean {\r\n  return validarDigitosCnpj(cnpj);\r\n}\r\n\r\nexport function validateCpf(strCpf: any) {\r\n  strCpf = strCpf.replace(/[^\\d]+/g, '');\r\n  if (strCpf.length !== 11) {\r\n    return false;\r\n  }\r\n  const expIguais = /^(?!.*(\\d)\\1{10}).*$/;\r\n  if (!strCpf.match(expIguais)) {\r\n    return false;\r\n  }\r\n  const restos = createCpf(strCpf);\r\n  return restos === strCpf.substr(-2);\r\n}\r\n\r\nexport function validateCpfCnpj(number: any) {\r\n  return validateCpf(number) || validateCnpj(number);\r\n}\r\n\r\nfunction validateCvv(value: string | any[], maxLength: any = 3) {\r\n    maxLength = maxLength instanceof Array ? maxLength : [maxLength];\r\n  \r\n    if (typeof value !== 'string') {\r\n      return { isValid: false, isPotentiallyValid: false };\r\n    }\r\n    if (!/^\\d*$/.test(value)) {\r\n      return { isValid: false, isPotentiallyValid: false };\r\n    }\r\n  \r\n    var i = 0;\r\n    const max = value.length;\r\n    for (; i < maxLength.length; i++) {\r\n      if (max === maxLength[i]) {\r\n        return { isValid: true, isPotentiallyValid: true };\r\n      }\r\n    }\r\n  \r\n    if (value.length < Math.min.apply(null, maxLength)) {\r\n      return { isValid: false, isPotentiallyValid: true };\r\n    }\r\n  \r\n    var maximum = maxLength;\r\n    var i = 0;\r\n  \r\n    for (; i < maxLength.length; i++) {\r\n      maximum = maxLength[i] > maximum ? maxLength[i] : maximum;\r\n    }\r\n  \r\n    if (value.length > maximum) {\r\n      return { isValid: false, isPotentiallyValid: false };\r\n    }\r\n  \r\n    return { isValid: true, isPotentiallyValid: true };\r\n  }\r\n\r\nexport function validateCartaoCredito(input: string | number) {\r\n    let value: string;\r\n    if (typeof input == 'string') {\r\n      value = getAllDigits(input);\r\n    } else {\r\n      value = input.toString();\r\n    }\r\n  \r\n    const number = value.slice(0, 16);\r\n    const mes = parseInt(value.slice(16, 18));\r\n    const ano = parseInt(value.slice(18, 20));\r\n    const cvv = value.slice(20, 23);\r\n  \r\n    const d = new Date();\r\n    const anoAtual = (d.getFullYear() - 2000);\r\n    if (ano && ano < anoAtual) {\r\n      return false;\r\n    }\r\n    if (mes && mes < d.getMonth() + 1 && ano === anoAtual) {\r\n      return false;\r\n    }\r\n  \r\n    if (cvv) {\r\n      const validcvv = validateCvv(cvv);\r\n      if (validcvv.isValid === false) {\r\n        return false;\r\n      }\r\n    }\r\n  \r\n    let found;\r\n    Object.keys(creditCardValidator).forEach(key => {\r\n      if (creditCardValidator[key].test(number)) {\r\n        found = key;\r\n      }\r\n    });\r\n    return !!found;\r\n  \r\n}\r\n\r\n/**\r\n *     A hash of valid CC abbreviations and regular expressions\r\n    mc: Mastercard\r\n    ec: Eurocard\r\n    vi: Visa\r\n    ax: American Express\r\n    dc: Diners Club\r\n    bl: Carte Blanch\r\n    di: Discover\r\n    jcb: JCB\r\n    er: Enroute\r\n*/\r\nexport const creditCardValidator: BigObject<RegExp> = {\r\n    'mc': /5[1-5][0-9]{14}/,\r\n    'ec': /5[1-5][0-9]{14}/,\r\n    'vi': /4(?:[0-9]{12}|[0-9]{15})/,\r\n    'ax': /3[47][0-9]{13}/,\r\n    'dc': /3(?:0[0-5][0-9]{11}|[68][0-9]{12})/,\r\n    'bl': /3(?:0[0-5][0-9]{11}|[68][0-9]{12})/,\r\n    'di': /6011[0-9]{12}/,\r\n    'jcb': /(?:3[0-9]{15}|(2131|1800)[0-9]{11})/,\r\n    'er': /2(?:014|149)[0-9]{11}/\r\n};\r\n\r\nexport function validateCns(value: string) {\r\n  const cns = getAllDigits(value);\r\n  const definitivo = /[1-2][0-9]{10}00[0-1][0-9]/;\r\n  const provisorio = /[7-9][0-9]{14}/;\r\n  if (!definitivo.test(cns) && !provisorio.test(cns)) {\r\n    return false;\r\n  }\r\n  let soma = 0;\r\n  for (let i = 0; i < cns.length; i++) {\r\n    soma += parseInt(cns[i]) * (15 - i);\r\n  }\r\n  return soma % 11 === 0;\r\n}\r\n\r\nexport function validateTitulo(titulo: any) {\r\n  if (!titulo) {\r\n    return false;\r\n  }\r\n  const tituloClean = titulo.replace(/\\./g, '');\r\n  const expClean = /\\d{4}\\d{4}\\d{4}/;\r\n  if (!expClean.test(tituloClean)) {\r\n    return false;\r\n  }\r\n  const tam = tituloClean.length;\r\n  const dig = createTituloAtual(tituloClean);\r\n  const digitos = tituloClean.substr(tam - 2, 2);\r\n  return digitos === dig;\r\n}\r\n\r\nexport function validateProcesso(processo: any) {\r\n  let processoClean = processo.replace(/\\./g, '').replace(/\\-/g, '');\r\n  const processoValidado = createProcesso(processo);\r\n  return parseInt(processoClean) === parseInt(getAllDigits(processoValidado));\r\n}\r\n\r\nexport function validateRenavam(renavam: any) {\r\n  let renavamClean = renavam.replace(/\\./g, '').replace(/\\-/g, '');\r\n  const dv = createRenavam(renavam);\r\n  const tam = renavam.length;\r\n  const digitos = renavam.substr(tam - 1, 1);\r\n  return digitos.charCodeAt(0) - 48 === dv;\r\n}\r\n\r\nexport function validateRg(rg: string) {\r\n  let rgClean = rg.replace(/\\./g, '').replace(/-/g, '');\r\n  const expClean = /[a-z]{2}\\d{8}/;\r\n  const state = rg.substr(0, 2).toUpperCase();\r\n  if (!expClean.test(rgClean) && !(state in CEPRange)) {\r\n    return false;\r\n  }\r\n  const validateState = RG[state];\r\n  return validateState ? validateState(rg) : true;\r\n}\r\n\r\nexport function validateSenha(value: string, options: any = {}) {\r\n  let finalregex = '^';\r\n  if (options.lowercase !== false) {\r\n    finalregex += '(?=.*[a-z])';\r\n  }\r\n  if (options.uppercase !== false) {\r\n    finalregex += '(?=.*[A-Z])';\r\n  }\r\n  if (options.numeric !== false) {\r\n    finalregex += '(?=.*[0-9])';\r\n  }\r\n  if (options.numeric !== false) {\r\n    finalregex += '(?=.*[!@#\\\\$%\\\\^&\\\\*])';\r\n  }\r\n  options.size = options.size || 8;\r\n  finalregex += `(?=.{${options.size},})`;\r\n  const regex = new RegExp(finalregex);\r\n  return regex.test(value);\r\n}\r\n\r\nexport function validateSite(value: any) {\r\n  const re = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&=]*)/g;\r\n  return re.test(String(value).toLowerCase());\r\n}\r\n\r\nexport function validateSped(sped: string) {\r\n  return !!sped;\r\n}\r\n\r\nexport function validatePhoneNumber(tel: any) {\r\n  const telClean = tel.replace(/[^\\d]+/g, '');\r\n  tel = tel.replace(/_/g, '');\r\n  if (!(telClean.length === 10 || telClean.length === 11)) {\r\n    return false;\r\n  }\r\n  if (telClean[0] == 0 || telClean[2] == 0) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function validateTime(time: string | number, options: any = {}) {\r\n  const value = time.toString();\r\n  const expression = options.diario\r\n    ? /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/\r\n    : /^([0-9]?[0-9]):([0-5][0-9])(:[0-5][0-9])?$/;\r\n  return expression.test(value);\r\n}\r\n\r\nexport function validateCurrency(currency: string | number) {\r\n  if (typeof currency === 'number') {\r\n    return true;\r\n  }\r\n  const regex = /^(R\\$|R\\$ )?(-)?(?!0(\\.)?00)\\d{1,3}((\\.)?\\d{3})*(,\\d\\d)?$/g;\r\n  return regex.test(currency);\r\n}\r\n\r\nexport function validateContaBanco(number: any) {\r\n  return !!number;\r\n}\r\n\r\nexport function validateData(value: string | null) {\r\n  if (!value) {\r\n    return false;\r\n  }\r\n  const values = value.split('/');\r\n  if (values.length !== 3) {\r\n    return false;\r\n  }\r\n  const testData: Date = new Date(values[1] + '/' + values[0] + '/' + values[2]);\r\n  return !!testData.getTime();\r\n}\r\n\r\nexport function validateDate(value: string | null) {\r\n  if (!value || value.length < 10) {\r\n    return false;\r\n  }\r\n  const testData: Date = new Date(value);\r\n  return !!testData.getTime();\r\n}\r\n\r\nexport function validateDatetime(time: string | number, options: any = {}) {\r\n  if (!time) {\r\n    return false;\r\n  }\r\n  time = time.toString();\r\n  const values = time.split(' ');\r\n  return validateDate(values[0]) && validateTime(values[1], options);\r\n}\r\n\r\nexport function validateDataHora(time: string | number, options: any = {}) {\r\n  if (!time) {\r\n    return false;\r\n  }\r\n  time = time.toString();\r\n  const values = time.split(' ');\r\n  return validateData(values[0]) && validateTime(values[1], options);\r\n}\r\n\r\nexport function validateEct(number: string) {\r\n  number = getAllDigits(number);\r\n  if (number.length > 9) {\r\n    return false;\r\n  }\r\n  const nodigit = number.substr(0, number.length - 1);\r\n  const dg = createEct(nodigit);\r\n  return parseInt(number[number.length - 1]) === dg;\r\n}\r\n\r\nexport function validateEmail(email: any) {\r\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport function validateEndereco(number: any) {\r\n  return !!number;\r\n}\r\n\r\nexport function validateNumber(number: string) {\r\n  if (number.split(',').length > 2) {\r\n    return false;\r\n  }\r\n  const regexDecimal = /^\\d+(?:\\.\\d{0,2})$/;\r\n  const regex = /^[0-9]{0,10}[,]{1,1}[0-9]{0,4}/;\r\n  const regexNumero = /^[0-9]{0,10}/;\r\n  return regexDecimal.test(number) || regex.test(number) || regexNumero.test(number);\r\n}\r\n\r\nexport function validatePorcentagem(porcentagem: string) {\r\n  porcentagem = porcentagem.split('%')[0];\r\n  return validateNumber(porcentagem);\r\n}\r\n\r\nexport function validatePispasep(number: string) {\r\n  number = getAllDigits(number);\r\n  let nis = fillString(number, 11, '0');\r\n  const regex = /\\d{11}/;\r\n  if (!regex.test(nis)) {\r\n    return false;\r\n  }\r\n  const digit = createPispasep(number);\r\n  return nis[10].toString() === digit.toString();\r\n}\r\n\r\nexport function validateUsername(value: any) {\r\n  const re = /^[a-z0-9_-]{3,16}$/i;\r\n  return re.test(String(value).toLowerCase());\r\n}\r\n\r\nexport const LICENSEPLATES_RANGE = [\r\n    ['AAA0001', 'BEZ9999', 'PR', '02/1990'],\r\n    ['BFA0001', 'GKI9999', 'SP', '10/1991'],\r\n    ['GKJ0001', 'HOK9999', 'MG', '09/1991'],\r\n    ['HOL0001', 'HQE9999', 'MA', '01/1992'],\r\n    ['HQF0001', 'HTW9999', 'MS', '03/1992'],\r\n    ['HTX0001', 'HZA9999', 'CE', '10/1992'],\r\n    ['HZB0001', 'IAP9999', 'SE', '09/1993'],\r\n    ['IAQ0001', 'JDO9999', 'RS', '03/1992'],\r\n    ['JDP0001', 'JKR9999', 'DF', '04/1994'],\r\n    ['JKS0001', 'JSZ9999', 'BA', '08/1993'],\r\n    ['JTA0001', 'JWE9999', 'PA', '07/1993'],\r\n    ['JWF0001', 'JXY9999', 'AM', '09/1993'],\r\n    ['JXZ0001', 'KAU9999', 'MT', '09/1993'],\r\n    ['KAV0001', 'KFC9999', 'GO', '05/1994'],\r\n    ['KFD0001', 'KME9999', 'PE', '08/1994'],\r\n    ['KMF0001', 'LVE9999', 'RJ', '05/1994'],\r\n    ['LVF0001', 'LWQ9999', 'PI', '04/1996'],\r\n    ['LWR0001', 'MMM9999', 'SC', '06/1996'],\r\n    ['MMN0001', 'MOW9999', 'PB', '07/1996'],\r\n    ['MOX0001', 'MTZ9999', 'ES', '12/1995'],\r\n    ['MUA0001', 'MVK9999', 'AL', '08/1996'],\r\n    ['MVL0001', 'MXG9999', 'TO', '11/1996'],\r\n    ['MXH0001', 'MZM9999', 'RN', '06/1998'],\r\n    ['MZN0001', 'NAG9999', 'AC', '06/1998'],\r\n    ['NAH0001', 'NBA9999', 'RR', '07/1998'],\r\n    ['NBB0001', 'NEH9999', 'RO', '07/1998'],\r\n    ['NEI0001', 'NFB9999', 'AP', '09/1998'],\r\n    ['NFC0001', 'NGZ9999', 'GO', '08/2003'],\r\n    ['NHA0001', 'NHT9999', 'MA', '12/2006'],\r\n    ['NHU0001', 'NIX9999', 'PI', '05/2007'],\r\n    ['NIY0001', 'NJW9999', 'MT', '10/2007'],\r\n    ['NJX0001', 'NLU9999', 'GO', '11/2007'],\r\n    ['NLV0001', 'NMO9999', 'AL', '01/2008'],\r\n    ['NMP0001', 'NNI9999', 'MA', '05/2008'],\r\n    ['NNJ0001', 'NOH9999', 'RN', '07/2008'],\r\n    ['NOI0001', 'NPB9999', 'AM', '07/2008'],\r\n    ['NPC0001', 'NPQ9999', 'MT', '09/2008'],\r\n    ['NPR0001', 'NQK9999', 'PB', '11/2008'],\r\n    ['NQL0001', 'NRE9999', 'CE', '12/2008'],\r\n    ['NRF0001', 'NSD9999', 'MS', '11/2009'],\r\n    ['NSE0001', 'NTC9999', 'PA', '11/2009'],\r\n    ['NTD0001', 'NTW9999', 'BA', '02/2010'],\r\n    ['NTX0001', 'NUG9999', 'MT', '03/2010'],\r\n    ['NUH0001', 'NUL9999', 'RR', '06/2010'],\r\n    ['NUM0001', 'NVF9999', 'CE', '06/2010'],\r\n    ['NVG0001', 'NVN9999', 'SE', '03/2010'],\r\n    ['NVO0001', 'NWR9999', 'GO', '03/2010'],\r\n    ['NWS0001', 'NXQ9999', 'MA', '07/2010'],\r\n    ['NXR0001', 'NXT9999', 'AC', '05/2011'],\r\n    ['NXU0001', 'NXW9999', 'PE', '07/2010'],\r\n    ['NXX0001', 'NYG9999', 'MG', '10/2011'],\r\n    ['NYH0001', 'NZZ9999', 'BA', '10/2010'],\r\n    ['OAA0001', 'OAO9999', 'AM', '12/2010'],\r\n    ['OAP0001', 'OBS9999', 'MT', '05/2011'],\r\n    ['OBT0001', 'OCA9999', 'PA', '07/2011'],\r\n    ['OCB0001', 'OCU9999', 'CE', '02/2011'],\r\n    ['OCV0001', 'ODT9999', 'ES', '05/2011'],\r\n    ['ODU0001', 'OEI9999', 'PI', '09/2011'],\r\n    ['OEJ0001', 'OES9999', 'SE', '08/2011'],\r\n    ['OET0001', 'OFH9999', 'PB', '04/2011'],\r\n    ['OFI0001', 'OFW9999', 'PA', '03/2011'],\r\n    ['OFX0001', 'OGG9999', 'PB', '06/2011'],\r\n    ['OGH0001', 'OHA9999', 'GO', '04/2011'],\r\n    ['OHB0001', 'OHK9999', 'AL', '09/2011'],\r\n    ['OHL0001', 'OHW9999', 'RO', '11/2011'],\r\n    ['OHX0001', 'OIQ9999', 'CE', '12/2011'],\r\n    ['OIR0001', 'OJQ9999', 'MA', '01/2012'],\r\n    ['OJR0001', 'OKC9999', 'RN', '04/2012'],\r\n    ['OKD0001', 'OKH9999', 'SC', '02/2014'],\r\n    ['OKI0001', 'OLG9999', 'BA', '10/2011'],\r\n    ['OLH0001', 'OLN9999', 'TO', '02/2012'],\r\n    ['OLO0001', 'OMH9999', 'MG', '03/2012'],\r\n    ['OMI0001', 'OOF9999', 'GO', '04/2012'],\r\n    ['OOG0001', 'OOU9999', 'MS', '02/2012'],\r\n    ['OOV0001', 'ORC9999', 'MG', '06/2012'],\r\n    ['ORD0001', 'ORM9999', 'AL', '01/2012'],\r\n    ['ORN0001', 'OSV9999', 'CE', '07/2012'],\r\n    ['OSW0001', 'OTZ9999', 'PA', '08/2012'],\r\n    ['OUA0001', 'OUE9999', 'PI', '11/2012'],\r\n    ['OUF0001', 'OVD9999', 'BA', '12/2012'],\r\n    ['OVE0001', 'OVF9999', 'ES', '12/2012'],\r\n    ['OVG0001', 'OVG9999', 'AC', '05/2013'],\r\n    ['OVH0001', 'OVL9999', 'ES', '07/2013'],\r\n    ['OVM0001', 'OVV9999', 'DF', '11/2013'],\r\n    ['OVW0001', 'OVY9999', 'PI', '10/2013'],\r\n    ['OVZ0001', 'OWG9999', 'RN', '06/2013'],\r\n    ['OWH0001', 'OXK9999', 'MG', '10/2013'],\r\n    ['OXL0001', 'OXL9999', 'RO', '11/2013'],\r\n    ['OXM0001', 'OXM9999', 'AM', '11/2013'],\r\n    ['OXN0001', 'OXN9999', 'AL', '11/2013'],\r\n    ['OXO0001', 'OXO9999', 'PB', '11/2013'],\r\n    ['OXP0001', 'OXP9999', 'AC', '12/2013'],\r\n    ['OXQ0001', 'OXZ9999', 'MA', '04/2014'],\r\n    ['OYA0001', 'OYC9999', 'TO', '11/2013'],\r\n    ['OYD0001', 'OYK9999', 'ES', '12/2013'],\r\n    ['OYL0001', 'OYZ9999', 'PE', '02/2014'],\r\n    ['OZA0001', 'OZA9999', 'CE', '01/2014'],\r\n    ['OZB0001', 'OZB9999', 'SE', '01/2014'],\r\n    ['OZC0001', 'OZV9999', 'BA', '03/2014'],\r\n    ['OZW0001', 'PBZ9999', 'DF', '05/2014'],\r\n    ['PCA0001', 'PED9999', 'PE', '12/2014'],\r\n    ['PEE0001', 'PFQ9999', 'PE', '09/2010'],\r\n    ['PFR0001', 'PGK9999', 'PE', '07/2012'],\r\n    ['PGL0001', 'PGU9999', 'PE', '10/2013'],\r\n    ['PGV0001', 'PGZ9999', 'PE', '12/2014'],\r\n    ['PHA0001', 'PHZ9999', 'AM', '06/2014'],\r\n    ['PIA0001', 'PIZ9999', 'PI', '06/2014'],\r\n    ['PJA0001', 'PLZ9999', 'BA', '10/2014'],\r\n    ['PMA0001', 'POZ9999', 'CE', '06/2014'],\r\n    ['PPA0001', 'PPZ9999', 'ES', '08/2014'],\r\n    ['PQA0001', 'PRZ9999', 'GO', '03/2015'],\r\n    ['PSA0001', 'PTZ9999', 'MA', '12/2014'],\r\n    ['PUA0001', 'PZZ9999', 'MG', '05/2014'],\r\n    ['QAA0001', 'QAZ9999', 'MS', '12/2014'],\r\n    ['QBA0001', 'QCZ9999', 'MT', '05/2014'],\r\n    ['QDA0001', 'QEZ9999', 'PA', '10/2014'],\r\n    ['QFA0001', 'QFZ9999', 'PB', '05/2014'],\r\n    ['QGA0001', 'QGZ9999', 'RN', '09/2014'],\r\n    ['QHA0001', 'QJZ9999', 'SC', '05/2014'],\r\n    ['QKA0001', 'QKM9999', 'TO', '11/2014'],\r\n    ['QKN0001', 'QKZ9999', 'SE', '06/2014'],\r\n    ['QLA0001', 'QLM9999', 'AL', '09/2015'],\r\n    ['QLN0001', 'QLT9999', 'AP', '01/2015'],\r\n    ['QLU0001', 'QLZ9999', 'AC', '08/2014'],\r\n    ['QMA0001', 'QMP9999', 'SE', '03/2017'],\r\n    ['QMQ0001', 'QQZ9999', 'MG', '07/2017'],\r\n    ['QRA0001', 'QRA9999', 'RO', '11/2017'],\r\n    ['QRB0001', 'QRZ9999', 'ES', '05/2018'],\r\n    ['QSA0001', 'QSZ9999', 'PB', '04/2018'],\r\n    ['QTA0001', 'QTB9999', 'RO', '08/2018'],\r\n    ['QTC0001', 'RIN9999', 'BR', '00/0000'],\r\n    ['RIO0001', 'RIO9999', 'RJ', '09/2018'],\r\n    ['RLA0001', 'SAU9999', 'BR', '00/0000'],\r\n    ['SAV0001', 'SAV9999', 'SP', '09/2009'],\r\n  ];\r\n  \r\n  export const LICENSEPLATES_INVALID = { start: 'SAW0001', end: 'ZZZ9999' } // || Sequências ainda não definidas\r\n  \r\n  export function validateLicensePlate(licensePlate: string | number, includesMercosul?: boolean) {\r\n    const licensePlateClean = licensePlate.toString()\r\n      .replace(/-/g, '')\r\n      .replace(/ /g, '')\r\n      .toUpperCase();\r\n    const regex = {\r\n      legacyBR: /^[A-Z]{3}[0-9]{4}$/,\r\n      mercosulBR: /^[A-Z]{3}[0-9]{1}[A-Z]{1}[0-9]{2}$/,\r\n      mercosulAR: /^[A-Z]{2}[0-9]{3}[A-Z]{2}$|^[A-Z]{1}[0-9]{3}[A-Z]{3}$/,\r\n      mercosulBO: /^[A-Z]{2}[0-9]{5}$/,\r\n      mercosulPY: /^[A-Z]{4}[0-9]{3}$|^[0-9]{3}[A-Z]{4}$/,\r\n      mercosulUY: /^[A-Z]{3}[0-9]{4}$/,\r\n    }\r\n    const isLegadoBRInvalid =\r\n      licensePlateClean >= LICENSEPLATES_INVALID.start && licensePlateClean <= LICENSEPLATES_INVALID.end;\r\n    if ((regex.legacyBR.test(licensePlateClean) && !isLegadoBRInvalid)\r\n      || (regex.mercosulBR.test(licensePlateClean))\r\n      || (includesMercosul && (\r\n        (regex.mercosulAR.test(licensePlateClean))\r\n        || (regex.mercosulBO.test(licensePlateClean))\r\n        || (regex.mercosulPY.test(licensePlateClean))\r\n        || (regex.mercosulUY.test(licensePlateClean))\r\n      ))) {\r\n      return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function rgSP(number: string) {\r\n    number = \"0000000\" + number;\r\n    number = number.slice(number.length - 8);\r\n  \r\n    let b1 = parseInt(number.slice(7));\r\n    let b2 = parseInt(number.slice(6, 7));\r\n    let b3 = parseInt(number.slice(5, 6));\r\n    let b4 = parseInt(number.slice(4, 5));\r\n    let b5 = parseInt(number.slice(3, 4));\r\n    let b6 = parseInt(number.slice(2, 3));\r\n    let b7 = parseInt(number.slice(1, 2));\r\n    let b8 = parseInt(number.slice(0, 1));\r\n  \r\n    let cispDig: any = (b1 * 2 + b2 * 3 + b3 * 4 + b4 * 5 + b5 * 6 + b6 * 7 + b7 * 8 + b8 * 9) % 11;\r\n    if (cispDig == 10) {\r\n      cispDig = \"X\";\r\n    }\r\n  \r\n    return cispDig;\r\n}\r\n\r\nexport function rgRJ(number: string) {\r\n    number = \"0000000\" + number;\r\n    number = number.slice(number.length - 8);\r\n\r\n    let b1 = parseInt(number.slice(7));\r\n    let b2 = parseInt(number.slice(6, 7));\r\n    let b3 = parseInt(number.slice(5, 6));\r\n    let b4 = parseInt(number.slice(4, 5));\r\n    let b5 = parseInt(number.slice(3, 4));\r\n    let b6 = parseInt(number.slice(2, 3));\r\n    let b7 = parseInt(number.slice(1, 2));\r\n    let b8 = parseInt(number.slice(0, 1));\r\n\r\n    let ci7 = b1 * 2; if (ci7 > 9) { ci7 = ci7 - 9; }\r\n    let ci56 = b3 * 2; if (ci56 > 9) { ci56 = ci56 - 9; }\r\n    let ci34 = b5 * 2; if (ci34 > 9) { ci34 = ci34 - 9; }\r\n    let ci12 = b7 * 2; if (ci12 > 9) { ci12 = ci12 - 9; }\r\n    let ci67 = b2;\r\n    let ci45 = b4;\r\n    let ci23 = b6;\r\n    let ci01 = b8;\r\n\r\n    let cirjDig = (ci7 + ci56 + ci34 + ci12 + ci67 + ci45 + ci23 + ci01) % 10;\r\n    cirjDig = 10 - cirjDig; if (cirjDig == 10) { cirjDig = 0; }\r\n\r\n    return cirjDig;\r\n}\r\n\r\nconst RG: BigObject<Function> = {\r\n    sp: rgSP,\r\n    rj: rgRJ\r\n}\r\n\r\nexport default RG;\r\n\r\nexport const validateBr: BigObject<Function> = {\r\n  aih: validateAih,\r\n  cartaocredito: validateCartaoCredito,\r\n  cellphone: validateCellphone,\r\n  cep: validateCep,\r\n  certidao: validateCertidao,\r\n  chassi: validateChassi,\r\n  cnae: validateCnae,\r\n  cnh: validateCnh,\r\n  cnhEspelho: validateCnhEspelho,\r\n  renachEstadual: validateRenachEstadual,\r\n  renachSeguranca: validateRenachSeguranca,\r\n  cnpj: validateCnpj,\r\n  cns: validateCns,\r\n  contabanco: validateContaBanco,\r\n  cpf: validateCpf,\r\n  cpfcnpj: validateCpfCnpj,\r\n  currency: validateCurrency,\r\n  data: validateData,\r\n  date: validateDate,\r\n  datetime: validateDatetime,\r\n  datahora: validateDataHora,\r\n  ect: validateEct,\r\n  email: validateEmail,\r\n  endereco: validateEndereco,\r\n  inscricaoestadual: validateInscricaoEstadual,\r\n  iptu: validateIptu,\r\n  number: validateNumber,\r\n  porcentagem: validatePorcentagem,\r\n  pispasep: validatePispasep,\r\n  licensePlate: validateLicensePlate,\r\n  processo: validateProcesso,\r\n  renavam: validateRenavam,\r\n  rg: validateRg,\r\n  senha: validateSenha,\r\n  site: validateSite,\r\n  sped: validateSped,\r\n  phoneNumber: validatePhoneNumber,\r\n  time: validateTime,\r\n  titulo: validateTitulo,\r\n  username: validateUsername\r\n};\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const cpf: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.cpf(v) ? null : {cpf: true};\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { cpf } from './validator';\r\n\r\nconst CPF_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => CPFValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[cpf][formControlName],[cpf][formControl],[cpf][ngModel]',\r\n  providers: [CPF_VALIDATOR]\r\n})\r\nexport class CPFValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return cpf(c);\r\n  }\r\n}\r\n","const dollarSign = '$'\r\nconst emptyString = ''\r\nconst comma = ','\r\nconst period = '.'\r\nconst minus = '-'\r\nconst minusRegExp = /-/\r\nconst nonDigitsRegExp = /\\D+/g\r\nconst number = 'number'\r\nconst digitRegExp = /\\d/\r\nconst caretTrap = '[]'\r\n\r\nexport function createNumberMask({\r\n  prefix = dollarSign,\r\n  suffix = emptyString,\r\n  includeThousandsSeparator = true,\r\n  thousandsSeparatorSymbol = comma,\r\n  allowDecimal = false,\r\n  decimalSymbol = period,\r\n  decimalLimit = 2,\r\n  requireDecimal = false,\r\n  allowNegative = false,\r\n  allowLeadingZeroes = false,\r\n  integerLimit = null\r\n} = {}) {\r\n  const prefixLength = prefix && prefix.length || 0\r\n  const suffixLength = suffix && suffix.length || 0\r\n  const thousandsSeparatorSymbolLength = thousandsSeparatorSymbol && thousandsSeparatorSymbol.length || 0\r\n\r\n  function numberMask(rawValue = emptyString) {\r\n    const rawValueLength = rawValue.length\r\n\r\n    if (\r\n      rawValue === emptyString ||\r\n      (rawValue[0] === prefix[0] && rawValueLength === 1)\r\n    ) {\r\n      return prefix.split(emptyString).concat([digitRegExp.toString()]).concat(suffix.split(emptyString))\r\n    } else if(\r\n      rawValue === decimalSymbol &&\r\n      allowDecimal\r\n    ) {\r\n      return prefix.split(emptyString).concat(['0', decimalSymbol, digitRegExp.toString()]).concat(suffix.split(emptyString))\r\n    }\r\n\r\n    const isNegative = (rawValue[0] === minus) && allowNegative\r\n    //If negative remove \"-\" sign\r\n    if(isNegative) {\r\n      rawValue = rawValue.toString().substr(1)\r\n    }\r\n\r\n    const indexOfLastDecimal = rawValue.lastIndexOf(decimalSymbol)\r\n    const hasDecimal = indexOfLastDecimal !== -1\r\n\r\n    let integer\r\n    let fraction\r\n    let mask\r\n\r\n    // remove the suffix\r\n    if (rawValue.slice(suffixLength * -1) === suffix) {\r\n      rawValue = rawValue.slice(0, suffixLength * -1)\r\n    }\r\n\r\n    if (hasDecimal && (allowDecimal || requireDecimal)) {\r\n      integer = rawValue.slice(rawValue.slice(0, prefixLength) === prefix ? prefixLength : 0, indexOfLastDecimal)\r\n\r\n      fraction = rawValue.slice(indexOfLastDecimal + 1, rawValueLength)\r\n      fraction = convertToMask(fraction.replace(nonDigitsRegExp, emptyString))\r\n    } else {\r\n      if (rawValue.slice(0, prefixLength) === prefix) {\r\n        integer = rawValue.slice(prefixLength)\r\n      } else {\r\n        integer = rawValue\r\n      }\r\n    }\r\n\r\n    if (integerLimit && typeof integerLimit === number) {\r\n      const thousandsSeparatorRegex = thousandsSeparatorSymbol === '.' ? '[.]' : `${thousandsSeparatorSymbol}`\r\n      const numberOfThousandSeparators = (integer.match(new RegExp(thousandsSeparatorRegex, 'g')) || []).length\r\n\r\n      integer = integer.slice(0, integerLimit + (numberOfThousandSeparators * thousandsSeparatorSymbolLength))\r\n    }\r\n\r\n    integer = integer.replace(nonDigitsRegExp, emptyString)\r\n\r\n    if (!allowLeadingZeroes) {\r\n      integer = integer.replace(/^0+(0$|[^0])/, '$1')\r\n    }\r\n\r\n    integer = (includeThousandsSeparator) ? addThousandsSeparator(integer, thousandsSeparatorSymbol) : integer\r\n\r\n    mask = convertToMask(integer)\r\n\r\n    if ((hasDecimal && allowDecimal) || requireDecimal === true) {\r\n      if (rawValue[indexOfLastDecimal - 1] !== decimalSymbol) {\r\n        mask.push(caretTrap)\r\n      }\r\n\r\n      mask.push(decimalSymbol, caretTrap)\r\n\r\n      if (fraction) {\r\n        if (typeof decimalLimit === number) {\r\n          fraction = fraction.slice(0, decimalLimit)\r\n        }\r\n\r\n        mask = mask.concat(fraction)\r\n      }\r\n\r\n      if (requireDecimal === true && rawValue[indexOfLastDecimal - 1] === decimalSymbol) {\r\n        mask.push(digitRegExp)\r\n      }\r\n    }\r\n\r\n    if (prefixLength > 0) {\r\n      mask = prefix.split(emptyString).concat(mask)\r\n    }\r\n\r\n    if (isNegative) {\r\n      // If user is entering a negative number, add a mask placeholder spot to attract the caret to it.\r\n      if (mask.length === prefixLength) {\r\n        mask.push(digitRegExp)\r\n      }\r\n\r\n      mask = [minusRegExp].concat(mask)\r\n    }\r\n\r\n    if (suffix.length > 0) {\r\n      mask = mask.concat(suffix.split(emptyString))\r\n    }\r\n\r\n    return mask\r\n  }\r\n\r\n  numberMask.instanceOf = 'createNumberMask'\r\n\r\n  return numberMask\r\n}\r\n\r\nfunction convertToMask(strNumber) {\r\n  return strNumber\r\n    .split(emptyString)\r\n    .map((char) => digitRegExp.test(char) ? digitRegExp : char)\r\n}\r\n\r\n// http://stackoverflow.com/a/10899795/604296\r\nfunction addThousandsSeparator(n, thousandsSeparatorSymbol) {\r\n  return n.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandsSeparatorSymbol)\r\n}","import { BigObject, MaskType } from './interfaces';\r\nimport { createNumberMask } from './masks/create-number-mask';\r\nimport { isArray, processCaretTraps } from './utils';\r\nimport { maskIptu } from './iptu';\r\nimport { MASKSIE } from './inscricao-estadual';\r\n\r\nconst maskNumber: any = {\r\n  decimalLimit: 2,\r\n  thousandsSeparatorSymbol: '.',\r\n  decimalSymbol: ',',\r\n  allowDecimal: true,\r\n  integerLimit: 17,\r\n  prefix: '',\r\n  suffix: ''\r\n};\r\n\r\nexport const MASKS: BigObject<MaskType> = {\r\n  aih: {\r\n    text: '000000000000-0', \r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  cartaocredito: {\r\n    text: '0000 0000 0000 0000 00/00 000',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, '/', /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/]\r\n  },\r\n  cellphone: {\r\n    text: '(00) 00000-0000',\r\n    textMask: ['(', /[1-9]/, /\\d/, ')', ' ', /[5-9]/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  cep: {\r\n    text: '00.000-000',\r\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]\r\n  },\r\n  certidao: {\r\n    text: '000000.00.00.0000.0.00000.000.0000000-00', \r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, '.', /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\r\n  },\r\n  chassi: {\r\n    text: 'AAA AAAAAA AA AA0000', \r\n    textMask: [/[1-9]/, /\\w/, /\\w/, ' ', /\\w/, /\\w/, /\\w/, /\\w/, /\\w/, /\\w/, ' ', /\\w/, /\\w/, ' ', /\\w/, /\\w/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  cid: {\r\n    textMask: false\r\n  },\r\n  cnae: {\r\n    text: '0000-0/00',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, '/', /\\d/, /\\d/]\r\n  },\r\n  cnh: {\r\n    text: '000000000-00',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\r\n  },\r\n  renachseguranca: {\r\n    text: '00000000000',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  renachestadual: {\r\n    text: 'AA000000000',\r\n    textMask: [/[A-S]/, /[A-Z]/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  cnhespelho: {\r\n    text: '0000000000',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  cnpj: {\r\n    text: '00.000.000/0000-00',\r\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\r\n  },\r\n  cns: {\r\n    text: '000 0000 0000 00-00',\r\n    textMask: [/[1|2|7|8|9]/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, '-', /\\d/, /\\d/]\r\n  },\r\n  contabanco: {\r\n    text: '000 00000-0 00000-0',\r\n    textMask: [/\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  cpf: {\r\n    text: '000.000.000-00',\r\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\r\n  },\r\n  cpfcnpj: {\r\n    text: '0000.0000.0000',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\r\n  },\r\n  currency: {\r\n    text: '0.000,00',\r\n    textMask: createNumberMask({\r\n      ...maskNumber,\r\n      prefix: 'R$ ',\r\n      allowNegative: true\r\n    })\r\n  },\r\n  data: {\r\n    text: '00/00/0000',\r\n    textMask: [/[0-3]/, /[0-9]/, '/', /[0-1]/, /[0-9]/, '/', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\r\n  },\r\n  date: {\r\n    text: '00/00/0000',\r\n    textMask: [/[0-1]/, /[0-9]/, '/', /[0-3]/, /[0-9]/, '/', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\r\n  },\r\n  datetime: {\r\n    text: '00/00/0000 00:00',\r\n    textMask: [/[0-1]/, /[0-9]/, '/', /[0-3]/, /[0-9]/, '/', /[0-2]/, /[0-9]/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, ':', /[0-5]/, /\\d/]\r\n  },\r\n  datahora: {\r\n    text: '00/00/0000 00:00',\r\n    textMask: [/[0-3]/, /[0-9]/, '/', /[0-1]/, /[0-9]/, '/', /[0-2]/, /[0-9]/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, ':', /[0-5]/, /\\d/]\r\n  },\r\n  ect: {\r\n    text: '00000000-0',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  endereco: {\r\n    text: '0000.0000.0000',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\r\n  },\r\n  iptu: {\r\n    text: '0000.0000.0000',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\r\n  },\r\n  number: {\r\n    text: '0.000,00',\r\n    textMask: createNumberMask(maskNumber)\r\n  },\r\n  porcentagem: {\r\n    text: '00,00%',\r\n    textMask: createNumberMask({\r\n      ...maskNumber,\r\n      suffix: '%'\r\n    })\r\n  },\r\n  pispasep: {\r\n    text: '000.00000.00-0',\r\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, '-', /\\d/]\r\n  },\r\n  licensePlate: {\r\n    text: 'AAA-0000',\r\n    textMask: [/[A-Za-z]/, /[A-Za-z]/, /[A-Za-z]/, '-', /\\d/, /[A-Za-z\\d]/, /\\d/, /\\d/]\r\n  },\r\n  processo: {\r\n    text: '0000000-00.0000.AAA.0000',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[A-Za-z]/, /[A-Za-z]/, /[A-Za-z]/, '.', /\\d/, /\\d/, /\\d/, /\\d/]\r\n  },\r\n  renavam: {\r\n    text: '0000000000-00',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/],\r\n    textMaskFunction: function mask(userInput: any) {\r\n      const numbers = userInput.match(/\\d/g);\r\n      let numberLength = 0;\r\n      if (numbers) {\r\n        numberLength = numbers.join('').length;\r\n      }\r\n      if (!userInput || numberLength < 9) {\r\n        return [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/];\r\n      } else {\r\n        return [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/];\r\n      }\r\n    }\r\n  },\r\n  rg: {\r\n    text: 'AA-00.000.000',\r\n    textMask: [/[A-Za-z]/, /[A-Za-z]/, '-', /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/]\r\n  },\r\n  sped: {\r\n    text: '0000.0000.0000',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\r\n  },\r\n  phoneNumber: {\r\n    text: '(00) 00000-0000',\r\n    textMask: ['(', /[1-9]/, /\\d/, ')', ' ', /[1-9]/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/],\r\n    textMaskFunction: function mask(userInput: any) {\r\n      const numbers = userInput.match(/\\d/g);\r\n      let numberLength = 0;\r\n      if (numbers) {\r\n        numberLength = numbers.join('').length;\r\n      }\r\n      if (!userInput || numberLength > 10) {\r\n        return ['(', /[1-9]/, /\\d/, ')', ' ', /[1-9]/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\r\n      } else {\r\n        return ['(', /[1-9]/, /\\d/, ')', ' ', /[1-9]/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\r\n      }\r\n    }\r\n  },\r\n  time: {\r\n    text: '00:00',\r\n    textMask: [/\\d/, /\\d/, ':', /[0-5]/, /\\d/]\r\n  },\r\n  titulo: {\r\n    text: '0000.0000.0000',\r\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\r\n  },\r\n  utils: {\r\n    numberToString: (n: number) => {\r\n      if (!n || typeof n === 'string') {\r\n        return n;\r\n      }\r\n      return (n.toString()).replace('.', ',');\r\n    },\r\n    textMask: false\r\n  }\r\n};\r\n\r\nconst makeGeneric = (key: string) => {\r\n  return (value: string) => {\r\n    if (!value) {\r\n      return '';\r\n    }\r\n    let mask = MASKS[key].textMask;\r\n    let textMaskFunction = MASKS[key].textMaskFunction;\r\n    if (typeof textMaskFunction === 'function') {\r\n      mask = textMaskFunction(value);\r\n    }\r\n\r\n    return conformToMask(\r\n      value,\r\n      mask,\r\n      { guide: false }\r\n    ).conformedValue;\r\n  };\r\n};\r\n\r\nfunction formatNumber(maskType: any, numberValue: any, decimalsFormat: number = 2) {\r\n  if (!numberValue && numberValue !== 0) {\r\n    return '';\r\n  }\r\n\r\n  if (typeof numberValue !== 'string') {\r\n    numberValue = numberValue.toString().replace('.', ',');\r\n  }\r\n\r\n  const vals = numberValue.split(',');\r\n\r\n  if (!maskType.textMask || typeof maskType.textMask !== 'function') {\r\n    return '';\r\n  }\r\n\r\n  const mask = maskType.textMask(vals[0]);\r\n\r\n  let formattedValue = conformToMask(numberValue, mask, { guide: false }).conformedValue;\r\n  let decimalPart = vals[1] && decimalsFormat > 0 ? ',' + vals[1].padEnd(decimalsFormat, '0') : '';\r\n\r\n  return formattedValue + decimalPart;\r\n}\r\n\r\nexport const maskBr = {\r\n  aih: makeGeneric('aih'),\r\n  cartaocredito: makeGeneric('cartaocredito'),\r\n  cellphone: makeGeneric('cellphone'),\r\n  cep: makeGeneric('cep'),\r\n  certidao: makeGeneric('certidao'),\r\n  chassi: makeGeneric('chassi'),\r\n  cnae: makeGeneric('cnae'),\r\n  cnh: makeGeneric('cnh'),\r\n  renachseguranca: makeGeneric('renachseguranca'),\r\n  renachestadual: makeGeneric('renachestadual'),\r\n  cnhespelho: makeGeneric('cnhespelho'),\r\n  cnpj: makeGeneric('cnpj'),\r\n  cns: makeGeneric('cns'),\r\n  contabanco: makeGeneric('contabanco'),\r\n  cpf: makeGeneric('cpf'),\r\n  cpfcnpj: makeGeneric('cpfcnpj'),\r\n  currency: (currencyValueInput: string | number, decimalsFormat: number = 2) => {\r\n    return formatNumber(MASKS['currency'], currencyValueInput, decimalsFormat);\r\n  },\r\n  data: makeGeneric('data'),\r\n  date: makeGeneric('date'),\r\n  datetime: makeGeneric('datetime'),\r\n  datahora: makeGeneric('datahora'),\r\n  ect: makeGeneric('ect'),\r\n  endereco: makeGeneric('endereco'),\r\n  inscricaoestadual: (inscricaoestadualValue: string, estado: string) => {\r\n    const ie = MASKSIE;\r\n    const ieState = ie[estado];\r\n\r\n    if (!inscricaoestadualValue || !estado || !ieState || !ieState.textMask) {\r\n      return '';\r\n    }\r\n\r\n    let mask = ieState.textMask;\r\n    let textMaskFunction = ieState.textMaskFunction;\r\n    if (typeof textMaskFunction === 'function') {\r\n      mask = textMaskFunction(inscricaoestadualValue);\r\n    }\r\n\r\n    return conformToMask(inscricaoestadualValue, mask, { guide: false }).conformedValue;\r\n  },\r\n  iptu: (iptuValue: string, estado: string, cidade: string) => {\r\n    const mask = maskIptu(iptuValue, estado, cidade);\r\n    if (!mask || typeof mask === 'string') {\r\n      return '';\r\n    }\r\n    return conformToMask(iptuValue, mask.textMask, { guide: false }).conformedValue;\r\n  },\r\n  number: (numberValue: any, decimalsFormat: number = 2) => {\r\n    return formatNumber(MASKS['number'], numberValue, decimalsFormat);\r\n  },\r\n  porcentagem: (porcentagemValue: string, decimalsFormat: number = 2) => {\r\n    return formatNumber(MASKS['porcentagem'], porcentagemValue, decimalsFormat);\r\n  },\r\n  pispasep: makeGeneric('pispasep'),\r\n  licensePlate: makeGeneric('licensePlate'),\r\n  processo: makeGeneric('processo'),\r\n  renavam: makeGeneric('renavam'),\r\n  rg: makeGeneric('rg'),\r\n  sped: makeGeneric('sped'),\r\n  phoneNumber: makeGeneric('phoneNumber'),\r\n  time: (value: string | Date) => {\r\n    if (value instanceof Date) {\r\n      value = value.toTimeString().split(' ')[0];\r\n    }\r\n    return makeGeneric('time')(value);\r\n  },\r\n  titulo: makeGeneric('titulo')\r\n};\r\n\r\n/**\r\n * FROM TEXT-MASK\r\n */\r\nexport const placeholderChar = '_';\r\nexport const strFunction = 'function';\r\n\r\nconst defaultPlaceholderChar = placeholderChar;\r\nconst emptyArray: any = [];\r\nconst emptyString = '';\r\n\r\nexport function conformToMask(inputValue: String | Date = emptyString, mask = emptyArray, config: any = {}) {\r\n  let rawValue = inputValue.toString();\r\n  if (typeof inputValue === 'number') {\r\n    rawValue = (<number>inputValue).toString();\r\n  }\r\n  if (inputValue instanceof Date) {\r\n    rawValue = (<Date>inputValue).toLocaleString(\"pt-br\");\r\n  }\r\n\r\n  if (!isArray(mask)) {\r\n    if (typeof mask === strFunction) {\r\n      mask = mask(inputValue, config);\r\n      mask = processCaretTraps(mask).maskWithoutCaretTraps;\r\n    } else {\r\n      throw new Error('Text-mask:conformToMask; The mask property must be an array.');\r\n    }\r\n  }\r\n\r\n  const guide = config.guide || true;\r\n  const previousConformedValue = config.previousConformedValue || emptyString;\r\n  const placeholder = convertMaskToPlaceholder(mask, placeholderChar);\r\n  const currentCaretPosition = config.currentCaretPosition;\r\n  const keepCharPositions = config.keepCharPositions;\r\n\r\n  const suppressGuide = guide === false && previousConformedValue !== undefined;\r\n  const rawValueLength = rawValue.length;\r\n  const previousConformedValueLength = previousConformedValue.length;\r\n  const placeholderLength = placeholder.length;\r\n  const maskLength = mask.length;\r\n  const editDistance = rawValueLength - previousConformedValueLength;\r\n  const isAddition = editDistance > 0;\r\n  const indexOfFirstChange = currentCaretPosition + (isAddition ? -editDistance : 0);\r\n  const indexOfLastChange = indexOfFirstChange + Math.abs(editDistance);\r\n\r\n  if (keepCharPositions === true && !isAddition) {\r\n    let compensatingPlaceholderChars = emptyString;\r\n    for (let i = indexOfFirstChange; i < indexOfLastChange; i++) {\r\n      if (placeholder[i] === placeholderChar) {\r\n        compensatingPlaceholderChars += placeholderChar;\r\n      }\r\n    }\r\n    rawValue = rawValue.slice(0, indexOfFirstChange) + compensatingPlaceholderChars + rawValue.slice(indexOfFirstChange, rawValueLength);\r\n  }\r\n\r\n  const rawValueArr = rawValue.split(emptyString).map((char, i) => ({ char, isNew: i >= indexOfFirstChange && i < indexOfLastChange }));\r\n\r\n  for (let i = rawValueLength - 1; i >= 0; i--) {\r\n    const { char } = rawValueArr[i];\r\n    if (char !== placeholderChar) {\r\n      const shouldOffset = i >= indexOfFirstChange && previousConformedValueLength === maskLength;\r\n      if (char === placeholder[(shouldOffset) ? i - editDistance : i]) {\r\n        rawValueArr.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  let conformedValue = emptyString;\r\n  let someCharsRejected = false;\r\n\r\n  placeholderLoop: for (let i = 0; i < placeholderLength; i++) {\r\n    const charInPlaceholder = placeholder[i];\r\n    if (charInPlaceholder === placeholderChar) {\r\n      if (rawValueArr.length > 0) {\r\n        while (rawValueArr.length > 0) {\r\n          const shift = rawValueArr.shift();\r\n          let rawValueChar: string = '', isNew: boolean = false;\r\n          if (shift) {\r\n            rawValueChar = shift.char;\r\n            isNew = shift.isNew;\r\n          }\r\n\r\n          if (rawValueChar === placeholderChar && suppressGuide !== true) {\r\n            conformedValue += placeholderChar;\r\n            continue placeholderLoop;\r\n          } else if (mask[i].test(rawValueChar)) {\r\n            if (\r\n              keepCharPositions !== true ||\r\n              isNew === false ||\r\n              previousConformedValue === emptyString ||\r\n              guide === false ||\r\n              !isAddition\r\n            ) {\r\n              conformedValue += rawValueChar;\r\n            } else {\r\n              const rawValueArrLength = rawValueArr.length;\r\n              let indexOfNextAvailablePlaceholderChar: number | null = null;\r\n              for (let i = 0; i < rawValueArrLength; i++) {\r\n                const charData = rawValueArr[i];\r\n                if (charData.char !== placeholderChar && charData.isNew === false) {\r\n                  break;\r\n                }\r\n                if (charData.char === placeholderChar) {\r\n                  indexOfNextAvailablePlaceholderChar = i;\r\n                  break;\r\n                }\r\n              }\r\n              if (indexOfNextAvailablePlaceholderChar !== null) {\r\n                conformedValue += rawValueChar;\r\n                rawValueArr.splice(indexOfNextAvailablePlaceholderChar, 1);\r\n              } else {\r\n                i--;\r\n              }\r\n            }\r\n            continue placeholderLoop;\r\n          } else {\r\n            someCharsRejected = true;\r\n          }\r\n        }\r\n      }\r\n      if (suppressGuide === false) {\r\n        conformedValue += placeholder.substr(i, placeholderLength);\r\n      }\r\n      break;\r\n    } else {\r\n      conformedValue += charInPlaceholder;\r\n    }\r\n  }\r\n\r\n  if (suppressGuide && isAddition === false) {\r\n    let indexOfLastFilledPlaceholderChar: number | null = null;\r\n    for (let i = 0; i < conformedValue.length; i++) {\r\n      if (placeholder[i] === placeholderChar) {\r\n        indexOfLastFilledPlaceholderChar = i;\r\n      }\r\n    }\r\n    if (indexOfLastFilledPlaceholderChar !== null) {\r\n      conformedValue = conformedValue.substr(0, indexOfLastFilledPlaceholderChar + 1);\r\n    } else {\r\n      conformedValue = emptyString;\r\n    }\r\n  }\r\n\r\n  return { conformedValue, meta: { someCharsRejected } };\r\n}\r\n\r\nexport function convertMaskToPlaceholder(mask = emptyArray, placeholderChar = defaultPlaceholderChar) {\r\n  if (!isArray(mask)) {\r\n    throw new Error('Text-mask:convertMaskToPlaceholder; The mask property must be an array.');\r\n  }\r\n\r\n  if (mask.indexOf(placeholderChar) !== -1) {\r\n    throw new Error(\r\n      'Placeholder character must not be used as part of the mask. Please specify a character ' +\r\n      'that is not present in your mask as your placeholder character.\\n\\n' +\r\n      `The placeholder character that was received is: ${JSON.stringify(placeholderChar)}\\n\\n` +\r\n      `The mask that was received is: ${JSON.stringify(mask)}`\r\n    );\r\n  }\r\n\r\n  return mask.map((char: any) => (char instanceof RegExp) ? placeholderChar : char).join('');\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n    name: 'cpf',\r\n})\r\nexport class CPFPipe implements PipeTransform {\r\n    transform(cpfValue: any) {\r\n      return maskBr.cpf(cpfValue);\r\n    }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const cnpj: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.cnpj(v) ? null : {cnpj: true};\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { cnpj } from './validator';\r\n\r\n\r\nconst CNPJ_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => CNPJValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[cnpj][formControlName],[cnpj][formControl],[cnpj][ngModel]',\r\n  providers: [CNPJ_VALIDATOR]\r\n})\r\nexport class CNPJValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return cnpj(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n    name: 'cnpj',\r\n})\r\nexport class CNPJPipe implements PipeTransform {\r\n    transform(cnpjValue: any) {\r\n      return maskBr.cnpj(cnpjValue);\r\n    }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const phoneNumber: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.phoneNumber(v) ? null : { phoneNumber: true };\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { phoneNumber } from './validator';\r\n\r\nconst PHONENUMBER_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => PhoneNumberValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[phoneNumber][formControlName],[phoneNumber][formControl],[phoneNumber][ngModel]',\r\n  providers: [PHONENUMBER_VALIDATOR]\r\n})\r\nexport class PhoneNumberValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return phoneNumber(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({name: 'phoneNumber'})\r\nexport class PhoneNumberPipe implements PipeTransform {\r\n    transform(phoneNumberValue: any) {\r\n        return maskBr.phoneNumber(phoneNumberValue);\r\n    }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const cellphone: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.cellphone(v) ? null : { cellphone: true };\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { cellphone } from './validator';\r\n\r\nconst CELLPHONE_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => CellphoneValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[cellphone][formControlName],[cellphone][formControl],[cellphone][ngModel]',\r\n  providers: [CELLPHONE_VALIDATOR]\r\n})\r\nexport class CellphoneValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return cellphone(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({ name: 'cellphone' })\r\nexport class CellphonePipe implements PipeTransform {\r\n    transform(cellphoneValue: any) {\r\n        return maskBr.cellphone(cellphoneValue);\r\n    }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const inscricaoestadual = (estado: string):\r\n  ValidatorFn => {\r\n    return (control: AbstractControl): { [key: string]: boolean } => {\r\n      if (utilsBr.isPresent(Validators.required(control))) {\r\n        return null;\r\n      }\r\n      const v: string = control.value;\r\n      return validateBr.inscricaoestadual(v, estado) ? null : { inscricaoestadual: true };\r\n    };\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { inscricaoestadual } from './validator';\r\n\r\n\r\nconst INSCRICAOESTADUAL_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => InscricaoEstadualValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[inscricaoestadual][formControlName],[inscricaoestadual][formControl],[inscricaoestadual][ngModel]',\r\n  providers: [INSCRICAOESTADUAL_VALIDATOR]\r\n})\r\nexport class InscricaoEstadualValidator implements Validator {\r\n  validate(c: AbstractControl): { [key: string]: any } {\r\n    return inscricaoestadual('mg')(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n  name: 'inscricaoestadual',\r\n})\r\nexport class InscricaoEstadualPipe implements PipeTransform {\r\n  transform(inscricaoestadualValue: any, estado: any) {\r\n    return maskBr.inscricaoestadual(inscricaoestadualValue, estado);\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const cep: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.cep(v) ? null : { cep: true };\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { cep } from './validator';\r\n\r\nconst CEP_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => CEPValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[cep][formControlName],[cep][formControl],[cep][ngModel]',\r\n  providers: [CEP_VALIDATOR]\r\n})\r\nexport class CEPValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return cep(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n    name: 'cep',\r\n})\r\nexport class CEPPipe implements PipeTransform {\r\n    transform(cepValue: any) {\r\n        return maskBr.cep(cepValue);\r\n    }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const currency: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.currency(v) ? null : { currency: true };\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { currency } from './validator';\r\n\r\nconst CURRENCY_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => CURRENCYValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[currency][formControlName],[currency][formControl],[currency][ngModel]',\r\n  providers: [CURRENCY_VALIDATOR]\r\n})\r\nexport class CURRENCYValidator implements Validator {\r\n  validate(c: AbstractControl): { [key: string]: any } {\r\n    return currency(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({ name: 'currencyBrazil' })\r\nexport class CURRENCYPipe implements PipeTransform {\r\n  transform(currencyValue: any, decimalValue: any = 2) {\r\n    return maskBr.currency(currencyValue, decimalValue);\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const number: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.number(v) ? null : { number: true };\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { number } from './validator';\r\n\r\nconst NUMBER_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => NUMBERValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[number][formControlName],[number][formControl],[number][ngModel]',\r\n  providers: [NUMBER_VALIDATOR]\r\n})\r\nexport class NUMBERValidator implements Validator {\r\n  validate(c: AbstractControl): { [key: string]: any } {\r\n    return number(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n  name: 'numberBrazil',\r\n})\r\nexport class NUMBERPipe implements PipeTransform {\r\n  transform(numberValue: any, decimalValue: any = 2) {\r\n    return maskBr.number(numberValue, decimalValue);\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const licensePlate: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n    if (utilsBr.isPresent(Validators.required(control))) {\r\n        return null;\r\n    }\r\n\r\n    const v: string = control.value;\r\n    return validateBr.licensePlate(v) ? null : {licensePlate: true};\r\n}\r\n","import { Directive, forwardRef} from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { licensePlate } from './validator';\r\n\r\nconst LICENSEPLATE_VALIDATOR: any = {\r\n    provide: NG_VALIDATORS,\r\n    /* tslint:disable: no-use-before-declare */\r\n    useExisting: forwardRef(() => LICENSEPLATEValidator),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    // tslint:disable-next-line:directive-selector\r\n    selector: '[license-plate][formControlName],[license-plate][formControl],[license-plate][ngModel]',\r\n    providers: [LICENSEPLATE_VALIDATOR]\r\n})\r\nexport class LICENSEPLATEValidator implements Validator {\r\n    validate(c: AbstractControl): {[key: string]: any} {\r\n        return licensePlate(c);\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({name: 'licensePlate'})\r\nexport class LICENSEPLATEPipe implements PipeTransform {\r\n  transform(licensePlateValue: any) {\r\n    return maskBr.licensePlate(licensePlateValue).toUpperCase();\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const percentage: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.porcentagem(v) ? null : { percentage: true };\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { percentage } from './validator';\r\n\r\nconst PERCENTAGE_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => PERCENTAGEValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[percentage][formControlName],[percentage][formControl],[percentage][ngModel]',\r\n  providers: [PERCENTAGE_VALIDATOR]\r\n})\r\nexport class PERCENTAGEValidator implements Validator {\r\n  validate(c: AbstractControl): { [key: string]: any } {\r\n    return percentage(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n  name: 'percentage',\r\n})\r\nexport class PERCENTAGEPipe implements PipeTransform {\r\n  transform(percentageValue: any, decimalValue: any) {\r\n    return maskBr.porcentagem(percentageValue, decimalValue);\r\n  }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const renavam: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.renavam(v) ? null : { renavam: true };\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { renavam } from './validator';\r\n\r\nconst RENAVAM_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => RenavamValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[renavam][formControlName],[renavam][formControl],[renavam][ngModel]',\r\n  providers: [RENAVAM_VALIDATOR]\r\n})\r\nexport class RenavamValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return renavam(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n    name: 'renavam',\r\n})\r\nexport class RenavamPipe implements PipeTransform {\r\n    transform(renavamValue: any) {\r\n        return maskBr.renavam(renavamValue);\r\n    }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const pispasep: ValidatorFn = (control: AbstractControl): { [key: string]: boolean } => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.pispasep(v) ? null : { pispasep: true };\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { pispasep } from './validator';\r\n\r\nconst PISPASE_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => PispasepValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[pispasep][formControlName],[pispasep][formControl],[pispasep][ngModel]',\r\n  providers: [PISPASE_VALIDATOR]\r\n})\r\nexport class PispasepValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return pispasep(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n    name: 'pispasep',\r\n})\r\nexport class PispasepPipe implements PipeTransform {\r\n    transform(pispasepValue: any) {\r\n        return maskBr.pispasep(pispasepValue);\r\n    }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const rg: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.rg(v) ? null : {rg: true};\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { rg } from './validator';\r\n\r\nconst RG_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => RGValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[rg][formControlName],[rg][formControl],[rg][ngModel]',\r\n  providers: [RG_VALIDATOR]\r\n})\r\nexport class RGValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return rg(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n    name: 'rg',\r\n})\r\nexport class RGPipe implements PipeTransform {\r\n    transform(rgValue: any) {\r\n      return maskBr.rg(rgValue);\r\n    }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const time: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n  if (utilsBr.isPresent(Validators.required(control))) {\r\n    return null;\r\n  }\r\n\r\n  const v: string = control.value;\r\n  return validateBr.time(v) ? null : {time: true};\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { time } from './validator';\r\n\r\nconst TIME_VALIDATOR: any = {\r\n  provide: NG_VALIDATORS,\r\n  // tslint:disable-next-line: no-use-before-declare\r\n  useExisting: forwardRef(() => TIMEValidator),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: '[time][formControlName],[time][formControl],[time][ngModel]',\r\n  providers: [TIME_VALIDATOR]\r\n})\r\nexport class TIMEValidator implements Validator {\r\n  validate(c: AbstractControl): {[key: string]: any} {\r\n    return time(c);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n    name: 'time',\r\n})\r\nexport class TIMEPipe implements PipeTransform {\r\n    transform(timeValue: any) {\r\n        return maskBr.time(timeValue);\r\n    }\r\n}\r\n","import { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\r\nimport { utilsBr } from '../_utils/utils';\r\nimport { validateBr } from '../_utils/validate';\r\n\r\nexport const titulo: ValidatorFn = (control: AbstractControl): {[key: string]: boolean} => {\r\n    if (utilsBr.isPresent(Validators.required(control)))\r\n        return null;\r\n\r\n    const v: string = control.value;\r\n    return validateBr.titulo(v) ? null : {titulo: true};\r\n}\r\n","import { Directive, forwardRef} from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\n\r\nimport { titulo } from './validator';\r\n\r\nconst TITULO_VALIDATOR: any = {\r\n    provide: NG_VALIDATORS,\r\n    // tslint:disable-next-line: no-use-before-declare\r\n    useExisting: forwardRef(() => TITULOValidator),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    // tslint:disable-next-line:directive-selector\r\n    selector: '[titulo][formControlName],[titulo][formControl],[titulo][ngModel]',\r\n    providers: [TITULO_VALIDATOR]\r\n})\r\nexport class TITULOValidator implements Validator {\r\n    validate(c: AbstractControl): {[key: string]: any} {\r\n        return titulo(c);\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { maskBr } from '../_utils/mask-br';\r\n\r\n@Pipe({\r\n  name: 'titulo'\r\n})\r\nexport class TITULOPipe implements PipeTransform {\r\n  transform(tituloValue: any) {\r\n    return maskBr.titulo(tituloValue);\r\n  }\r\n}\r\n","export const placeholderChar: string = '_'\r\nexport const strFunction: string = 'function'","import { placeholderChar as defaultPlaceholderChar } from './constants'\r\n\r\nconst emptyArray = []\r\n\r\nexport function convertMaskToPlaceholder(mask: any = emptyArray, localPlaceholderChar: string = defaultPlaceholderChar) {\r\n  if (!isArray(mask)) {\r\n    throw new Error(\r\n      'Text-mask:convertMaskToPlaceholder; The mask property must be an array.'\r\n    )\r\n  }\r\n\r\n  if (mask.indexOf(localPlaceholderChar) !== -1) {\r\n    throw new Error(\r\n      'Placeholder character must not be used as part of the mask. Please specify a character ' +\r\n      'that is not present in your mask as your placeholder character.\\n\\n' +\r\n      `The placeholder character that was received is: ${JSON.stringify(localPlaceholderChar)}\\n\\n` +\r\n      `The mask that was received is: ${JSON.stringify(mask)}`\r\n    )\r\n  }\r\n\r\n  return mask.map((char: any) => {\r\n    return (char instanceof RegExp) ? localPlaceholderChar : char\r\n  }).join('')\r\n}\r\n\r\nexport function isArray(value: any) {\r\n  return (Array.isArray && Array.isArray(value)) || value instanceof Array\r\n}\r\n\r\nexport function isString(value: any) {\r\n  return typeof value === 'string' || value instanceof String\r\n}\r\n\r\nexport function isNumber(value: any) {\r\n  return typeof value === 'number' && !isNaN(value)\r\n}\r\n\r\nexport function isNil(value) {\r\n  return typeof value === 'undefined' || value === null\r\n}\r\n\r\nconst strCaretTrap = '[]'\r\nexport function processCaretTraps(mask) {\r\n  const indexes: number[] = []\r\n\r\n  let indexOfCaretTrap: number;\r\n  while(indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) { // eslint-disable-line\r\n    indexes.push(indexOfCaretTrap)\r\n\r\n    mask.splice(indexOfCaretTrap, 1)\r\n  }\r\n\r\n  return {maskWithoutCaretTraps: mask, indexes}\r\n}","import { convertMaskToPlaceholder, isArray, processCaretTraps } from './utilities'\r\nimport { placeholderChar as defaultPlaceholderChar, strFunction } from './constants'\r\n\r\nconst emptyArray = []\r\nconst emptyString = ''\r\n\r\nexport function conformToMask(rawValue = emptyString, mask: any = emptyArray, config: any = {}) {\r\n  if (!isArray(mask)) {\r\n    // If someone passes a function as the mask property, we should call the\r\n    // function to get the mask array - Normally this is handled by the\r\n    // `createTextMaskInputElement:update` function - this allows mask functions\r\n    // to be used directly with `conformToMask`\r\n    if (typeof mask === strFunction) {\r\n      // call the mask function to get the mask array\r\n      mask = mask(rawValue, config)\r\n\r\n      // mask functions can setup caret traps to have some control over how the caret moves. We need to process\r\n      // the mask for any caret traps. `processCaretTraps` will remove the caret traps from the mask\r\n      mask = processCaretTraps(mask).maskWithoutCaretTraps\r\n    } else {\r\n      throw new Error(\r\n        'Text-mask:conformToMask; The mask property must be an array.'\r\n      )\r\n    }\r\n  }\r\n\r\n  // These configurations tell us how to conform the mask\r\n  const {\r\n    guide = true,\r\n    previousConformedValue = emptyString,\r\n    placeholderChar = defaultPlaceholderChar,\r\n    placeholder = convertMaskToPlaceholder(mask, placeholderChar),\r\n    currentCaretPosition,\r\n    keepCharPositions\r\n  } = config\r\n\r\n  // The configs below indicate that the user wants the algorithm to work in *no guide* mode\r\n  const suppressGuide = guide === false && previousConformedValue !== undefined\r\n\r\n  // Calculate lengths once for performance\r\n  const rawValueLength = rawValue.length\r\n  const previousConformedValueLength = previousConformedValue.length\r\n  const placeholderLength = placeholder.length\r\n  const maskLength = mask.length\r\n\r\n  // This tells us the number of edited characters and the direction in which they were edited (+/-)\r\n  const editDistance = rawValueLength - previousConformedValueLength\r\n\r\n  // In *no guide* mode, we need to know if the user is trying to add a character or not\r\n  const isAddition = editDistance > 0\r\n\r\n  // Tells us the index of the first change. For (438) 394-4938 to (38) 394-4938, that would be 1\r\n  const indexOfFirstChange = currentCaretPosition + (isAddition ? -editDistance : 0)\r\n\r\n  // We're also gonna need the index of last change, which we can derive as follows...\r\n  const indexOfLastChange = indexOfFirstChange + Math.abs(editDistance)\r\n\r\n  // If `conformToMask` is configured to keep character positions, that is, for mask 111, previous value\r\n  // _2_ and raw value 3_2_, the new conformed value should be 32_, not 3_2 (default behavior). That's in the case of\r\n  // addition. And in the case of deletion, previous value _23, raw value _3, the new conformed string should be\r\n  // __3, not _3_ (default behavior)\r\n  //\r\n  // The next block of logic handles keeping character positions for the case of deletion. (Keeping\r\n  // character positions for the case of addition is further down since it is handled differently.)\r\n  // To do this, we want to compensate for all characters that were deleted\r\n  if (keepCharPositions === true && !isAddition) {\r\n    // We will be storing the new placeholder characters in this variable.\r\n    let compensatingPlaceholderChars = emptyString\r\n\r\n    // For every character that was deleted from a placeholder position, we add a placeholder char\r\n    for (let i = indexOfFirstChange; i < indexOfLastChange; i++) {\r\n      if (placeholder[i] === placeholderChar) {\r\n        compensatingPlaceholderChars += placeholderChar\r\n      }\r\n    }\r\n\r\n    // Now we trick our algorithm by modifying the raw value to make it contain additional placeholder characters\r\n    // That way when the we start laying the characters again on the mask, it will keep the non-deleted characters\r\n    // in their positions.\r\n    rawValue = (\r\n      rawValue.slice(0, indexOfFirstChange) +\r\n      compensatingPlaceholderChars +\r\n      rawValue.slice(indexOfFirstChange, rawValueLength)\r\n    )\r\n  }\r\n\r\n  // Convert `rawValue` string to an array, and mark characters based on whether they are newly added or have\r\n  // existed in the previous conformed value. Identifying new and old characters is needed for `conformToMask`\r\n  // to work if it is configured to keep character positions.\r\n  const rawValueArr: { char: string; isNew: boolean; }[] = rawValue\r\n                                                            .split(emptyString)\r\n                                                            .map((char, i) => ({char, isNew: i >= indexOfFirstChange && i < indexOfLastChange}))\r\n\r\n  // The loop below removes masking characters from user input. For example, for mask\r\n  // `00 (111)`, the placeholder would be `00 (___)`. If user input is `00 (234)`, the loop below\r\n  // would remove all characters but `234` from the `rawValueArr`. The rest of the algorithm\r\n  // then would lay `234` on top of the available placeholder positions in the mask.\r\n  for (let i = rawValueLength - 1; i >= 0; i--) {\r\n    const {char} = rawValueArr[i]\r\n\r\n    if (char !== placeholderChar) {\r\n      const shouldOffset = i >= indexOfFirstChange && previousConformedValueLength === maskLength\r\n\r\n      if (char === placeholder[(shouldOffset) ? i - editDistance : i]) {\r\n        rawValueArr.splice(i, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  // This is the variable that we will be filling with characters as we figure them out\r\n  // in the algorithm below\r\n  let conformedValue = emptyString\r\n  let someCharsRejected = false\r\n\r\n  // Ok, so first we loop through the placeholder looking for placeholder characters to fill up.\r\n  placeholderLoop: for (let i = 0; i < placeholderLength; i++) {\r\n    const charInPlaceholder = placeholder[i]\r\n\r\n    // We see one. Let's find out what we can put in it.\r\n    if (charInPlaceholder === placeholderChar) {\r\n      // But before that, do we actually have any user characters that need a place?\r\n      if (rawValueArr.length > 0) {\r\n        // We will keep chipping away at user input until either we run out of characters\r\n        // or we find at least one character that we can map.\r\n        while (rawValueArr.length > 0) {\r\n          // Let's retrieve the first user character in the queue of characters we have left\r\n          const {char: rawValueChar, isNew} = rawValueArr.shift()!\r\n\r\n          // If the character we got from the user input is a placeholder character (which happens\r\n          // regularly because user input could be something like (540) 90_-____, which includes\r\n          // a bunch of `_` which are placeholder characters) and we are not in *no guide* mode,\r\n          // then we map this placeholder character to the current spot in the placeholder\r\n          if (rawValueChar === placeholderChar && suppressGuide !== true) {\r\n            conformedValue += placeholderChar\r\n\r\n            // And we go to find the next placeholder character that needs filling\r\n            continue placeholderLoop\r\n\r\n          // Else if, the character we got from the user input is not a placeholder, let's see\r\n          // if the current position in the mask can accept it.\r\n          } else if (mask[i].test(rawValueChar)) {\r\n            // we map the character differently based on whether we are keeping character positions or not.\r\n            // If any of the conditions below are met, we simply map the raw value character to the\r\n            // placeholder position.\r\n            if (\r\n              keepCharPositions !== true ||\r\n              isNew === false ||\r\n              previousConformedValue === emptyString ||\r\n              guide === false ||\r\n              !isAddition\r\n            ) {\r\n              conformedValue += rawValueChar\r\n            } else {\r\n              // We enter this block of code if we are trying to keep character positions and none of the conditions\r\n              // above is met. In this case, we need to see if there's an available spot for the raw value character\r\n              // to be mapped to. If we couldn't find a spot, we will discard the character.\r\n              //\r\n              // For example, for mask `1111`, previous conformed value `_2__`, raw value `942_2__`. We can map the\r\n              // `9`, to the first available placeholder position, but then, there are no more spots available for the\r\n              // `4` and `2`. So, we discard them and end up with a conformed value of `92__`.\r\n              const rawValueArrLength = rawValueArr.length\r\n              let indexOfNextAvailablePlaceholderChar: number = -1\r\n\r\n              // Let's loop through the remaining raw value characters. We are looking for either a suitable spot, ie,\r\n              // a placeholder character or a non-suitable spot, ie, a non-placeholder character that is not new.\r\n              // If we see a suitable spot first, we store its position and exit the loop. If we see a non-suitable\r\n              // spot first, we exit the loop and our `indexOfNextAvailablePlaceholderChar` will stay as `null`.\r\n              for (let i = 0; i < rawValueArrLength; i++) {\r\n                const charData = rawValueArr[i]\r\n\r\n                if (charData.char !== placeholderChar && charData.isNew === false) {\r\n                  break\r\n                }\r\n\r\n                if (charData.char === placeholderChar) {\r\n                  indexOfNextAvailablePlaceholderChar = i\r\n                  break\r\n                }\r\n              }\r\n\r\n              // If `indexOfNextAvailablePlaceholderChar` is not `null`, that means the character is not blocked.\r\n              // We can map it. And to keep the character positions, we remove the placeholder character\r\n              // from the remaining characters\r\n              if (indexOfNextAvailablePlaceholderChar !== null) {\r\n                conformedValue += rawValueChar\r\n                rawValueArr.splice(indexOfNextAvailablePlaceholderChar, 1)\r\n\r\n              // If `indexOfNextAvailablePlaceholderChar` is `null`, that means the character is blocked. We have to\r\n              // discard it.\r\n              } else {\r\n                i--\r\n              }\r\n            }\r\n\r\n            // Since we've mapped this placeholder position. We move on to the next one.\r\n            continue placeholderLoop\r\n          } else {\r\n            someCharsRejected = true\r\n          }\r\n        }\r\n      }\r\n\r\n      // We reach this point when we've mapped all the user input characters to placeholder\r\n      // positions in the mask. In *guide* mode, we append the left over characters in the\r\n      // placeholder to the `conformedString`, but in *no guide* mode, we don't wanna do that.\r\n      //\r\n      // That is, for mask `(111)` and user input `2`, we want to return `(2`, not `(2__)`.\r\n      if (suppressGuide === false) {\r\n        conformedValue += placeholder.substr(i, placeholderLength)\r\n      }\r\n\r\n      // And we break\r\n      break\r\n\r\n    // Else, the charInPlaceholder is not a placeholderChar. That is, we cannot fill it\r\n    // with user input. So we just map it to the final output\r\n    } else {\r\n      conformedValue += charInPlaceholder\r\n    }\r\n  }\r\n\r\n  // The following logic is needed to deal with the case of deletion in *no guide* mode.\r\n  //\r\n  // Consider the silly mask `(111) /// 1`. What if user tries to delete the last placeholder\r\n  // position? Something like `(589) /// `. We want to conform that to `(589`. Not `(589) /// `.\r\n  // That's why the logic below finds the last filled placeholder character, and removes everything\r\n  // from that point on.\r\n  if (suppressGuide && isAddition === false) {\r\n    let indexOfLastFilledPlaceholderChar: number = -1;\r\n\r\n    // Find the last filled placeholder position and substring from there\r\n    for (let i = 0; i < conformedValue.length; i++) {\r\n      if (placeholder[i] === placeholderChar) {\r\n        indexOfLastFilledPlaceholderChar = i\r\n      }\r\n    }\r\n\r\n    if (indexOfLastFilledPlaceholderChar !== null) {\r\n      // We substring from the beginning until the position after the last filled placeholder char.\r\n      conformedValue = conformedValue.substr(0, indexOfLastFilledPlaceholderChar + 1)\r\n    } else {\r\n      // If we couldn't find `indexOfLastFilledPlaceholderChar` that means the user deleted\r\n      // the first character in the mask. So we return an empty string.\r\n      conformedValue = emptyString\r\n    }\r\n  }\r\n\r\n  return {conformedValue, meta: {someCharsRejected}}\r\n}","const defaultArray: any[] = []\r\nconst emptyString = ''\r\n\r\nexport function adjustCaretPosition({\r\n  previousConformedValue = emptyString,\r\n  previousPlaceholder = emptyString,\r\n  currentCaretPosition = 0,\r\n  conformedValue,\r\n  rawValue,\r\n  placeholderChar,\r\n  placeholder,\r\n  indexesOfPipedChars = defaultArray,\r\n  caretTrapIndexes = defaultArray\r\n}) {\r\n  if (currentCaretPosition === 0 || !rawValue.length) { return 0 }\r\n\r\n  // Store lengths for faster performance?\r\n  const rawValueLength = rawValue.length\r\n  const previousConformedValueLength = previousConformedValue.length\r\n  const placeholderLength = placeholder.length\r\n  const conformedValueLength = conformedValue.length\r\n\r\n  // This tells us how long the edit is. If user modified input from `(2__)` to `(243__)`,\r\n  // we know the user in this instance pasted two characters\r\n  const editLength = rawValueLength - previousConformedValueLength\r\n\r\n  // If the edit length is positive, that means the user is adding characters, not deleting.\r\n  const isAddition = editLength > 0\r\n\r\n  // This is the first raw value the user entered that needs to be conformed to mask\r\n  const isFirstRawValue = previousConformedValueLength === 0\r\n\r\n  // A partial multi-character edit happens when the user makes a partial selection in their\r\n  // input and edits that selection. That is going from `(123) 432-4348` to `() 432-4348` by\r\n  // selecting the first 3 digits and pressing backspace.\r\n  //\r\n  // Such cases can also happen when the user presses the backspace while holding down the ALT\r\n  // key.\r\n  const isPartialMultiCharEdit = editLength > 1 && !isAddition && !isFirstRawValue\r\n\r\n  // This algorithm doesn't support all cases of multi-character edits, so we just return\r\n  // the current caret position.\r\n  //\r\n  // This works fine for most cases.\r\n  if (isPartialMultiCharEdit) { return currentCaretPosition }\r\n\r\n  // For a mask like (111), if the `previousConformedValue` is (1__) and user attempts to enter\r\n  // `f` so the `rawValue` becomes (1f__), the new `conformedValue` would be (1__), which is the\r\n  // same as the original `previousConformedValue`. We handle this case differently for caret\r\n  // positioning.\r\n  const possiblyHasRejectedChar = isAddition && (\r\n    previousConformedValue === conformedValue ||\r\n    conformedValue === placeholder\r\n  )\r\n\r\n  let startingSearchIndex = 0\r\n  let trackRightCharacter\r\n  let targetChar\r\n\r\n  if (possiblyHasRejectedChar) {\r\n    startingSearchIndex = currentCaretPosition - editLength\r\n  } else {\r\n    // At this point in the algorithm, we want to know where the caret is right before the raw input\r\n    // has been conformed, and then see if we can find that same spot in the conformed input.\r\n    //\r\n    // We do that by seeing what character lies immediately before the caret, and then look for that\r\n    // same character in the conformed input and place the caret there.\r\n\r\n    // First, we need to normalize the inputs so that letter capitalization between raw input and\r\n    // conformed input wouldn't matter.\r\n    const normalizedConformedValue = conformedValue.toLowerCase()\r\n    const normalizedRawValue = rawValue.toLowerCase()\r\n\r\n    // Then we take all characters that come before where the caret currently is.\r\n    const leftHalfChars = normalizedRawValue.substr(0, currentCaretPosition).split(emptyString)\r\n\r\n    // Now we find all the characters in the left half that exist in the conformed input\r\n    // This step ensures that we don't look for a character that was filtered out or rejected by `conformToMask`.\r\n    const intersection = leftHalfChars.filter((char) => normalizedConformedValue.indexOf(char) !== -1)\r\n\r\n    // The last character in the intersection is the character we want to look for in the conformed\r\n    // value and the one we want to adjust the caret close to\r\n    targetChar = intersection[intersection.length - 1]\r\n\r\n    // Calculate the number of mask characters in the previous placeholder\r\n    // from the start of the string up to the place where the caret is\r\n    const previousLeftMaskChars = previousPlaceholder\r\n      .substr(0, intersection.length)\r\n      .split(emptyString)\r\n      .filter(char => char !== placeholderChar)\r\n      .length\r\n\r\n    // Calculate the number of mask characters in the current placeholder\r\n    // from the start of the string up to the place where the caret is\r\n    const leftMaskChars = placeholder\r\n      .substr(0, intersection.length)\r\n      .split(emptyString)\r\n      .filter(char => char !== placeholderChar)\r\n      .length\r\n\r\n    // Has the number of mask characters up to the caret changed?\r\n    const masklengthChanged = leftMaskChars !== previousLeftMaskChars\r\n\r\n    // Detect if `targetChar` is a mask character and has moved to the left\r\n    const targetIsMaskMovingLeft = (\r\n      previousPlaceholder[intersection.length - 1] !== undefined &&\r\n      placeholder[intersection.length - 2] !== undefined &&\r\n      previousPlaceholder[intersection.length - 1] !== placeholderChar &&\r\n      previousPlaceholder[intersection.length - 1] !== placeholder[intersection.length - 1] &&\r\n      previousPlaceholder[intersection.length - 1] === placeholder[intersection.length - 2]\r\n    )\r\n\r\n    // If deleting and the `targetChar` `is a mask character and `masklengthChanged` is true\r\n    // or the mask is moving to the left, we can't use the selected `targetChar` any longer\r\n    // if we are not at the end of the string.\r\n    // In this case, change tracking strategy and track the character to the right of the caret.\r\n    if (\r\n      !isAddition &&\r\n      (masklengthChanged || targetIsMaskMovingLeft) &&\r\n      previousLeftMaskChars > 0 &&\r\n      placeholder.indexOf(targetChar) > -1 &&\r\n      rawValue[currentCaretPosition] !== undefined\r\n    ) {\r\n      trackRightCharacter = true\r\n      targetChar = rawValue[currentCaretPosition]\r\n    }\r\n\r\n    // It is possible that `targetChar` will appear multiple times in the conformed value.\r\n    // We need to know not to select a character that looks like our target character from the placeholder or\r\n    // the piped characters, so we inspect the piped characters and the placeholder to see if they contain\r\n    // characters that match our target character.\r\n\r\n    // If the `conformedValue` got piped, we need to know which characters were piped in so that when we look for\r\n    // our `targetChar`, we don't select a piped char by mistake\r\n    const pipedChars = indexesOfPipedChars.map((index) => normalizedConformedValue[index])\r\n\r\n    // We need to know how many times the `targetChar` occurs in the piped characters.\r\n    const countTargetCharInPipedChars = pipedChars.filter((char) => char === targetChar).length\r\n\r\n    // We need to know how many times it occurs in the intersection\r\n    const countTargetCharInIntersection = intersection.filter((char) => char === targetChar).length\r\n\r\n    // We need to know if the placeholder contains characters that look like\r\n    // our `targetChar`, so we don't select one of those by mistake.\r\n    const countTargetCharInPlaceholder = placeholder\r\n      .substr(0, placeholder.indexOf(placeholderChar))\r\n      .split(emptyString)\r\n      .filter((char, index) => (\r\n        // Check if `char` is the same as our `targetChar`, so we account for it\r\n        char === targetChar &&\r\n\r\n        // but also make sure that both the `rawValue` and placeholder don't have the same character at the same\r\n        // index because if they are equal, that means we are already counting those characters in\r\n        // `countTargetCharInIntersection`\r\n        rawValue[index] !== char\r\n      ))\r\n      .length\r\n\r\n    // The number of times we need to see occurrences of the `targetChar` before we know it is the one we're looking\r\n    // for is:\r\n    const requiredNumberOfMatches = (\r\n      countTargetCharInPlaceholder +\r\n      countTargetCharInIntersection +\r\n      countTargetCharInPipedChars +\r\n      // The character to the right of the caret isn't included in `intersection`\r\n      // so add one if we are tracking the character to the right\r\n      (trackRightCharacter ? 1 : 0)\r\n    )\r\n\r\n    // Now we start looking for the location of the `targetChar`.\r\n    // We keep looping forward and store the index in every iteration. Once we have encountered\r\n    // enough occurrences of the target character, we break out of the loop\r\n    // If are searching for the second `1` in `1214`, `startingSearchIndex` will point at `4`.\r\n    let numberOfEncounteredMatches = 0\r\n    for (let i = 0; i < conformedValueLength; i++) {\r\n      const conformedValueChar = normalizedConformedValue[i]\r\n\r\n      startingSearchIndex = i + 1\r\n\r\n      if (conformedValueChar === targetChar) {\r\n        numberOfEncounteredMatches++\r\n      }\r\n\r\n      if (numberOfEncounteredMatches >= requiredNumberOfMatches) {\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // At this point, if we simply return `startingSearchIndex` as the adjusted caret position,\r\n  // most cases would be handled. However, we want to fast forward or rewind the caret to the\r\n  // closest placeholder character if it happens to be in a non-editable spot. That's what the next\r\n  // logic is for.\r\n\r\n  // In case of addition, we fast forward.\r\n  if (isAddition) {\r\n    // We want to remember the last placeholder character encountered so that if the mask\r\n    // contains more characters after the last placeholder character, we don't forward the caret\r\n    // that far to the right. Instead, we stop it at the last encountered placeholder character.\r\n    let lastPlaceholderChar = startingSearchIndex\r\n\r\n    for (let i = startingSearchIndex; i <= placeholderLength; i++) {\r\n      if (placeholder[i] === placeholderChar) {\r\n        lastPlaceholderChar = i\r\n      }\r\n\r\n      if (\r\n        // If we're adding, we can position the caret at the next placeholder character.\r\n        placeholder[i] === placeholderChar ||\r\n\r\n        // If a caret trap was set by a mask function, we need to stop at the trap.\r\n        caretTrapIndexes.indexOf(i) !== -1 ||\r\n\r\n        // This is the end of the placeholder. We cannot move any further. Let's put the caret there.\r\n        i === placeholderLength\r\n      ) {\r\n        return lastPlaceholderChar\r\n      }\r\n    }\r\n  } else {\r\n    // In case of deletion, we rewind.\r\n    if (trackRightCharacter) {\r\n      // Searching for the character that was to the right of the caret\r\n      // We start at `startingSearchIndex` - 1 because it includes one character extra to the right\r\n      for (let i = startingSearchIndex - 1; i >= 0; i--) {\r\n        // If tracking the character to the right of the cursor, we move to the left until\r\n        // we found the character and then place the caret right before it\r\n\r\n        if (\r\n          // `targetChar` should be in `conformedValue`, since it was in `rawValue`, just\r\n          // to the right of the caret\r\n          conformedValue[i] === targetChar ||\r\n\r\n          // If a caret trap was set by a mask function, we need to stop at the trap.\r\n          caretTrapIndexes.indexOf(i) !== -1 ||\r\n\r\n          // This is the beginning of the placeholder. We cannot move any further.\r\n          // Let's put the caret there.\r\n          i === 0\r\n        ) {\r\n          return i\r\n        }\r\n      }\r\n    } else {\r\n      // Searching for the first placeholder or caret trap to the left\r\n\r\n      for (let i = startingSearchIndex; i >= 0; i--) {\r\n        // If we're deleting, we stop the caret right before the placeholder character.\r\n        // For example, for mask `(111) 11`, current conformed input `(456) 86`. If user\r\n        // modifies input to `(456 86`. That is, they deleted the `)`, we place the caret\r\n        // right after the first `6`\r\n\r\n        if (\r\n          // If we're deleting, we can position the caret right before the placeholder character\r\n          placeholder[i - 1] === placeholderChar ||\r\n\r\n          // If a caret trap was set by a mask function, we need to stop at the trap.\r\n          caretTrapIndexes.indexOf(i) !== -1 ||\r\n\r\n          // This is the beginning of the placeholder. We cannot move any further.\r\n          // Let's put the caret there.\r\n          i === 0\r\n        ) {\r\n          return i\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}","import {convertMaskToPlaceholder, isString, isNumber, processCaretTraps} from './utilities'\r\nimport {placeholderChar as defaultPlaceholderChar, strFunction} from './constants'\r\nimport { conformToMask } from './conform-to-mask'\r\nimport { adjustCaretPosition } from './adjust-caret-position'\r\n\r\nconst emptyString = ''\r\nconst strNone = 'none'\r\nconst strObject = 'object'\r\nconst isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent)\r\nconst defer = typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame : setTimeout\r\n\r\nexport function createTextMaskInputElement(config) {\r\n  // Anything that we will need to keep between `update` calls, we will store in this `state` object.\r\n  const state = {previousConformedValue: undefined, previousPlaceholder: undefined}\r\n\r\n  return {\r\n    state,\r\n\r\n    // `update` is called by framework components whenever they want to update the `value` of the input element.\r\n    // The caller can send a `rawValue` to be conformed and set on the input element. However, the default use-case\r\n    // is for this to be read from the `inputElement` directly.\r\n    update(rawValue, {\r\n      inputElement,\r\n      mask: providedMask,\r\n      guide,\r\n      pipe,\r\n      placeholderChar = defaultPlaceholderChar,\r\n      keepCharPositions = false,\r\n      showMask = false\r\n    } = config) {\r\n      // if `rawValue` is `undefined`, read from the `inputElement`\r\n      if (typeof rawValue === 'undefined') {\r\n        rawValue = inputElement.value\r\n      }\r\n\r\n      // If `rawValue` equals `state.previousConformedValue`, we don't need to change anything. So, we return.\r\n      // This check is here to handle controlled framework components that repeat the `update` call on every render.\r\n      if (rawValue === state.previousConformedValue) { return }\r\n\r\n      // Text Mask accepts masks that are a combination of a `mask` and a `pipe` that work together. If such a `mask` is\r\n      // passed, we destructure it below, so the rest of the code can work normally as if a separate `mask` and a `pipe`\r\n      // were passed.\r\n      if (typeof providedMask === strObject && providedMask.pipe !== undefined && providedMask.mask !== undefined) {\r\n        pipe = providedMask.pipe\r\n        providedMask = providedMask.mask\r\n      }\r\n\r\n      // The `placeholder` is an essential piece of how Text Mask works. For a mask like `(111)`, the placeholder would\r\n      // be `(___)` if the `placeholderChar` is set to `_`.\r\n      let placeholder\r\n\r\n      // We don't know what the mask would be yet. If it is an array, we take it as is, but if it's a function, we will\r\n      // have to call that function to get the mask array.\r\n      let mask\r\n\r\n      // If the provided mask is an array, we can call `convertMaskToPlaceholder` here once and we'll always have the\r\n      // correct `placeholder`.\r\n      if (providedMask instanceof Array) {\r\n        placeholder = convertMaskToPlaceholder(providedMask, placeholderChar)\r\n      }\r\n\r\n      // In framework components that support reactivity, it's possible to turn off masking by passing\r\n      // `false` for `mask` after initialization. See https://github.com/text-mask/text-mask/pull/359\r\n      if (providedMask === false) { return }\r\n\r\n      // We check the provided `rawValue` before moving further.\r\n      // If it's something we can't work with `getSafeRawValue` will throw.\r\n      const safeRawValue = getSafeRawValue(rawValue)\r\n\r\n      // `selectionEnd` indicates to us where the caret position is after the user has typed into the input\r\n      const {selectionEnd: currentCaretPosition} = inputElement\r\n\r\n      // We need to know what the `previousConformedValue` and `previousPlaceholder` is from the previous `update` call\r\n      const {previousConformedValue, previousPlaceholder} = state\r\n\r\n      let caretTrapIndexes\r\n\r\n      // If the `providedMask` is a function. We need to call it at every `update` to get the `mask` array.\r\n      // Then we also need to get the `placeholder`\r\n      if (typeof providedMask === strFunction) {\r\n        mask = providedMask(safeRawValue, {currentCaretPosition, previousConformedValue, placeholderChar})\r\n\r\n        // disable masking if `mask` is `false`\r\n        if (mask === false) { return }\r\n\r\n        // mask functions can setup caret traps to have some control over how the caret moves. We need to process\r\n        // the mask for any caret traps. `processCaretTraps` will remove the caret traps from the mask and return\r\n        // the indexes of the caret traps.\r\n        const {maskWithoutCaretTraps, indexes} = processCaretTraps(mask)\r\n\r\n        mask = maskWithoutCaretTraps // The processed mask is what we're interested in\r\n        caretTrapIndexes = indexes // And we need to store these indexes because they're needed by `adjustCaretPosition`\r\n\r\n        placeholder = convertMaskToPlaceholder(mask, placeholderChar)\r\n\r\n      // If the `providedMask` is not a function, we just use it as-is.\r\n      } else {\r\n        mask = providedMask\r\n      }\r\n\r\n      // The following object will be passed to `conformToMask` to determine how the `rawValue` will be conformed\r\n      const conformToMaskConfig = {\r\n        previousConformedValue,\r\n        guide,\r\n        placeholderChar,\r\n        pipe,\r\n        placeholder,\r\n        currentCaretPosition,\r\n        keepCharPositions\r\n      }\r\n\r\n      // `conformToMask` returns `conformedValue` as part of an object for future API flexibility\r\n      const {conformedValue} = conformToMask(safeRawValue, mask, conformToMaskConfig)\r\n\r\n      // The following few lines are to support the `pipe` feature.\r\n      const piped = typeof pipe === strFunction\r\n\r\n      let pipeResults: any = {}\r\n\r\n      // If `pipe` is a function, we call it.\r\n      if (piped) {\r\n        // `pipe` receives the `conformedValue` and the configurations with which `conformToMask` was called.\r\n        pipeResults = pipe(conformedValue, {rawValue: safeRawValue, ...conformToMaskConfig})\r\n\r\n        // `pipeResults` should be an object. But as a convenience, we allow the pipe author to just return `false` to\r\n        // indicate rejection. Or return just a string when there are no piped characters.\r\n        // If the `pipe` returns `false` or a string, the block below turns it into an object that the rest\r\n        // of the code can work with.\r\n        if (pipeResults === false) {\r\n          // If the `pipe` rejects `conformedValue`, we use the `previousConformedValue`, and set `rejected` to `true`.\r\n          pipeResults = {value: previousConformedValue, rejected: true}\r\n        } else if (isString(pipeResults)) {\r\n          pipeResults = {value: pipeResults}\r\n        }\r\n      }\r\n\r\n      // Before we proceed, we need to know which conformed value to use, the one returned by the pipe or the one\r\n      // returned by `conformToMask`.\r\n      const finalConformedValue = (piped) ? pipeResults.value : conformedValue\r\n\r\n      // After determining the conformed value, we will need to know where to set\r\n      // the caret position. `adjustCaretPosition` will tell us.\r\n      const adjustedCaretPosition = adjustCaretPosition({\r\n        previousConformedValue,\r\n        previousPlaceholder,\r\n        conformedValue: finalConformedValue,\r\n        placeholder,\r\n        rawValue: safeRawValue,\r\n        currentCaretPosition,\r\n        placeholderChar,\r\n        indexesOfPipedChars: pipeResults.indexesOfPipedChars,\r\n        caretTrapIndexes\r\n      })\r\n\r\n      // Text Mask sets the input value to an empty string when the condition below is set. It provides a better UX.\r\n      const inputValueShouldBeEmpty = finalConformedValue === placeholder && adjustedCaretPosition === 0\r\n      const emptyValue = showMask ? placeholder : emptyString\r\n      const inputElementValue = (inputValueShouldBeEmpty) ? emptyValue : finalConformedValue\r\n\r\n      state.previousConformedValue = inputElementValue // store value for access for next time\r\n      state.previousPlaceholder = placeholder\r\n\r\n      // In some cases, this `update` method will be repeatedly called with a raw value that has already been conformed\r\n      // and set to `inputElement.value`. The below check guards against needlessly readjusting the input state.\r\n      // See https://github.com/text-mask/text-mask/issues/231\r\n      if (inputElement.value === inputElementValue) {\r\n        return\r\n      }\r\n\r\n      inputElement.value = inputElementValue // set the input value\r\n      safeSetSelection(inputElement, adjustedCaretPosition) // adjust caret position\r\n    }\r\n  }\r\n}\r\n\r\nfunction safeSetSelection(element, selectionPosition) {\r\n  if (document.activeElement === element) {\r\n    if (isAndroid) {\r\n      defer(() => element.setSelectionRange(selectionPosition, selectionPosition, strNone))\r\n    } else {\r\n      element.setSelectionRange(selectionPosition, selectionPosition, strNone)\r\n    }\r\n  }\r\n}\r\n\r\nfunction getSafeRawValue(inputValue): string {\r\n  if (isString(inputValue)) {\r\n    return inputValue.toString()\r\n  } else if (isNumber(inputValue)) {\r\n    return String(inputValue)\r\n  } else if (inputValue === undefined || inputValue === null) {\r\n    return emptyString\r\n  } else {\r\n    throw new Error(\r\n      \"The 'value' provided to Text Mask needs to be a string or a number. The value \" +\r\n      `received was:\\n\\n ${JSON.stringify(inputValue)}`\r\n    )\r\n  }\r\n}","import { Directive, ElementRef, forwardRef, Input, OnChanges, Provider, SimpleChanges, RendererFactory2, Optional, Inject } from '@angular/core'\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms'\r\nimport { ɵgetDOM as getDOM } from '@angular/platform-browser'\r\nimport { createTextMaskInputElement } from './_utils/masks/create-text-mask-input-element';\r\nimport { conformToMask as conformToMaskLocal } from './_utils/masks/conform-to-mask';\r\n\r\nexport const conformToMask=conformToMaskLocal;\r\n\r\nexport class TextMaskConfig {\r\n  mask: Array<string | RegExp> | ((raw: string) => Array<string | RegExp>) | false\r\n  guide?: boolean\r\n  placeholderChar?: string\r\n  pipe?: (conformedValue: string, config: TextMaskConfig) => false | string | object\r\n  keepCharPositions?: boolean\r\n  showMask?: boolean\r\n}\r\n\r\nexport const MASKEDINPUT_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable: no-use-before-declare */\r\n  useExisting: forwardRef(() => MaskedInputDirective),\r\n  multi: true\r\n}\r\n\r\n/**\r\n * We must check whether the agent is Android because composition events\r\n * behave differently between iOS and Android.\r\n */\r\nexport function _isAndroid(): boolean {\r\n  const userAgent = getDOM() ? getDOM().getUserAgent() : ''\r\n  return /android (\\d+)/.test(userAgent.toLowerCase())\r\n}\r\n\r\n@Directive({\r\n  host: {\r\n    '(input)': '_handleInput($event.target.value)',\r\n    '(blur)': 'onTouched()',\r\n    '(compositionstart)': '_compositionStart()',\r\n    '(compositionend)': '_compositionEnd($event.target.value)'\r\n  },\r\n  /* tslint:disable: directive-selector */\r\n  selector: '[textMask]',\r\n  exportAs: 'textMask',\r\n  providers: [MASKEDINPUT_VALUE_ACCESSOR]\r\n})\r\nexport class MaskedInputDirective implements ControlValueAccessor, OnChanges {\r\n  @Input('textMask') textMaskConfig: TextMaskConfig = {\r\n    mask: [],\r\n    guide: true,\r\n    placeholderChar: '_',\r\n    pipe: undefined,\r\n    keepCharPositions: false,\r\n  }\r\n\r\n  private textMaskInputElement: any\r\n  private inputElement: HTMLInputElement\r\n  private _renderer: any;\r\n  /** Whether the user is creating a composition string (IME events). */\r\n  private _composing = false;\r\n\r\n  constructor(\r\n    rendererFactory: RendererFactory2,\r\n    private _elementRef: ElementRef,\r\n    @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean\r\n  ) {\r\n    this._renderer = rendererFactory.createRenderer(null, null);\r\n    if (this._compositionMode == null) {\r\n      this._compositionMode = !_isAndroid()\r\n    }\r\n  }\r\n\r\n  onChange = (_: any) => { }\r\n  onTouched = () => { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this._setupMask(true)\r\n    if (this.textMaskInputElement !== undefined) {\r\n      this.textMaskInputElement.update(this.inputElement.value)\r\n    }\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    this._setupMask()\r\n\r\n    // set the initial value for cases where the mask is disabled\r\n    const normalizedValue = value == null ? '' : value\r\n    this._renderer.setProperty(this.inputElement, 'value', normalizedValue)\r\n\r\n    if (this.textMaskInputElement !== undefined) {\r\n      this.textMaskInputElement.update(value)\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn }\r\n  registerOnTouched(fn: () => void): void { this.onTouched = fn }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled)\r\n  }\r\n\r\n\r\n  _handleInput(value) {\r\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\r\n      this._setupMask()\r\n\r\n      if (this.textMaskInputElement !== undefined) {\r\n        this.textMaskInputElement.update(value)\r\n\r\n        // get the updated value\r\n        value = this.inputElement.value\r\n        this.onChange(value)\r\n      }\r\n    }\r\n  }\r\n\r\n  _setupMask(create = false) {\r\n    if (!this.inputElement) {\r\n      if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\r\n        // `textMask` directive is used directly on an input element\r\n        this.inputElement = this._elementRef.nativeElement\r\n      } else {\r\n        // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\r\n        this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0]\r\n      }\r\n    }\r\n\r\n    if (this.inputElement && create) {\r\n      this.textMaskInputElement = createTextMaskInputElement(\r\n        Object.assign({ inputElement: this.inputElement }, this.textMaskConfig)\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  _compositionStart(): void { this._composing = true }\r\n\r\n  _compositionEnd(value: any): void {\r\n    this._composing = false\r\n    if (this._compositionMode) {\r\n      this._handleInput(value)\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { cpf } from './cpf/validator';\r\nimport { CPFValidator } from './cpf/directive';\r\nimport { CPFPipe } from './cpf/pipe';\r\n\r\nexport * from './cpf/validator';\r\nexport * from './cpf/directive';\r\nexport * from './cpf/pipe';\r\n\r\nimport { cnpj } from './cnpj/validator';\r\nimport { CNPJValidator } from './cnpj/directive';\r\nimport { CNPJPipe } from './cnpj/pipe';\r\n\r\nexport * from './cnpj/validator';\r\nexport * from './cnpj/directive';\r\nexport * from './cnpj/pipe';\r\n\r\nimport { phoneNumber } from './phone-number/validator';\r\nimport { PhoneNumberValidator } from './phone-number/directive';\r\nimport { PhoneNumberPipe } from './phone-number/pipe';\r\n\r\nexport * from './phone-number/validator';\r\nexport * from './phone-number/directive';\r\nexport * from './phone-number/pipe';\r\n\r\nimport { cellphone } from './cellphone/validator';\r\nimport { CellphoneValidator } from './cellphone/directive';\r\nimport { CellphonePipe } from './cellphone/pipe';\r\n\r\nexport * from './cellphone/validator';\r\nexport * from './cellphone/directive';\r\nexport * from './cellphone/pipe';\r\n\r\nimport { inscricaoestadual } from './inscricaoestadual/validator';\r\nimport { InscricaoEstadualValidator } from './inscricaoestadual/directive';\r\nimport { InscricaoEstadualPipe } from './inscricaoestadual/pipe';\r\n\r\nexport * from './inscricaoestadual/validator';\r\nexport * from './inscricaoestadual/directive';\r\nexport * from './inscricaoestadual/pipe';\r\n\r\nimport { CEPValidator } from './cep/directive';\r\nimport { CEPPipe } from './cep/pipe';\r\nimport { cep } from './cep/validator';\r\n\r\nexport * from './cep/directive';\r\nexport * from './cep/pipe';\r\nexport * from './cep/validator';\r\n\r\nimport { currency } from './currency/validator';\r\nimport { CURRENCYValidator } from './currency/directive';\r\nimport { CURRENCYPipe } from './currency/pipe';\r\n\r\nexport * from './currency/validator';\r\nexport * from './currency/directive';\r\nexport * from './currency/pipe';\r\n\r\nimport { number } from './number/validator';\r\nimport { NUMBERValidator } from './number/directive';\r\nimport { NUMBERPipe } from './number/pipe';\r\n\r\n\r\nexport * from './number/validator';\r\nexport * from './number/directive';\r\nexport * from './number/pipe';\r\n\r\nimport { licensePlate } from './license-plate/validator';\r\nimport { LICENSEPLATEValidator } from './license-plate/directive';\r\nimport { LICENSEPLATEPipe } from './license-plate/pipe';\r\n\r\nexport * from './license-plate/validator';\r\nexport * from './license-plate/directive';\r\nexport * from './license-plate/pipe';\r\n\r\nimport { percentage } from './percentage/validator';\r\nimport { PERCENTAGEValidator } from './percentage/directive';\r\nimport { PERCENTAGEPipe } from './percentage/pipe';\r\n\r\nexport * from './percentage/validator';\r\nexport * from './percentage/directive';\r\nexport * from './percentage/pipe';\r\n\r\nimport { renavam } from './renavam/validator';\r\nimport { RenavamValidator } from './renavam/directive';\r\nimport { RenavamPipe } from './renavam/pipe';\r\n\r\nexport * from './renavam/validator';\r\nexport * from './renavam/directive';\r\nexport * from './renavam/pipe';\r\n\r\nimport { pispasep } from './pispasep/validator';\r\nimport { PispasepValidator } from './pispasep/directive';\r\nimport { PispasepPipe } from './pispasep/pipe';\r\n\r\nexport * from './pispasep/validator';\r\nexport * from './pispasep/directive';\r\nexport * from './pispasep/pipe';\r\n\r\nimport { rg } from './rg/validator';\r\nimport { RGValidator } from './rg/directive';\r\nimport { RGPipe } from './rg/pipe';\r\n\r\nexport * from './rg/validator';\r\nexport * from './rg/directive';\r\nexport * from './rg/pipe';\r\n\r\nimport { time } from './time/validator';\r\nimport { TIMEValidator } from './time/directive';\r\nimport { TIMEPipe } from './time/pipe';\r\n\r\nexport * from './time/validator';\r\nexport * from './time/directive';\r\nexport * from './time/pipe';\r\n\r\nimport { titulo } from './titulo/validator';\r\nimport { TITULOValidator } from './titulo/directive';\r\nimport { TITULOPipe } from './titulo/pipe';\r\n\r\nexport * from './titulo/validator';\r\nexport * from './titulo/directive';\r\nexport * from './titulo/pipe';\r\n\r\nexport const NgxBrazilValidators: any = {\r\n  cpf,\r\n  cnpj,\r\n  cellphone,\r\n  cep,\r\n  currency,\r\n  inscricaoestadual,\r\n  number,\r\n  pispasep,\r\n  licensePlate,\r\n  percentage,\r\n  renavam,\r\n  rg,\r\n  phoneNumber,\r\n  time,\r\n  titulo\r\n}\r\n\r\nimport { MASKS } from './_utils/mask-br';\r\nimport { MASKSIE } from './_utils/inscricao-estadual';\r\nexport const NgxBrazilMASKS = MASKS;\r\nexport const NgxBrazilMASKSIE = MASKSIE;\r\n\r\nimport { MaskedInputDirective } from './masked-input.directive';\r\nexport { MaskedInputDirective } from './masked-input.directive';\r\n\r\nexport const NgxBrazilCustomDirectives = [\r\n  CellphoneValidator,\r\n  CellphonePipe,\r\n  CEPValidator,\r\n  CEPPipe,\r\n  CNPJValidator,\r\n  CNPJPipe,\r\n  CPFValidator,\r\n  CPFPipe,\r\n  CURRENCYValidator,\r\n  CURRENCYPipe,\r\n  InscricaoEstadualValidator,\r\n  InscricaoEstadualPipe,\r\n  NUMBERValidator,\r\n  NUMBERPipe,\r\n  PERCENTAGEValidator,\r\n  PERCENTAGEPipe,\r\n  PispasepValidator,\r\n  PispasepPipe,\r\n  LICENSEPLATEValidator,\r\n  LICENSEPLATEPipe,\r\n  RGValidator,\r\n  RGPipe,\r\n  RenavamValidator,\r\n  RenavamPipe,\r\n  PhoneNumberValidator,\r\n  PhoneNumberPipe,\r\n  TIMEValidator,\r\n  TIMEPipe,\r\n  TITULOValidator,\r\n  TITULOPipe,\r\n\r\n  MaskedInputDirective\r\n];\r\n\r\nexport const NgxBrazilDirectives = {\r\n  CellphoneValidator,\r\n  CellphonePipe,\r\n  CEPValidator,\r\n  CEPPipe,\r\n  CNPJValidator,\r\n  CNPJPipe,\r\n  CPFValidator,\r\n  CPFPipe,\r\n  CURRENCYValidator,\r\n  CURRENCYPipe,\r\n  InscricaoEstadualValidator,\r\n  InscricaoEstadualPipe,\r\n  NUMBERValidator,\r\n  NUMBERPipe,\r\n  PERCENTAGEValidator,\r\n  PERCENTAGEPipe,\r\n  PispasepValidator,\r\n  PispasepPipe,\r\n  LICENSEPLATEValidator,\r\n  LICENSEPLATEPipe,\r\n  RGValidator,\r\n  RGPipe,\r\n  RenavamValidator,\r\n  RenavamPipe,\r\n  PhoneNumberValidator,\r\n  PhoneNumberPipe,\r\n  TIMEValidator,\r\n  TIMEPipe,\r\n  TITULOValidator,\r\n  TITULOPipe\r\n};\r\n\r\n@NgModule({\r\n  declarations: [ ],\r\n  imports: [ NgxBrazilCustomDirectives ],\r\n  exports: [ NgxBrazilCustomDirectives ]\r\n})\r\nclass NgxBrazil {\r\n  public static forRoot(): ModuleWithProviders<NgxBrazil> {\r\n    return {\r\n      ngModule: NgxBrazil\r\n    };\r\n  }\r\n}\r\nexport {\r\n  NgxBrazil\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["isArray","isString","isNumber","isNil","strCaretTrap","processCaretTraps","allNumbersAreSame","emptyString","number","conformToMask","placeholderChar","strFunction","emptyArray","convertMaskToPlaceholder","defaultPlaceholderChar","conformToMaskLocal","getDOM"],"mappings":"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CvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC;AACvC,IAAA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"}