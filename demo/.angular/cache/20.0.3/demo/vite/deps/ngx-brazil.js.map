{
  "version": 3,
  "sources": ["../../../../../../node_modules/ngx-brazil/fesm2022/ngx-brazil.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { forwardRef, Directive, Pipe, Input, Optional, Inject, NgModule } from '@angular/core';\nimport { Validators, NG_VALIDATORS, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { ɵgetDOM as _getDOM } from '@angular/platform-browser';\nconst STATE_ACRONYMS = ['AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR', 'RJ', 'RN', 'RO', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO'];\nconst STATES = [{\n  name: 'Acre',\n  shortname: 'AC',\n  slug: 'acre'\n}, {\n  name: 'Alagoas',\n  shortname: 'AL',\n  slug: 'alagoas'\n}, {\n  name: 'Amapá',\n  shortname: 'AP',\n  slug: 'amapa'\n}, {\n  name: 'Amazonas',\n  shortname: 'AM',\n  slug: 'amazonas'\n}, {\n  name: 'Bahia',\n  shortname: 'BA',\n  slug: 'bahia'\n}, {\n  name: 'Ceará',\n  shortname: 'CE',\n  slug: 'ceara'\n}, {\n  name: 'Distrito Federal',\n  shortname: 'DF',\n  slug: 'distrito-federal'\n}, {\n  name: 'Espírito Santo',\n  shortname: 'ES',\n  slug: 'espirito-santo'\n}, {\n  name: 'Goiás',\n  shortname: 'GO',\n  slug: 'goias'\n}, {\n  name: 'Maranhão',\n  shortname: 'MA',\n  slug: 'maranhao'\n}, {\n  name: 'Mato Grosso',\n  shortname: 'MT',\n  slug: 'mato-grosso'\n}, {\n  name: 'Mato Grosso do Sul',\n  shortname: 'MS',\n  slug: 'mato-grosso-do-sul'\n}, {\n  name: 'Minas Gerais',\n  shortname: 'MG',\n  slug: 'minas-gerais'\n}, {\n  name: 'Pará',\n  shortname: 'PA',\n  slug: 'para'\n}, {\n  name: 'Paraíba',\n  shortname: 'PB',\n  slug: 'paraiba'\n}, {\n  name: 'Paraná',\n  shortname: 'PR',\n  slug: 'parana'\n}, {\n  name: 'Pernambuco',\n  shortname: 'PE',\n  slug: 'pernambuco'\n}, {\n  name: 'Piauí',\n  shortname: 'PI',\n  slug: 'piaui'\n}, {\n  name: 'Rio de Janeiro',\n  shortname: 'RJ',\n  slug: 'rio-de-janeiro'\n}, {\n  name: 'Rio Grande do Norte',\n  shortname: 'RN',\n  slug: 'rio-grande-do-norte'\n}, {\n  name: 'Rio Grande do Sul',\n  shortname: 'RS',\n  slug: 'rio-grande-do-sul'\n}, {\n  name: 'Rondônia',\n  shortname: 'RO',\n  slug: 'rondonia'\n}, {\n  name: 'Roraima',\n  shortname: 'RR',\n  slug: 'roraima'\n}, {\n  name: 'Santa Catarina',\n  shortname: 'SC',\n  slug: 'santa-catarina'\n}, {\n  name: 'São Paulo',\n  shortname: 'SP',\n  slug: 'sao-paulo'\n}, {\n  name: 'Sergipe',\n  shortname: 'SE',\n  slug: 'sergipe'\n}, {\n  name: 'Tocantins',\n  shortname: 'TO',\n  slug: 'tocantins'\n}];\n\n/**\n * Funções utilitárias\n */\nfunction isPresent(obj) {\n  return obj !== undefined && obj !== null;\n}\nfunction isArray$1(value) {\n  return Array.isArray && Array.isArray(value) || value instanceof Array;\n}\nfunction isString$1(value) {\n  return typeof value === 'string' || value instanceof String;\n}\nfunction isNumber$1(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\nfunction isNil$1(value) {\n  return typeof value === 'undefined' || value === null;\n}\n/**\n * Processa Caret Traps (para máscaras de entrada)\n */\nconst strCaretTrap$1 = '[]';\nfunction processCaretTraps$1(mask) {\n  const indexes = [];\n  let indexOfCaretTrap;\n  while ((indexOfCaretTrap = mask.indexOf(strCaretTrap$1)) !== -1) {\n    indexes.push(indexOfCaretTrap);\n    mask.splice(indexOfCaretTrap, 1);\n  }\n  return {\n    maskWithoutCaretTraps: mask,\n    indexes\n  };\n}\n/**\n * Funções para cálculo de dígito verificador usando módulo 11\n */\nconst modulo11 = value => {\n  let mults = [];\n  let weightVal = 2;\n  for (let i = 0; i < value.length; i++) {\n    mults.push(weightVal);\n    weightVal++;\n    if (weightVal > 9) weightVal = 2;\n  }\n  mults = mults.reverse();\n  let sum = 0;\n  for (let i = 0; i < value.length; i++) {\n    sum += parseInt(value[i]) * mults[i];\n  }\n  const digit = sum * 10 % 11;\n  return digit;\n};\nconst modulo11Custom = (string, size, maxMult = string.length, by10 = true) => {\n  if (!by10) size = 1;\n  for (let n = 1; n <= size; n++) {\n    let soma = 0;\n    let mult = 2;\n    for (let i = string.length - 1; i >= 0; i--) {\n      soma += mult * parseInt(string.charAt(i));\n      mult++;\n      if (mult > maxMult) mult = 2;\n    }\n    let dig = by10 ? soma * 10 % 11 % 10 : soma % 11;\n    if (dig === 10) dig = 0;\n    string += dig;\n  }\n  return string.substr(string.length - size, size);\n};\n/**\n * Verifica se todos os números de uma string são iguais\n */\nfunction allNumbersAreSame$1(inputValue) {\n  const input = getAllDigits(inputValue);\n  if (typeof input === 'string') {\n    const reg = new RegExp('^(\\\\d)(?!\\\\1+$)\\\\d{' + (input.length - 1) + '}$');\n    return reg.test(input);\n  }\n  return false;\n}\n/**\n * Extrai todos os dígitos de uma string\n */\nfunction getAllDigits(input) {\n  if (!input.match) {\n    input = input.toString();\n  }\n  const match = input.match(/\\d/g);\n  return match ? match.join('') : '';\n}\n/**\n * Extrai todas as palavras de uma string\n */\nfunction getAllWords(input) {\n  const match = input.match(/\\w/g);\n  return match ? match.join('') : '';\n}\n/**\n * Converte uma string de moeda para número\n */\nfunction currencyToNumber(input) {\n  if (typeof input === 'number') {\n    return input;\n  }\n  input = input.replace(/ /g, '').replace(/[^0-9.,]+/, '');\n  if (input.indexOf('.') === input.length - 1 - 2) {\n    input = input.replace(/,/g, '');\n  } else {\n    input = input.replace(/\\./g, '').replace(',', '.');\n  }\n  return parseFloat(input);\n}\nconst makeGenericFaker = (val, options = null) => {\n  return () => {\n    if (!val.textMask || !val.textMask.map) {\n      return '';\n    }\n    const newData = val.textMask.map((c, index) => {\n      if (options && options[index]) {\n        return options[index]();\n      }\n      c = c.toString();\n      if (c === /\\d/.toString()) {\n        return Math.floor(Math.random() * 10).toString();\n      } else if (c === /[A-Za-z]/.toString()) {\n        return randomLetter(1).toString();\n      } else if (c === /\\w/.toString()) {\n        return randomLetterOrNumber(1).toString();\n      } else if (c.indexOf('/[') === 0) {\n        // /[1-9]/ ou /[5-9]/\n        c = c.replace('/[', '').replace(']/', '');\n        if (c.indexOf('-') > 0) {\n          c = c.split('-');\n          if (parseInt(c[1])) {\n            const mult = c[1] - c[0];\n            const plus = parseInt(c[0]);\n            return (Math.floor(Math.random() * mult) + plus).toString();\n          } else {\n            return rand(1, [c[0], c[1]]);\n          }\n        } else if (c.indexOf('|') > 0) {\n          c = c.split('|');\n          const index = Math.floor(Math.random() * c.length);\n          return c[index];\n        }\n      } else {\n        return c;\n      }\n    });\n    return newData.join('');\n  };\n};\n/**\n * Converte número para formato de moeda\n */\nfunction numberToCurrency(value) {\n  return ' R$ ' + value.toFixed(2).replace('.', ',') + ' ';\n}\n/**\n * Slugify - transforma uma string em um formato \"slug\" (usado em URLs amigáveis)\n */\nfunction slugify(value) {\n  return value.toString().toLowerCase().replace(/[àÀáÁâÂãäÄÅåª]+/g, 'a').replace(/[èÈéÉêÊëË]+/g, 'e').replace(/[ìÌíÍîÎïÏ]+/g, 'i').replace(/[òÒóÓôÔõÕöÖº]+/g, 'o').replace(/[ùÙúÚûÛüÜ]+/g, 'u').replace(/[ýÝÿŸ]+/g, 'y').replace(/[ñÑ]+/g, 'n').replace(/[çÇ]+/g, 'c').replace(/[ß]+/g, 'ss').replace(/[Ææ]+/g, 'ae').replace(/[Øøœ]+/g, 'oe').replace(/[%]+/g, 'pct').replace(/\\s+/g, '-').replace(/[^\\w\\-]+/g, '').replace(/\\-\\-+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n}\nfunction fillString(string, size, fill) {\n  if (string.length < size) {\n    const dif = size - string.length;\n    for (let i = 0; i < dif; i++) {\n      string = fill + string;\n    }\n  }\n  return string;\n}\n/**\n * Funções para gerar strings aleatórias\n */\nfunction randArray(array) {\n  const index = randomNumber(0, array.length);\n  return array[index];\n}\nfunction rand(length, ...ranges) {\n  var str = \"\"; // the string (initialized to \"\")\n  while (length--) {\n    // repeat this length of times\n    var ind = Math.floor(Math.random() * ranges.length); // get a random range from the ranges object\n    var min = ranges[ind][0].charCodeAt(0),\n      // get the minimum char code allowed for this range\n      max = ranges[ind][1].charCodeAt(0); // get the maximum char code allowed for this range\n    var c = Math.floor(Math.random() * (max - min + 1)) + min; // get a random char code between min and max\n    str += String.fromCharCode(c); // convert it back into a character and append it to the string str\n  }\n  return str; // return str\n}\nfunction randomNumber(begin, end) {\n  const dif = end - begin;\n  return Math.floor(Math.random() * dif) + begin;\n}\nfunction randomLetter(size = 1, onlyCapitals = false) {\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  if (!onlyCapitals) {\n    possible += 'abcdefghijklmnopqrstuvwxyz';\n  }\n  let text = '';\n  for (let i = 0; i < size; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nfunction randomLetterOrNumber(size = 1, onlyCapitals = false) {\n  var text = \"\";\n  let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  if (onlyCapitals == false) {\n    possible += \"abcdefghijklmnopqrstuvwxyz0123456789\";\n  }\n  possible = possible.split('');\n  for (let i = 0; i < size; i++) {\n    const pos = Math.floor(Math.random() * possible.length);\n    text += possible[pos];\n  }\n  return text;\n}\nconst randomStateAcronym = () => {\n  const total = STATE_ACRONYMS.length;\n  return STATE_ACRONYMS[Math.floor(Math.random() * total)];\n};\nconst CORES = [\"AMARELO\", \"AZUL\", \"BEGE\", \"BRANCA\", \"CINZA\", \"DOURADA\", \"GRENA\", \"LARANJA\", \"MARROM\", \"PRATA\", \"PRETA\", \"ROSA\", \"ROXA\", \"VERDE\", \"VERMELHA\", \"FANTASIA\"];\nfunction getSpecialProperty(model, key) {\n  return model[key];\n}\n/**\n * Exportação de todas as funções como utilitário\n */\nconst utilsBr = {\n  isPresent,\n  isArray: isArray$1,\n  isString: isString$1,\n  isNumber: isNumber$1,\n  isNil: isNil$1,\n  processCaretTraps: processCaretTraps$1,\n  allNumbersAreSame: allNumbersAreSame$1,\n  fillString,\n  getAllDigits,\n  getAllWords,\n  getSpecialProperty,\n  currencyToNumber,\n  makeGenericFaker,\n  numberToCurrency,\n  slugify,\n  randomNumber,\n  randomLetter,\n  modulo11,\n  modulo11Custom,\n  randomLetterOrNumber,\n  randomEstadoSigla: randomStateAcronym,\n  randArray,\n  rand\n};\nconst generateInscricaoEstadual = {\n  ac: function (valor) {\n    if (tamanhoNaoE(valor, 13)) {\n      return false;\n    }\n    if (naoComecaCom(valor, '01')) {\n      return false;\n    }\n    const base = primeiros(valor, 11);\n    const primeiroDigito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base));\n    const segundoDigito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base + primeiroDigito));\n    return base + primeiroDigito + segundoDigito;\n  },\n  am: function (valor) {\n    if (tamanhoNaoE(valor)) {\n      return false;\n    }\n    return calculoTrivialGenerate(valor);\n  },\n  al: function (valor) {\n    if (tamanhoNaoE(valor)) {\n      return false;\n    }\n    if (naoComecaCom(valor, '24')) {\n      return false;\n    }\n    // FORMAÇÃO: 24XNNNNND,  sendo:\n    // 24 – Código do Estado\n    // X – Tipo de empresa (0-Normal, 3-Produtor Rural, 5-Substituta, 7- Micro-Empresa Ambulante, 8-Micro-Empresa)\n    // NNNNN – Número da empresa\n    // D – Dígito de verificação calculado pelo Módulo11, pêsos 2 à 9 da direita para a esquerda, exceto D\n    // Exemplo: Número 2 4 0 0 0 0 0 4 D\n    //                 2 4 X N N N N N D\n    // Fonte: http://www.sintegra.gov.br/Cad_Estados/cad_AL.html\n    const base = primeiros(valor);\n    // Pesos 9 8 7 6 5 4 3 2\n    // SOMA = (2 * 4) + (3 * 0) + (4 * 0) + (5 * 0) + (6 * 0) + (7 * 0) + (8 * 4) + (9 * 2) = 58\n    const soma = base.split('').reduce((acc, v, i) => {\n      return acc + (9 - i) * Number(v);\n    }, 0);\n    // PRODUTO = 58 * 10 = 580\n    const produto = soma * 10;\n    // RESTO = 580 – INTEIRO(580 / 11)*11 = 580 – (52*11) = 8\n    const resto = produto - Math.floor(produto / 11) * 11;\n    // DÍGITO = 8 - Caso RESTO seja igual a 10 o DÍGITO será 0 (zero)\n    const digito = resto === 10 ? 0 : resto;\n    return base + digito;\n  },\n  ap: function (valor) {\n    if (tamanhoNaoE(valor)) {\n      return false;\n    }\n    if (naoComecaCom(valor, '03')) {\n      return false;\n    }\n    const base = primeiros(valor);\n    let p, d;\n    if (entre(base, 3000001, 3017000)) {\n      p = 5;\n      d = 0;\n    } else if (entre(base, 3017001, 3019022)) {\n      p = 9;\n      d = 1;\n    } else {\n      p = 0;\n      d = 0;\n    }\n    const resto = mod(p + base, [2, 3, 4, 5, 6, 7, 8, 9, 1]);\n    let digito;\n    if (resto === 1) {\n      digito = 0;\n    } else if (resto === 0) {\n      digito = d;\n    } else {\n      digito = 11 - resto;\n    }\n    return base + digito;\n  },\n  ba: function (valor) {\n    if (tamanhoNaoE(valor, 8) && tamanhoNaoE(valor)) {\n      return false;\n    }\n    const base = primeiros(valor, valor.length - 2);\n    let primeiroDigito, segundoDigito;\n    const segundoMultiplicador = serie(2, 7);\n    const primeiroMultiplicador = serie(2, 8);\n    let primeiroResto, segundoResto;\n    let digitoComparacao = valor.substring(0, 1);\n    if (tamanhoE(valor, 9)) {\n      segundoMultiplicador.push(8);\n      primeiroMultiplicador.push(9);\n      digitoComparacao = valor.substring(1, 2);\n    }\n    if ('0123458'.split('').indexOf(digitoComparacao) !== -1) {\n      segundoResto = mod(base, segundoMultiplicador, 10);\n      segundoDigito = segundoResto === 0 ? 0 : 10 - segundoResto;\n      primeiroResto = mod(base + segundoDigito, primeiroMultiplicador, 10);\n      primeiroDigito = primeiroResto === 0 ? 0 : 10 - primeiroResto;\n    } else {\n      segundoResto = mod(base, segundoMultiplicador);\n      segundoDigito = substracaoPor11SeMaiorQue2CasoContrario0(segundoResto);\n      primeiroResto = mod(base + segundoDigito, primeiroMultiplicador);\n      primeiroDigito = substracaoPor11SeMaiorQue2CasoContrario0(primeiroResto);\n    }\n    return base + primeiroDigito + segundoDigito;\n  },\n  ce: function (valor) {\n    if (tamanhoNaoE(valor)) {\n      return false;\n    }\n    return calculoTrivialGenerate(valor);\n  },\n  df: function (valor) {\n    if (tamanhoNaoE(valor, 13)) {\n      return false;\n    }\n    if (naoComecaCom(valor, '07') && naoComecaCom(valor, '08')) {\n      return false;\n    }\n    const base = primeiros(valor, 11);\n    const primeiro = substracaoPor11SeMaiorQue2CasoContrario0(mod(base));\n    const segundo = substracaoPor11SeMaiorQue2CasoContrario0(mod(base + primeiro));\n    return base + primeiro + segundo;\n  },\n  es: function (valor) {\n    return calculoTrivialGenerate(valor);\n  },\n  go: function (valor) {\n    if (tamanhoNaoE(valor)) {\n      return false;\n    }\n    // Verifica os digitos iniciais do estado\n    // Fonte: https://appasp.economia.go.gov.br/Legislacao/arquivos/Secretario/IN/IN_1535_2022.htm\n    if (['10', '11', '15', '20'].indexOf(valor.substring(0, 2)) === -1) {\n      return false;\n    }\n    const base = primeiros(valor);\n    if (base === '11094402') {\n      return valor.substr(8) === '1' || valor.substr(8) === '0';\n    }\n    const resto = mod(base);\n    let digito;\n    if (resto === 0) {\n      digito = 0;\n    } else if (resto === 1) {\n      if (entre(base, 10103105, 10119997)) {\n        digito = 1;\n      } else {\n        digito = 0;\n      }\n    } else {\n      digito = 11 - resto;\n    }\n    return base + digito;\n  },\n  ma: function (valor) {\n    if (tamanhoNaoE(valor)) {\n      return false;\n    }\n    if (naoComecaCom(valor, '12')) {\n      return false;\n    }\n    return calculoTrivialGenerate(valor);\n  },\n  mg: function (valor) {\n    if (tamanhoNaoE(valor, 13)) {\n      return false;\n    }\n    const base = primeiros(valor, 11);\n    const baseComZero = valor.substring(0, 3) + '0' + valor.substring(3, 11);\n    let i = 0;\n    const produtorioLiteral = baseComZero.split('').reduceRight(function (anterior, atual) {\n      if (i > [2, 1].length - 1) {\n        i = 0;\n      }\n      return ([2, 1][i++] * parseInt(atual, 10)).toString() + anterior.toString();\n    }, '').split('').reduce(function (anterior, atual) {\n      return anterior + parseInt(atual, 10);\n    }, 0);\n    let primeiro = (Math.floor(produtorioLiteral / 10) + 1) * 10 - produtorioLiteral;\n    if (primeiro === 10) {\n      primeiro = 0;\n    }\n    const segundo = substracaoPor11SeMaiorQue2CasoContrario0(mod(base + primeiro, serie(2, 11)));\n    return base + primeiro + segundo;\n  },\n  ms: function (valor) {\n    if (naoComecaCom(valor, '28')) {\n      return false;\n    }\n    return calculoTrivialGenerate(valor);\n  },\n  mt: function (valor) {\n    if (tamanhoNaoE(valor, 11) && tamanhoNaoE(valor)) {\n      return false;\n    }\n    const base = tamanhoE(valor, 11) ? valor.substring(0, 10) : primeiros(valor);\n    return calculoTrivialGenerate(valor, base, true);\n  },\n  pa: function (valor) {\n    if (tamanhoNaoE(valor)) {\n      return false;\n    }\n    if (naoComecaCom(valor, '15')) {\n      return false;\n    }\n    return calculoTrivialGenerate(valor);\n  },\n  pb: function (valor) {\n    if (tamanhoNaoE(valor)) {\n      return false;\n    }\n    return calculoTrivialGenerate(valor);\n  },\n  pe: function (valor) {\n    const base = valor.substring(0, valor.length - 2);\n    const restoPrimeiro = mod(base);\n    const primeiro = 11 - restoPrimeiro >= 10 ? 0 : 11 - restoPrimeiro;\n    const restoSegundo = mod(base + primeiro);\n    const segundo = 11 - restoSegundo >= 10 ? 0 : 11 - restoSegundo;\n    return base + primeiro + segundo;\n  },\n  pi: function (valor) {\n    return calculoTrivialGenerate(valor);\n  },\n  pr: function (valor) {\n    if (tamanhoNaoE(valor, 10)) {\n      return false;\n    }\n    const base = primeiros(valor);\n    const restoPrimeiro = mod(base, serie(2, 7));\n    const primeiro = 11 - restoPrimeiro >= 10 ? 0 : 11 - restoPrimeiro;\n    const restoSegundo = mod(base + primeiro, serie(2, 7));\n    const segundo = 11 - restoSegundo >= 10 ? 0 : 11 - restoSegundo;\n    return base + primeiro + segundo;\n  },\n  rj: function (valor) {\n    if (tamanhoNaoE(valor, 8)) {\n      return false;\n    }\n    const base = primeiros(valor, 7);\n    const digito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base, serie(2, 7)));\n    return base + digito;\n  },\n  rn: function (valor) {\n    if (tamanhoNaoE(valor) && tamanhoNaoE(valor, 10)) {\n      return false;\n    }\n    if (naoComecaCom(valor, '20')) {\n      return false;\n    }\n    const base = valor.substring(0, valor.length - 1);\n    const multiplicadores = serie(2, 9);\n    if (tamanhoE(valor, 10)) {\n      multiplicadores.push(10);\n    }\n    const resto = mod(base, multiplicadores) * 10 % 11;\n    const digito = resto === 10 ? 0 : resto;\n    return base + digito;\n  },\n  ro: function (valor) {\n    let base, digito, resultadoMod;\n    if (tamanhoE(valor, 9)) {\n      base = valor.substring(3, 8);\n      digito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base));\n      return valor === valor.substring(0, 3) + base + digito;\n    } else if (tamanhoE(valor, 14)) {\n      base = primeiros(valor, 13);\n      resultadoMod = mod(base);\n      digito = resultadoMod <= 1 ? 1 : 11 - resultadoMod;\n      return base + digito;\n    } else {\n      return false;\n    }\n  },\n  rr: function (valor) {\n    if (tamanhoNaoE(valor)) {\n      return false;\n    }\n    if (naoComecaCom(valor, '24')) {\n      return false;\n    }\n    const base = primeiros(valor);\n    const digito = mod(base, [8, 7, 6, 5, 4, 3, 2, 1], 9);\n    return base + digito;\n  },\n  rs: function (valor) {\n    if (tamanhoNaoE(valor, 10)) {\n      return false;\n    }\n    const base = primeiros(valor, 9);\n    return calculoTrivialGenerate(valor, base, true);\n  },\n  sc: function (valor) {\n    return calculoTrivialGenerate(valor);\n  },\n  se: function (valor) {\n    if (tamanhoNaoE(valor)) {\n      return false;\n    }\n    return calculoTrivialGenerate(valor);\n  },\n  sp: function (valor) {\n    valor = valor.toUpperCase();\n    let segundaBase;\n    if (valor.substr(0, 1) === 'P') {\n      if (tamanhoNaoE(valor, 13)) {\n        return false;\n      }\n      const base = valor.substring(1, 9);\n      segundaBase = valor.substring(10, 13);\n      const resto = mod(base, [10, 8, 7, 6, 5, 4, 3, 1]).toString();\n      const digito = resto.length > 1 ? resto[1] : resto[0];\n      return 'P' + base + digito + segundaBase;\n    } else {\n      if (tamanhoNaoE(valor, 12)) {\n        return false;\n      }\n      const primeiraBase = primeiros(valor);\n      segundaBase = valor.substring(9, 11);\n      const primeiroResto = mod(primeiraBase, [10, 8, 7, 6, 5, 4, 3, 1]).toString();\n      const primeiro = primeiroResto.length > 1 ? primeiroResto[1] : primeiroResto[0];\n      const segundoResto = mod(primeiraBase + primeiro + segundaBase, serie(2, 10)).toString();\n      const segundo = segundoResto.length > 1 ? segundoResto[1] : segundoResto[0];\n      return primeiraBase + primeiro + segundaBase + segundo;\n    }\n  },\n  to: function (valor) {\n    if (tamanhoNaoE(valor) && tamanhoNaoE(valor, 11)) {\n      return false;\n    }\n    let base;\n    if (tamanhoE(valor, 11)) {\n      if (['01', '02', '03', '99'].indexOf(valor.substring(2, 4)) === -1) {\n        return false;\n      }\n      base = valor.substring(0, 2) + valor.substring(4, 10);\n    } else {\n      base = primeiros(valor);\n    }\n    const digito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base));\n    return valor.substring(0, valor.length - 1) + digito;\n  }\n};\nconst funcoes = {\n  ac: function (valor) {\n    return valor === generateInscricaoEstadual['ac'](valor);\n  },\n  am: function (valor) {\n    return valor === generateInscricaoEstadual['am'](valor);\n  },\n  al: function (valor) {\n    return valor === generateInscricaoEstadual['al'](valor);\n  },\n  ap: function (valor) {\n    return valor === generateInscricaoEstadual['ap'](valor);\n  },\n  ba: function (valor) {\n    return valor === generateInscricaoEstadual['ba'](valor);\n  },\n  ce: function (valor) {\n    return valor === generateInscricaoEstadual['ce'](valor);\n  },\n  df: function (valor) {\n    return valor === generateInscricaoEstadual['df'](valor);\n  },\n  es: function (valor) {\n    return valor === generateInscricaoEstadual['es'](valor);\n  },\n  go: function (valor) {\n    return valor === generateInscricaoEstadual['go'](valor);\n  },\n  ma: function (valor) {\n    return valor === generateInscricaoEstadual['ma'](valor);\n  },\n  mg: function (valor) {\n    return valor === generateInscricaoEstadual['mg'](valor);\n  },\n  ms: function (valor) {\n    return valor === generateInscricaoEstadual['ms'](valor);\n  },\n  mt: function (valor) {\n    return valor === generateInscricaoEstadual['mt'](valor);\n  },\n  pa: function (valor) {\n    return valor === generateInscricaoEstadual['pa'](valor);\n  },\n  pb: function (valor) {\n    return valor === generateInscricaoEstadual['pb'](valor);\n  },\n  pe: function (valor) {\n    return valor === generateInscricaoEstadual['pe'](valor);\n  },\n  pi: function (valor) {\n    return valor === generateInscricaoEstadual['pi'](valor);\n  },\n  pr: function (valor) {\n    return valor === generateInscricaoEstadual['pr'](valor);\n  },\n  rj: function (valor) {\n    return valor === generateInscricaoEstadual['rj'](valor);\n  },\n  rn: function (valor) {\n    return valor === generateInscricaoEstadual['rn'](valor);\n  },\n  ro: function (valor) {\n    return valor === generateInscricaoEstadual['ro'](valor);\n  },\n  rr: function (valor) {\n    return valor === generateInscricaoEstadual['rr'](valor);\n  },\n  rs: function (valor) {\n    return valor === generateInscricaoEstadual['rs'](valor);\n  },\n  sc: function (valor) {\n    return valor === generateInscricaoEstadual['sc'](valor);\n  },\n  se: function (valor) {\n    return valor === generateInscricaoEstadual['se'](valor);\n  },\n  sp: function (valor) {\n    return valor === generateInscricaoEstadual['sp'](valor);\n  },\n  to: function (valor) {\n    return valor === generateInscricaoEstadual['to'](valor);\n  }\n};\nfunction validateInscricaoEstadual(ie, estado) {\n  if (eIndefinido(estado) || estado === null) {\n    estado = '';\n  }\n  estado = estado.toLowerCase();\n  if (estado !== '' && !(estado in funcoes)) {\n    return new Error('estado não é válido');\n  }\n  if (eIndefinido(ie)) {\n    return new Error('ie deve ser fornecida');\n  }\n  if (Array.isArray(ie)) {\n    let retorno = true;\n    ie.forEach(function (i) {\n      if (!validateInscricaoEstadual(i, estado)) {\n        retorno = false;\n      }\n    });\n    return retorno;\n  }\n  if (typeof ie !== 'string') {\n    return new Error('ie deve ser string ou array de strings');\n  }\n  if (!allNumbersAreSame(ie)) {\n    return new Error('ie com todos dígitos iguais');\n  }\n  if (ie.match(/^ISENTO$/i)) {\n    return true;\n  }\n  ie = ie.replace(/[\\.|\\-|\\/|\\s]/g, '');\n  if (estado === '') {\n    if (lookup(ie)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  if (/^\\d+$/.test(ie) || estado === 'sp' || funcoes[estado]) {\n    return funcoes[estado](ie);\n  }\n  return false;\n}\nconst MASKSIE = {\n  AC: {\n    text: '01.004.823/001-12',\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n  },\n  AL: {\n    text: '240000048',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  AM: {\n    text: '04.145.871-0',\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/]\n  },\n  AP: {\n    text: '240000048',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  BA: {\n    text: '1234567-48',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/],\n    textMaskFunction: function mask(userInput) {\n      const numberLength = getSizeNumbers(userInput);\n      if (!userInput || numberLength > 8) {\n        return [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\n      } else {\n        return [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\n      }\n    }\n  },\n  CE: {\n    text: '06.000001-5',\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\n  },\n  DF: {\n    text: '06 000001 123-55',\n    textMask: [/\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n  },\n  ES: {\n    text: '082.560.67-6',\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, '-', /\\d/]\n  },\n  GO: {\n    text: '06.000.001-5',\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/]\n  },\n  MA: {\n    text: '12.104.376-2',\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n  },\n  MG: {\n    text: '001.819.263/0048',\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  MS: {\n    text: '001819263',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  MT: {\n    text: '0018192630-1',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\n  },\n  PA: {\n    text: '06-000001-5',\n    textMask: [/\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\n  },\n  PB: {\n    text: '06000001-5',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\n  },\n  PE: {\n    text: '0192310-24',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n  },\n  PI: {\n    text: '19.301.656-7',\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/]\n  },\n  PR: {\n    text: '19301656-78',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n  },\n  RJ: {\n    text: '20.040.04-1',\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, '-', /\\d/]\n  },\n  RN: {\n    text: '20.040.040-1',\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/],\n    textMaskFunction: function mask(userInput) {\n      const numberLength = getSizeNumbers(userInput);\n      if (!userInput || numberLength > 9) {\n        return [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\n      } else {\n        return [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/];\n      }\n    }\n  },\n  RO: {\n    text: '101.62521-3',\n    textMask: [/\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  RR: {\n    text: '24006628-1',\n    textMask: [/\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  RS: {\n    text: '024/0440013',\n    textMask: [/\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  SC: {\n    text: '271.234.563',\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/]\n  },\n  SE: {\n    text: '27123456-3',\n    textMask: [/\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  SP: {\n    text: '114.814.878.119',\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/]\n  },\n  TO: {\n    text: '11 81 4878119',\n    textMask: [/\\d/, /\\d/, ' ', /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  }\n};\nfunction getSizeNumbers(userInput) {\n  const numbers = userInput.match(/\\d/g);\n  let numberLength = 0;\n  if (numbers) {\n    numberLength = numbers.join('').length;\n  }\n  return numberLength;\n}\nfunction eIndefinido(objeto) {\n  return typeof objeto === typeof undefined;\n}\nfunction tamanhoE(string, tamanho) {\n  return !tamanhoNaoE(string, tamanho);\n}\nfunction tamanhoNaoE(string, tamanho = 9) {\n  return string.length !== tamanho;\n}\nfunction primeiros(string, quantidade = 8) {\n  return string.substring(0, quantidade);\n}\nfunction substracaoPor11SeMaiorQue2CasoContrario0(valor) {\n  return valor < 2 ? 0 : 11 - valor;\n}\nfunction mod(valor, multiplicadores = serie(2, 9), divisor = 11) {\n  let i = 0;\n  return valor.split('').reduceRight(function (anterior, atual) {\n    if (i > multiplicadores.length - 1) {\n      i = 0;\n    }\n    return multiplicadores[i++] * parseInt(atual, 10) + anterior;\n  }, 0) % divisor;\n}\nfunction calculoTrivialGenerate(valor, base = null, validarTamanho = false) {\n  if (!validarTamanho && tamanhoNaoE(valor)) {\n    return false;\n  }\n  if (base === null) {\n    base = primeiros(valor);\n  }\n  const digito = substracaoPor11SeMaiorQue2CasoContrario0(mod(base));\n  return base + digito;\n}\nfunction naoComecaCom(string, valor) {\n  return string.substring(0, valor.length) !== valor;\n}\nfunction entre(valor, limiteInferior, limiteSuperior) {\n  if (typeof valor === 'string') {\n    valor = parseInt(valor, 10);\n  }\n  return valor >= limiteInferior && valor <= limiteSuperior;\n}\nfunction lookup(ie) {\n  const resultado = [];\n  for (const estado in funcoes) {\n    if (funcoes[estado](ie)) {\n      resultado.push(estado);\n    }\n  }\n  return resultado.length === 0 ? false : resultado;\n}\nfunction allNumbersAreSame(input) {\n  const inputDigits = input.match(/\\d/g);\n  return inputDigits ? new Set(inputDigits).size === 1 : false;\n}\nfunction serie(de, ate) {\n  const resultado = [];\n  while (de <= ate) {\n    resultado.push(de++);\n  }\n  return resultado;\n}\n\n// Função para criar AIH\nfunction createAih(value) {\n  value = getAllDigits(value.toString());\n  if (value.length > 12) {\n    value = value.toString().substr(0, value.length - 1);\n  }\n  const cod = parseInt(value);\n  const calc = Math.ceil(cod - cod / 11);\n  const digito = calc.toString().substr(-1);\n  return digito;\n}\n// Função para criar certidão\nfunction createCertidao(value) {\n  if (value.length > 30) {\n    value = value.substring(0, value.length - 2);\n  }\n  let certPriDig = calcularDigitoCertidao(value, 1);\n  let certSegDig = calcularDigitoCertidao(value, certPriDig);\n  let certDV = certPriDig * 10 + certSegDig;\n  if (certDV == 0) certDV = \"00\";\n  if (certDV > 0 && certDV < 10) certDV = \"0\" + certDV;\n  return certDV.toString();\n}\n// Função para criar CNH Espelho\nfunction createCnhEspelho(value) {\n  return modulo11Custom(value.substr(0, value.length - 1), 1, 8, false);\n}\n// Função para criar Renach Estadual\nfunction createRenachEstadual(value) {\n  const state = value.substr(0, 2).toLowerCase();\n  if (!STATE_ACRONYMS.includes(state)) {\n    return '';\n  }\n  let digits = value.substr(2).replace(/[^\\d]/g, '');\n  if (digits.length !== 9) {\n    return '';\n  }\n  return '' + modulo11Custom(digits.substr(0, digits.length - 1), 1, 11);\n}\n// Função para criar Renach Segurança\nfunction createRenachSeguranca(value) {\n  value = value.replace(/[^\\d]+/g, '');\n  if (value.length !== 11) {\n    return '';\n  }\n  return \"\" + modulo11Custom(value.substr(0, value.length - 1), 1, 11);\n}\n// Função para criar CNH\nfunction createCnh(value) {\n  value = value.replace(/[^\\d]+/g, '');\n  if (value.length != 11 || value === '0') {\n    return '';\n  }\n  return value.substr(-2);\n}\nfunction createCnpj(cnpj) {\n  const cnpjWithoutDigits = cnpj.replace(/[^\\d]+/g, '').substring(0, 12);\n  const firstDigit = calcularDigitoVerificadorCnpj(cnpjWithoutDigits, 12);\n  const secondDigit = calcularDigitoVerificadorCnpj(`${cnpjWithoutDigits}${firstDigit}`, 13);\n  return [firstDigit, secondDigit];\n}\n// Função para criar CNS\nfunction createCns(number) {\n  number = getAllDigits(number);\n  let somaInicial = calcularSomaCns(number);\n  let soma = somaInicial;\n  let rest = 0;\n  while (soma % 11 !== 0) {\n    rest++;\n    soma = somaInicial + rest * 1;\n  }\n  return number.substr(-2, 1) + rest;\n}\n// Função para criar CPF\nfunction createCpf(strCPF) {\n  strCPF = strCPF.replace(/[^\\d]+/g, '');\n  if (strCPF === '00000000000') {\n    return '';\n  }\n  return modulo11Custom(strCPF.substr(0, strCPF.length - 2), 2, 12);\n}\n// Função para criar Cartão de Crédito\nfunction createCartaoCredito(number) {\n  number = \"00000000000000000\" + number;\n  number = number.slice(number.length - 18);\n  const creditDig = calcularDigitoCartaoCredito(number);\n  return 10 - creditDig;\n}\n// Função para criar ECT\nfunction createEct(number) {\n  number = getAllDigits(number).padStart(8, '0');\n  const digito = calcularDigitoEct(number);\n  return digito;\n}\n// Função para criar PIS/PASEP\nfunction createPispasep(number) {\n  const nis = fillString(getAllDigits(number), 11, '0');\n  const digit = calcularDigitoPispasep(nis);\n  return digit;\n}\n// Função para criar RENAVAM\nfunction createRenavam(renavam) {\n  renavam = renavam.padStart(11, '0');\n  const digito = calcularDigitoRenavam(renavam);\n  return digito;\n}\n// Função para criar Processo\nfunction createProcesso(number) {\n  number = getAllDigits(number).padStart(18, '0');\n  return calcularProcesso(number);\n}\n// Função para criar Título Atual\nfunction createTituloAtual(titulo) {\n  const tam = titulo.length;\n  const estado = titulo.substr(tam - 4, 2);\n  titulo = titulo.substr(0, tam - 2).padStart(11, '0');\n  const digitos = calcularDigitosTitulo(titulo, estado);\n  return digitos.join('');\n}\n// Função para criar Título\nfunction createTitulo(titNum) {\n  titNum = getAllDigits(titNum).padStart(11, '0');\n  const digitos = calcularDigitosTituloCompleto(titNum);\n  return digitos.join('');\n}\n// Funções utilitárias adicionais\nfunction calcularDigitoCertidao(value, fator) {\n  let result = 0;\n  const weights = [9, 8, 7, 6, 5, 4, 3, 2];\n  for (let i = 0; i < value.length; i++) {\n    result += parseInt(value[i], 10) * weights[i % weights.length];\n  }\n  return result * fator % 11;\n}\nfunction validarDigitosCnpj(cnpj) {\n  // Remove caracteres não numéricos\n  cnpj = cnpj.replace(/[^\\d]+/g, '');\n  // O CNPJ precisa ter exatamente 14 dígitos\n  if (cnpj.length !== 14 || !isValidCnpj(cnpj)) {\n    return false;\n  }\n  // Cálculo do primeiro dígito verificador\n  const primeiroDigitoCalculado = calcularDigitoVerificadorCnpj(cnpj, 12);\n  if (primeiroDigitoCalculado !== parseInt(cnpj.charAt(12), 10)) {\n    return false;\n  }\n  // Cálculo do segundo dígito verificador\n  const segundoDigitoCalculado = calcularDigitoVerificadorCnpj(cnpj, 13);\n  if (segundoDigitoCalculado !== parseInt(cnpj.charAt(13), 10)) {\n    return false;\n  }\n  return true;\n}\nfunction calcularDigitosCnpj(cnpj) {\n  const resultados = [];\n  let soma = 0;\n  let pos = cnpj.length - 7;\n  for (let i = 0; i < 12; i++) {\n    soma += parseInt(cnpj.charAt(i), 10) * pos--;\n    if (pos < 2) pos = 9;\n  }\n  resultados.push(soma % 11 < 2 ? 0 : 11 - soma % 11);\n  soma = 0;\n  pos = cnpj.length - 7;\n  for (let i = 0; i < 13; i++) {\n    soma += parseInt(cnpj.charAt(i), 10) * pos--;\n    if (pos < 2) pos = 9;\n  }\n  resultados.push(soma % 11 < 2 ? 0 : 11 - soma % 11);\n  return resultados;\n}\nfunction calcularDigitoVerificadorCnpj(cnpj, tamanho) {\n  let soma = 0;\n  let pos = tamanho - 7;\n  for (let i = 0; i < tamanho; i++) {\n    soma += parseInt(cnpj.charAt(i), 10) * pos--;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n  const resto = soma % 11;\n  return resto < 2 ? 0 : 11 - resto;\n}\nfunction calcularSomaCns(number) {\n  let soma = 0;\n  for (let i = 0; i < number.length; i++) {\n    soma += parseInt(number[i], 10) * (15 - i);\n  }\n  return soma;\n}\nfunction calcularDigitoCartaoCredito(number) {\n  let soma = 0;\n  for (let i = 0; i < number.length; i++) {\n    let dig = parseInt(number[i], 10);\n    if (i % 2 === 0) dig *= 2;\n    if (dig > 9) dig -= 9;\n    soma += dig;\n  }\n  return soma % 10;\n}\nfunction calcularDigitoEct(number) {\n  const weights = [7, 9, 5, 3, 2, 4, 6, 8];\n  let soma = 0;\n  for (let i = 0; i < number.length; i++) {\n    soma += parseInt(number[i], 10) * weights[i];\n  }\n  let result = 11 - soma % 11;\n  if (result === 11) result = 5;\n  if (result === 10) result = 0;\n  return result;\n}\nfunction calcularDigitoPispasep(nis) {\n  let soma = 0;\n  for (let i = 0; i < 10; i++) {\n    soma += parseInt(nis[i], 10) * (11 - i);\n  }\n  return 11 - soma % 11;\n}\nfunction calcularDigitoRenavam(renavam) {\n  let soma = 0;\n  const weights = [3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n  for (let i = 0; i < 10; i++) {\n    soma += parseInt(renavam[i], 10) * weights[i];\n  }\n  const resto = soma % 11;\n  return resto === 10 ? 0 : resto;\n}\nfunction calcularProcesso(number) {\n  let soma = 0;\n  const weights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  for (let i = 0; i < 11; i++) {\n    soma += parseInt(number[i], 10) * weights[i];\n  }\n  const resto1 = soma % 97;\n  soma = 0;\n  const weights2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  for (let i = 11; i < 18; i++) {\n    soma += parseInt(number[i], 10) * weights2[i - 11];\n  }\n  const resto2 = (resto1 * 100 + soma * 100) % 97;\n  const dv = 98 - resto2;\n  return `${number.substr(0, 10)}-${dv}.${number.substr(10)}`;\n}\nfunction calcularDigitosTitulo(titulo, estado) {\n  const excecao = estado === '01' || estado === '02';\n  let dig1 = calcularDigitoTitulo(titulo, 2);\n  if (excecao && dig1 === 0) dig1 = 1;\n  let dig2 = calcularDigitoTitulo(titulo + dig1, 4);\n  if (excecao && dig2 === 0) dig2 = 1;\n  return [dig1, dig2];\n}\nfunction calcularDigitoTitulo(titulo, peso) {\n  let soma = 0;\n  const weights = [9, 8, 7, 6, 5, 4, 3, 2];\n  for (let i = 0; i < 8; i++) {\n    soma += parseInt(titulo[i], 10) * weights[i];\n  }\n  const resto = soma % 11;\n  return resto < 2 ? 0 : 11 - resto;\n}\nfunction calcularDigitosTituloCompleto(titNum) {\n  let titPriDig = calcularDigitoTitulo(titNum, 2);\n  let titSegDig = calcularDigitoTitulo(titNum + titPriDig, 4);\n  return [titPriDig, titSegDig];\n}\nfunction isValidCnpj(cnpj) {\n  const invalidCnpjs = ['00000000000000', '11111111111111', '22222222222222', '33333333333333', '44444444444444', '55555555555555', '66666666666666', '77777777777777', '88888888888888', '99999999999999'];\n  return !invalidCnpjs.includes(cnpj);\n}\n// Exporta todas as funções\nconst createBr = {\n  createAih,\n  createCertidao,\n  createCnhEspelho,\n  createRenachEstadual,\n  createRenachSeguranca,\n  createCnh,\n  createCnpj,\n  createCns,\n  createCpf,\n  createCartaoCredito,\n  createEct,\n  createPispasep,\n  createRenavam,\n  createProcesso,\n  createTituloAtual,\n  createTitulo\n};\nconst createIptu = (number, estado, cidade) => {\n  if (!iptuCreate[estado] || !iptuCreate[estado][cidade]) {\n    return true;\n  }\n  number = getAllDigits(number);\n  return iptuCreate[estado][cidade](number);\n};\nconst maskIptu = (number, estado, cidade) => {\n  if (!iptuMasks[estado] || !iptuMasks[estado][cidade]) {\n    return number;\n  }\n  return iptuMasks[estado][cidade];\n};\nconst validateIptu = (number, estado, cidade) => {\n  if (!iptuValidate[estado] || !iptuValidate[estado][cidade]) {\n    return true;\n  }\n  number = getAllDigits(number);\n  return iptuValidate[estado][cidade](number);\n};\nfunction createIptuCtba(number) {\n  number = getAllDigits(number);\n  let a1 = parseInt(number.slice(10));\n  let a2 = parseInt(number.slice(9, 10));\n  let a3 = parseInt(number.slice(8, 9));\n  let a4 = parseInt(number.slice(7, 8));\n  let a5 = parseInt(number.slice(6, 7));\n  let a6 = parseInt(number.slice(5, 6));\n  let a7 = parseInt(number.slice(4, 5));\n  let a8 = parseInt(number.slice(3, 4));\n  let a9 = parseInt(number.slice(2, 3));\n  let a10 = parseInt(number.slice(1, 2));\n  let a11 = parseInt(number.slice(0, 1));\n  let iptuCtbaDV = 10 - (a1 * 2 + a2 * 3 + a3 * 4 + a4 * 7 + a5 * 8 + a6 * 9 + a7 * 2 + a8 * 3 + a9 * 4 + a10 * 7 + a11 * 8) % 10;\n  if (iptuCtbaDV === 10) {\n    iptuCtbaDV = 0;\n  }\n  return iptuCtbaDV;\n}\nfunction createIptuSp(number) {\n  let a1 = parseInt(number.slice(9));\n  let a2 = parseInt(number.slice(8, 9));\n  let a3 = parseInt(number.slice(7, 8));\n  let a4 = parseInt(number.slice(6, 7));\n  let a5 = parseInt(number.slice(5, 6));\n  let a6 = parseInt(number.slice(4, 5));\n  let a7 = parseInt(number.slice(3, 4));\n  let a8 = parseInt(number.slice(2, 3));\n  let a9 = parseInt(number.slice(1, 2));\n  let a10 = parseInt(number.slice(0, 1));\n  let iptuSpDV = (a1 * 9 + a2 * 8 + a3 * 7 + a4 * 6 + a5 * 5 + a6 * 4 + a7 * 3 + a8 * 2 + a9 + a10 * 10) % 11;\n  if (iptuSpDV === 10) {\n    iptuSpDV = 1;\n  }\n  return iptuSpDV;\n}\nconst fakerIptu = (estado, cidade) => {\n  if (!iptuMasks[estado] || !iptuMasks[estado][cidade]) {\n    return;\n  }\n  let iptu = makeGenericFaker(iptuMasks[estado][cidade])();\n  if (iptuCreate[estado] && iptuCreate[estado][cidade]) {\n    const dv = iptuCreate[estado][cidade](iptu);\n    const values = iptu.split('');\n    values[values.length - 1] = dv;\n    iptu = values.join('');\n  }\n  return iptu;\n};\nconst iptuCreate = {\n  'sao-paulo': {\n    'sao-paulo': createIptuSp\n  },\n  'parana': {\n    'curitiba': createIptuCtba\n  }\n};\nconst iptuMasks = {\n  'minas-gerais': {\n    'belo-horizonte': {\n      text: '000.000.000.000.0',\n      textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/]\n    },\n    'contagem': {\n      text: '20.040.040-1',\n      textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/],\n      textMaskFunction: function mask(userInput) {\n        const numbers = userInput.match(/\\d/g);\n        let numberLength = 0;\n        if (numbers) {\n          numberLength = numbers.join('').length;\n        }\n        if (!userInput || numberLength > 9) {\n          return [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/];\n        } else {\n          return [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/];\n        }\n      }\n    }\n  },\n  'sao-paulo': {\n    'sao-paulo': {\n      text: '00000000000-0',\n      textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\n    }\n  },\n  'parana': {\n    'curitiba': {\n      text: '00000000000-0',\n      textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\n    }\n  }\n};\nconst validateRemoveDigit = (number, max) => {\n  number = getAllDigits(number);\n  if (number.length > max) {\n    return false;\n  } else if (number.length === max) {\n    number = number.slice(0, -1);\n  }\n  return number;\n};\nfunction validateIptuCtba(value) {\n  let number = validateRemoveDigit(value, 12);\n  if (!number) {\n    return false;\n  }\n  const dv = iptuCreate['parana']['curitiba'](number);\n  return parseInt(value[value.length - 1]) === dv;\n}\nfunction validateIptuContagem(number) {\n  const result = validateRemoveDigit(number, 12);\n  return result;\n}\nfunction validateIptuSp(value) {\n  let number = validateRemoveDigit(value, 12);\n  if (!number) {\n    return false;\n  }\n  const dv = iptuCreate['sao-paulo']['sao-paulo'](number);\n  return parseInt(value[value.length - 1]) === dv;\n}\nconst iptuValidate = {\n  'sao-paulo': {\n    'sao-paulo': validateIptuSp\n  },\n  'minas-gerais': {\n    'contagem': validateIptuContagem\n  },\n  'parana': {\n    'curitiba': validateIptuCtba\n  }\n};\nfunction validateAih(aih) {\n  const aihClean = aih.replace(/[^\\d]+/g, '');\n  const dvOriginal = aihClean.substr(-1);\n  const dv = createAih(aihClean);\n  return dvOriginal === dv;\n}\nfunction validateCellphone(cel) {\n  let celClean = cel.replace(/[^\\d]+/g, '');\n  celClean = celClean.replace(/_/g, '');\n  if (celClean.length !== 11) {\n    return false;\n  }\n  if (celClean[0] == 0 || celClean[2] < 5) {\n    return false;\n  }\n  return true;\n}\nconst CEPRange = {\n  'SP': /^([1][0-9]{3}|[01][0-9]{4})[0-9]{3}$/g,\n  'RJ': /^[2][0-8][0-9]{3}[0-9]{3}$/g,\n  'MS': /^[7][9][0-9]{3}[0-9]{3}$/g,\n  'MG': /^[3][0-9]{4}[0-9]{3}$/g\n  // Outros estados...\n};\nfunction validateCep(cep) {\n  const cepClean = cep.replace(/[^\\d]+/g, '');\n  const exp = /\\d{2}\\.\\d{3}\\-\\d{3}/;\n  if (!exp.test(cep) && cepClean.length !== 8) {\n    return false;\n  }\n  return true;\n}\nfunction cepRanges(cep) {\n  cep = cep.toString().replace(/[^\\d]+/g, '');\n  cep = parseInt(cep, 10);\n  const cepString = cep.toString();\n  let found;\n  for (let estado in CEPRange) {\n    const v = CEPRange[estado];\n    const r = new RegExp(v).test(cepString);\n    if (r) {\n      found = r;\n      return true;\n    }\n  }\n  return !!found;\n}\nfunction validateCertidao(value) {\n  let certidao = getAllDigits(value);\n  const format = /[0-9]{32}/;\n  if (!format.test(certidao)) {\n    return false;\n  }\n  const dvOriginal = certidao.substr(-2);\n  const dv = createCertidao(certidao);\n  return dv === dvOriginal;\n}\nfunction validateChassi(chassi) {\n  const zeroNoPrimeiroDigito = /^0/;\n  if (zeroNoPrimeiroDigito.test(chassi)) {\n    return false;\n  }\n  chassi = getAllWords(chassi);\n  const repeticaoMaisDe6Vezes = /^.{4,}([0-9A-Z])\\1{5,}/;\n  if (repeticaoMaisDe6Vezes.test(chassi)) {\n    return false;\n  }\n  const caracteresiIoOqQ = /[iIoOqQ]/;\n  if (caracteresiIoOqQ.test(chassi)) {\n    return false;\n  }\n  const ultimos4Numericos = /[0-9]{4}$/;\n  if (!ultimos4Numericos.test(chassi)) {\n    return false;\n  }\n  if (chassi.length > 17) {\n    return false;\n  }\n  return true;\n}\nfunction validateCnae(number) {\n  return !!number;\n}\nfunction validateCnh(value) {\n  value = value.replace(/[^\\d]/g, '');\n  if (value.length !== 11) {\n    return false;\n  }\n  const check = createCnh(value);\n  return value.substr(-2) === check;\n}\nfunction validateCnhEspelho(value) {\n  value = value.replace(/[^\\d]/g, '');\n  if (value.length !== 10) {\n    return false;\n  }\n  let check = createCnhEspelho(value);\n  if (check === '0' || check === '1') check = '0';\n  return value.substr(-1) === check;\n}\nfunction validateRenachEstadual(value) {\n  const state = value.substr(0, 2).toLowerCase();\n  if (!STATE_ACRONYMS.includes(state)) {\n    return false;\n  }\n  let digits = value.substr(2);\n  digits = digits.replace(/[^\\d]/g, '');\n  if (digits.length !== 9) {\n    return false;\n  }\n  let check = createRenachEstadual(value);\n  if (check === '0' || check === '1') check = '0';\n  return value.substr(-1) === check;\n}\nfunction validateRenachSeguranca(value) {\n  value = value.replace(/[^\\d]/g, '');\n  if (value.length !== 11) {\n    return false;\n  }\n  let check = createRenachSeguranca(value);\n  return value.substr(-1) === check;\n}\nfunction validateCnpj(cnpj) {\n  return validarDigitosCnpj(cnpj);\n}\nfunction validateCpf(strCpf) {\n  strCpf = strCpf.replace(/[^\\d]+/g, '');\n  if (strCpf.length !== 11) {\n    return false;\n  }\n  const expIguais = /^(?!.*(\\d)\\1{10}).*$/;\n  if (!strCpf.match(expIguais)) {\n    return false;\n  }\n  const restos = createCpf(strCpf);\n  return restos === strCpf.substr(-2);\n}\nfunction validateCpfCnpj(number) {\n  return validateCpf(number) || validateCnpj(number);\n}\nfunction validateCvv(value, maxLength = 3) {\n  maxLength = maxLength instanceof Array ? maxLength : [maxLength];\n  if (typeof value !== 'string') {\n    return {\n      isValid: false,\n      isPotentiallyValid: false\n    };\n  }\n  if (!/^\\d*$/.test(value)) {\n    return {\n      isValid: false,\n      isPotentiallyValid: false\n    };\n  }\n  var i = 0;\n  const max = value.length;\n  for (; i < maxLength.length; i++) {\n    if (max === maxLength[i]) {\n      return {\n        isValid: true,\n        isPotentiallyValid: true\n      };\n    }\n  }\n  if (value.length < Math.min.apply(null, maxLength)) {\n    return {\n      isValid: false,\n      isPotentiallyValid: true\n    };\n  }\n  var maximum = maxLength;\n  var i = 0;\n  for (; i < maxLength.length; i++) {\n    maximum = maxLength[i] > maximum ? maxLength[i] : maximum;\n  }\n  if (value.length > maximum) {\n    return {\n      isValid: false,\n      isPotentiallyValid: false\n    };\n  }\n  return {\n    isValid: true,\n    isPotentiallyValid: true\n  };\n}\nfunction validateCartaoCredito(input) {\n  let value;\n  if (typeof input == 'string') {\n    value = getAllDigits(input);\n  } else {\n    value = input.toString();\n  }\n  const number = value.slice(0, 16);\n  const mes = parseInt(value.slice(16, 18));\n  const ano = parseInt(value.slice(18, 20));\n  const cvv = value.slice(20, 23);\n  const d = new Date();\n  const anoAtual = d.getFullYear() - 2000;\n  if (ano && ano < anoAtual) {\n    return false;\n  }\n  if (mes && mes < d.getMonth() + 1 && ano === anoAtual) {\n    return false;\n  }\n  if (cvv) {\n    const validcvv = validateCvv(cvv);\n    if (validcvv.isValid === false) {\n      return false;\n    }\n  }\n  let found;\n  Object.keys(creditCardValidator).forEach(key => {\n    if (creditCardValidator[key].test(number)) {\n      found = key;\n    }\n  });\n  return !!found;\n}\n/**\n *     A hash of valid CC abbreviations and regular expressions\n    mc: Mastercard\n    ec: Eurocard\n    vi: Visa\n    ax: American Express\n    dc: Diners Club\n    bl: Carte Blanch\n    di: Discover\n    jcb: JCB\n    er: Enroute\n*/\nconst creditCardValidator = {\n  'mc': /5[1-5][0-9]{14}/,\n  'ec': /5[1-5][0-9]{14}/,\n  'vi': /4(?:[0-9]{12}|[0-9]{15})/,\n  'ax': /3[47][0-9]{13}/,\n  'dc': /3(?:0[0-5][0-9]{11}|[68][0-9]{12})/,\n  'bl': /3(?:0[0-5][0-9]{11}|[68][0-9]{12})/,\n  'di': /6011[0-9]{12}/,\n  'jcb': /(?:3[0-9]{15}|(2131|1800)[0-9]{11})/,\n  'er': /2(?:014|149)[0-9]{11}/\n};\nfunction validateCns(value) {\n  const cns = getAllDigits(value);\n  const definitivo = /[1-2][0-9]{10}00[0-1][0-9]/;\n  const provisorio = /[7-9][0-9]{14}/;\n  if (!definitivo.test(cns) && !provisorio.test(cns)) {\n    return false;\n  }\n  let soma = 0;\n  for (let i = 0; i < cns.length; i++) {\n    soma += parseInt(cns[i]) * (15 - i);\n  }\n  return soma % 11 === 0;\n}\nfunction validateTitulo(titulo) {\n  if (!titulo) {\n    return false;\n  }\n  const tituloClean = titulo.replace(/\\./g, '');\n  const expClean = /\\d{4}\\d{4}\\d{4}/;\n  if (!expClean.test(tituloClean)) {\n    return false;\n  }\n  const tam = tituloClean.length;\n  const dig = createTituloAtual(tituloClean);\n  const digitos = tituloClean.substr(tam - 2, 2);\n  return digitos === dig;\n}\nfunction validateProcesso(processo) {\n  let processoClean = processo.replace(/\\./g, '').replace(/\\-/g, '');\n  const processoValidado = createProcesso(processo);\n  return parseInt(processoClean) === parseInt(getAllDigits(processoValidado));\n}\nfunction validateRenavam(renavam) {\n  let renavamClean = renavam.replace(/\\./g, '').replace(/\\-/g, '');\n  const dv = createRenavam(renavam);\n  const tam = renavam.length;\n  const digitos = renavam.substr(tam - 1, 1);\n  return digitos.charCodeAt(0) - 48 === dv;\n}\nfunction validateRg(rg) {\n  let rgClean = rg.replace(/\\./g, '').replace(/-/g, '');\n  const expClean = /[a-z]{2}\\d{8}/;\n  const state = rg.substr(0, 2).toUpperCase();\n  if (!expClean.test(rgClean) && !(state in CEPRange)) {\n    return false;\n  }\n  const validateState = RG[state];\n  return validateState ? validateState(rg) : true;\n}\nfunction validateSenha(value, options = {}) {\n  let finalregex = '^';\n  if (options.lowercase !== false) {\n    finalregex += '(?=.*[a-z])';\n  }\n  if (options.uppercase !== false) {\n    finalregex += '(?=.*[A-Z])';\n  }\n  if (options.numeric !== false) {\n    finalregex += '(?=.*[0-9])';\n  }\n  if (options.numeric !== false) {\n    finalregex += '(?=.*[!@#\\\\$%\\\\^&\\\\*])';\n  }\n  options.size = options.size || 8;\n  finalregex += `(?=.{${options.size},})`;\n  const regex = new RegExp(finalregex);\n  return regex.test(value);\n}\nfunction validateSite(value) {\n  const re = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&=]*)/g;\n  return re.test(String(value).toLowerCase());\n}\nfunction validateSped(sped) {\n  return !!sped;\n}\nfunction validatePhoneNumber(tel) {\n  const telClean = tel.replace(/[^\\d]+/g, '');\n  tel = tel.replace(/_/g, '');\n  if (!(telClean.length === 10 || telClean.length === 11)) {\n    return false;\n  }\n  if (telClean[0] == 0 || telClean[2] == 0) {\n    return false;\n  }\n  return true;\n}\nfunction validateTime(time, options = {}) {\n  const value = time.toString();\n  const expression = options.diario ? /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/ : /^([0-9]?[0-9]):([0-5][0-9])(:[0-5][0-9])?$/;\n  return expression.test(value);\n}\nfunction validateCurrency(currency) {\n  if (typeof currency === 'number') {\n    return true;\n  }\n  const regex = /^(R\\$|R\\$ )?(-)?(?!0(\\.)?00)\\d{1,3}((\\.)?\\d{3})*(,\\d\\d)?$/g;\n  return regex.test(currency);\n}\nfunction validateContaBanco(number) {\n  return !!number;\n}\nfunction validateData(value) {\n  if (!value) {\n    return false;\n  }\n  const values = value.split('/');\n  if (values.length !== 3) {\n    return false;\n  }\n  const testData = new Date(values[1] + '/' + values[0] + '/' + values[2]);\n  return !!testData.getTime();\n}\nfunction validateDate(value) {\n  if (!value || value.length < 10) {\n    return false;\n  }\n  const testData = new Date(value);\n  return !!testData.getTime();\n}\nfunction validateDatetime(time, options = {}) {\n  if (!time) {\n    return false;\n  }\n  time = time.toString();\n  const values = time.split(' ');\n  return validateDate(values[0]) && validateTime(values[1], options);\n}\nfunction validateDataHora(time, options = {}) {\n  if (!time) {\n    return false;\n  }\n  time = time.toString();\n  const values = time.split(' ');\n  return validateData(values[0]) && validateTime(values[1], options);\n}\nfunction validateEct(number) {\n  number = getAllDigits(number);\n  if (number.length > 9) {\n    return false;\n  }\n  const nodigit = number.substr(0, number.length - 1);\n  const dg = createEct(nodigit);\n  return parseInt(number[number.length - 1]) === dg;\n}\nfunction validateEmail(email) {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(String(email).toLowerCase());\n}\nfunction validateEndereco(number) {\n  return !!number;\n}\nfunction validateNumber(number) {\n  if (number.split(',').length > 2) {\n    return false;\n  }\n  const regexDecimal = /^\\d+(?:\\.\\d{0,2})$/;\n  const regex = /^[0-9]{0,10}[,]{1,1}[0-9]{0,4}/;\n  const regexNumero = /^[0-9]{0,10}/;\n  return regexDecimal.test(number) || regex.test(number) || regexNumero.test(number);\n}\nfunction validatePorcentagem(porcentagem) {\n  porcentagem = porcentagem.split('%')[0];\n  return validateNumber(porcentagem);\n}\nfunction validatePispasep(number) {\n  number = getAllDigits(number);\n  let nis = fillString(number, 11, '0');\n  const regex = /\\d{11}/;\n  if (!regex.test(nis)) {\n    return false;\n  }\n  const digit = createPispasep(number);\n  return nis[10].toString() === digit.toString();\n}\nfunction validateUsername(value) {\n  const re = /^[a-z0-9_-]{3,16}$/i;\n  return re.test(String(value).toLowerCase());\n}\nconst LICENSEPLATES_RANGE = [['AAA0001', 'BEZ9999', 'PR', '02/1990'], ['BFA0001', 'GKI9999', 'SP', '10/1991'], ['GKJ0001', 'HOK9999', 'MG', '09/1991'], ['HOL0001', 'HQE9999', 'MA', '01/1992'], ['HQF0001', 'HTW9999', 'MS', '03/1992'], ['HTX0001', 'HZA9999', 'CE', '10/1992'], ['HZB0001', 'IAP9999', 'SE', '09/1993'], ['IAQ0001', 'JDO9999', 'RS', '03/1992'], ['JDP0001', 'JKR9999', 'DF', '04/1994'], ['JKS0001', 'JSZ9999', 'BA', '08/1993'], ['JTA0001', 'JWE9999', 'PA', '07/1993'], ['JWF0001', 'JXY9999', 'AM', '09/1993'], ['JXZ0001', 'KAU9999', 'MT', '09/1993'], ['KAV0001', 'KFC9999', 'GO', '05/1994'], ['KFD0001', 'KME9999', 'PE', '08/1994'], ['KMF0001', 'LVE9999', 'RJ', '05/1994'], ['LVF0001', 'LWQ9999', 'PI', '04/1996'], ['LWR0001', 'MMM9999', 'SC', '06/1996'], ['MMN0001', 'MOW9999', 'PB', '07/1996'], ['MOX0001', 'MTZ9999', 'ES', '12/1995'], ['MUA0001', 'MVK9999', 'AL', '08/1996'], ['MVL0001', 'MXG9999', 'TO', '11/1996'], ['MXH0001', 'MZM9999', 'RN', '06/1998'], ['MZN0001', 'NAG9999', 'AC', '06/1998'], ['NAH0001', 'NBA9999', 'RR', '07/1998'], ['NBB0001', 'NEH9999', 'RO', '07/1998'], ['NEI0001', 'NFB9999', 'AP', '09/1998'], ['NFC0001', 'NGZ9999', 'GO', '08/2003'], ['NHA0001', 'NHT9999', 'MA', '12/2006'], ['NHU0001', 'NIX9999', 'PI', '05/2007'], ['NIY0001', 'NJW9999', 'MT', '10/2007'], ['NJX0001', 'NLU9999', 'GO', '11/2007'], ['NLV0001', 'NMO9999', 'AL', '01/2008'], ['NMP0001', 'NNI9999', 'MA', '05/2008'], ['NNJ0001', 'NOH9999', 'RN', '07/2008'], ['NOI0001', 'NPB9999', 'AM', '07/2008'], ['NPC0001', 'NPQ9999', 'MT', '09/2008'], ['NPR0001', 'NQK9999', 'PB', '11/2008'], ['NQL0001', 'NRE9999', 'CE', '12/2008'], ['NRF0001', 'NSD9999', 'MS', '11/2009'], ['NSE0001', 'NTC9999', 'PA', '11/2009'], ['NTD0001', 'NTW9999', 'BA', '02/2010'], ['NTX0001', 'NUG9999', 'MT', '03/2010'], ['NUH0001', 'NUL9999', 'RR', '06/2010'], ['NUM0001', 'NVF9999', 'CE', '06/2010'], ['NVG0001', 'NVN9999', 'SE', '03/2010'], ['NVO0001', 'NWR9999', 'GO', '03/2010'], ['NWS0001', 'NXQ9999', 'MA', '07/2010'], ['NXR0001', 'NXT9999', 'AC', '05/2011'], ['NXU0001', 'NXW9999', 'PE', '07/2010'], ['NXX0001', 'NYG9999', 'MG', '10/2011'], ['NYH0001', 'NZZ9999', 'BA', '10/2010'], ['OAA0001', 'OAO9999', 'AM', '12/2010'], ['OAP0001', 'OBS9999', 'MT', '05/2011'], ['OBT0001', 'OCA9999', 'PA', '07/2011'], ['OCB0001', 'OCU9999', 'CE', '02/2011'], ['OCV0001', 'ODT9999', 'ES', '05/2011'], ['ODU0001', 'OEI9999', 'PI', '09/2011'], ['OEJ0001', 'OES9999', 'SE', '08/2011'], ['OET0001', 'OFH9999', 'PB', '04/2011'], ['OFI0001', 'OFW9999', 'PA', '03/2011'], ['OFX0001', 'OGG9999', 'PB', '06/2011'], ['OGH0001', 'OHA9999', 'GO', '04/2011'], ['OHB0001', 'OHK9999', 'AL', '09/2011'], ['OHL0001', 'OHW9999', 'RO', '11/2011'], ['OHX0001', 'OIQ9999', 'CE', '12/2011'], ['OIR0001', 'OJQ9999', 'MA', '01/2012'], ['OJR0001', 'OKC9999', 'RN', '04/2012'], ['OKD0001', 'OKH9999', 'SC', '02/2014'], ['OKI0001', 'OLG9999', 'BA', '10/2011'], ['OLH0001', 'OLN9999', 'TO', '02/2012'], ['OLO0001', 'OMH9999', 'MG', '03/2012'], ['OMI0001', 'OOF9999', 'GO', '04/2012'], ['OOG0001', 'OOU9999', 'MS', '02/2012'], ['OOV0001', 'ORC9999', 'MG', '06/2012'], ['ORD0001', 'ORM9999', 'AL', '01/2012'], ['ORN0001', 'OSV9999', 'CE', '07/2012'], ['OSW0001', 'OTZ9999', 'PA', '08/2012'], ['OUA0001', 'OUE9999', 'PI', '11/2012'], ['OUF0001', 'OVD9999', 'BA', '12/2012'], ['OVE0001', 'OVF9999', 'ES', '12/2012'], ['OVG0001', 'OVG9999', 'AC', '05/2013'], ['OVH0001', 'OVL9999', 'ES', '07/2013'], ['OVM0001', 'OVV9999', 'DF', '11/2013'], ['OVW0001', 'OVY9999', 'PI', '10/2013'], ['OVZ0001', 'OWG9999', 'RN', '06/2013'], ['OWH0001', 'OXK9999', 'MG', '10/2013'], ['OXL0001', 'OXL9999', 'RO', '11/2013'], ['OXM0001', 'OXM9999', 'AM', '11/2013'], ['OXN0001', 'OXN9999', 'AL', '11/2013'], ['OXO0001', 'OXO9999', 'PB', '11/2013'], ['OXP0001', 'OXP9999', 'AC', '12/2013'], ['OXQ0001', 'OXZ9999', 'MA', '04/2014'], ['OYA0001', 'OYC9999', 'TO', '11/2013'], ['OYD0001', 'OYK9999', 'ES', '12/2013'], ['OYL0001', 'OYZ9999', 'PE', '02/2014'], ['OZA0001', 'OZA9999', 'CE', '01/2014'], ['OZB0001', 'OZB9999', 'SE', '01/2014'], ['OZC0001', 'OZV9999', 'BA', '03/2014'], ['OZW0001', 'PBZ9999', 'DF', '05/2014'], ['PCA0001', 'PED9999', 'PE', '12/2014'], ['PEE0001', 'PFQ9999', 'PE', '09/2010'], ['PFR0001', 'PGK9999', 'PE', '07/2012'], ['PGL0001', 'PGU9999', 'PE', '10/2013'], ['PGV0001', 'PGZ9999', 'PE', '12/2014'], ['PHA0001', 'PHZ9999', 'AM', '06/2014'], ['PIA0001', 'PIZ9999', 'PI', '06/2014'], ['PJA0001', 'PLZ9999', 'BA', '10/2014'], ['PMA0001', 'POZ9999', 'CE', '06/2014'], ['PPA0001', 'PPZ9999', 'ES', '08/2014'], ['PQA0001', 'PRZ9999', 'GO', '03/2015'], ['PSA0001', 'PTZ9999', 'MA', '12/2014'], ['PUA0001', 'PZZ9999', 'MG', '05/2014'], ['QAA0001', 'QAZ9999', 'MS', '12/2014'], ['QBA0001', 'QCZ9999', 'MT', '05/2014'], ['QDA0001', 'QEZ9999', 'PA', '10/2014'], ['QFA0001', 'QFZ9999', 'PB', '05/2014'], ['QGA0001', 'QGZ9999', 'RN', '09/2014'], ['QHA0001', 'QJZ9999', 'SC', '05/2014'], ['QKA0001', 'QKM9999', 'TO', '11/2014'], ['QKN0001', 'QKZ9999', 'SE', '06/2014'], ['QLA0001', 'QLM9999', 'AL', '09/2015'], ['QLN0001', 'QLT9999', 'AP', '01/2015'], ['QLU0001', 'QLZ9999', 'AC', '08/2014'], ['QMA0001', 'QMP9999', 'SE', '03/2017'], ['QMQ0001', 'QQZ9999', 'MG', '07/2017'], ['QRA0001', 'QRA9999', 'RO', '11/2017'], ['QRB0001', 'QRZ9999', 'ES', '05/2018'], ['QSA0001', 'QSZ9999', 'PB', '04/2018'], ['QTA0001', 'QTB9999', 'RO', '08/2018'], ['QTC0001', 'RIN9999', 'BR', '00/0000'], ['RIO0001', 'RIO9999', 'RJ', '09/2018'], ['RLA0001', 'SAU9999', 'BR', '00/0000'], ['SAV0001', 'SAV9999', 'SP', '09/2009']];\nconst LICENSEPLATES_INVALID = {\n  start: 'SAW0001',\n  end: 'ZZZ9999'\n}; // || Sequências ainda não definidas\nfunction validateLicensePlate(licensePlate, includesMercosul) {\n  const licensePlateClean = licensePlate.toString().replace(/-/g, '').replace(/ /g, '').toUpperCase();\n  const regex = {\n    legacyBR: /^[A-Z]{3}[0-9]{4}$/,\n    mercosulBR: /^[A-Z]{3}[0-9]{1}[A-Z]{1}[0-9]{2}$/,\n    mercosulAR: /^[A-Z]{2}[0-9]{3}[A-Z]{2}$|^[A-Z]{1}[0-9]{3}[A-Z]{3}$/,\n    mercosulBO: /^[A-Z]{2}[0-9]{5}$/,\n    mercosulPY: /^[A-Z]{4}[0-9]{3}$|^[0-9]{3}[A-Z]{4}$/,\n    mercosulUY: /^[A-Z]{3}[0-9]{4}$/\n  };\n  const isLegadoBRInvalid = licensePlateClean >= LICENSEPLATES_INVALID.start && licensePlateClean <= LICENSEPLATES_INVALID.end;\n  if (regex.legacyBR.test(licensePlateClean) && !isLegadoBRInvalid || regex.mercosulBR.test(licensePlateClean) || includesMercosul && (regex.mercosulAR.test(licensePlateClean) || regex.mercosulBO.test(licensePlateClean) || regex.mercosulPY.test(licensePlateClean) || regex.mercosulUY.test(licensePlateClean))) {\n    return true;\n  }\n  return false;\n}\nfunction rgSP(number) {\n  number = \"0000000\" + number;\n  number = number.slice(number.length - 8);\n  let b1 = parseInt(number.slice(7));\n  let b2 = parseInt(number.slice(6, 7));\n  let b3 = parseInt(number.slice(5, 6));\n  let b4 = parseInt(number.slice(4, 5));\n  let b5 = parseInt(number.slice(3, 4));\n  let b6 = parseInt(number.slice(2, 3));\n  let b7 = parseInt(number.slice(1, 2));\n  let b8 = parseInt(number.slice(0, 1));\n  let cispDig = (b1 * 2 + b2 * 3 + b3 * 4 + b4 * 5 + b5 * 6 + b6 * 7 + b7 * 8 + b8 * 9) % 11;\n  if (cispDig == 10) {\n    cispDig = \"X\";\n  }\n  return cispDig;\n}\nfunction rgRJ(number) {\n  number = \"0000000\" + number;\n  number = number.slice(number.length - 8);\n  let b1 = parseInt(number.slice(7));\n  let b2 = parseInt(number.slice(6, 7));\n  let b3 = parseInt(number.slice(5, 6));\n  let b4 = parseInt(number.slice(4, 5));\n  let b5 = parseInt(number.slice(3, 4));\n  let b6 = parseInt(number.slice(2, 3));\n  let b7 = parseInt(number.slice(1, 2));\n  let b8 = parseInt(number.slice(0, 1));\n  let ci7 = b1 * 2;\n  if (ci7 > 9) {\n    ci7 = ci7 - 9;\n  }\n  let ci56 = b3 * 2;\n  if (ci56 > 9) {\n    ci56 = ci56 - 9;\n  }\n  let ci34 = b5 * 2;\n  if (ci34 > 9) {\n    ci34 = ci34 - 9;\n  }\n  let ci12 = b7 * 2;\n  if (ci12 > 9) {\n    ci12 = ci12 - 9;\n  }\n  let ci67 = b2;\n  let ci45 = b4;\n  let ci23 = b6;\n  let ci01 = b8;\n  let cirjDig = (ci7 + ci56 + ci34 + ci12 + ci67 + ci45 + ci23 + ci01) % 10;\n  cirjDig = 10 - cirjDig;\n  if (cirjDig == 10) {\n    cirjDig = 0;\n  }\n  return cirjDig;\n}\nconst RG = {\n  sp: rgSP,\n  rj: rgRJ\n};\nconst validateBr = {\n  aih: validateAih,\n  cartaocredito: validateCartaoCredito,\n  cellphone: validateCellphone,\n  cep: validateCep,\n  certidao: validateCertidao,\n  chassi: validateChassi,\n  cnae: validateCnae,\n  cnh: validateCnh,\n  cnhEspelho: validateCnhEspelho,\n  renachEstadual: validateRenachEstadual,\n  renachSeguranca: validateRenachSeguranca,\n  cnpj: validateCnpj,\n  cns: validateCns,\n  contabanco: validateContaBanco,\n  cpf: validateCpf,\n  cpfcnpj: validateCpfCnpj,\n  currency: validateCurrency,\n  data: validateData,\n  date: validateDate,\n  datetime: validateDatetime,\n  datahora: validateDataHora,\n  ect: validateEct,\n  email: validateEmail,\n  endereco: validateEndereco,\n  inscricaoestadual: validateInscricaoEstadual,\n  iptu: validateIptu,\n  number: validateNumber,\n  porcentagem: validatePorcentagem,\n  pispasep: validatePispasep,\n  licensePlate: validateLicensePlate,\n  processo: validateProcesso,\n  renavam: validateRenavam,\n  rg: validateRg,\n  senha: validateSenha,\n  site: validateSite,\n  sped: validateSped,\n  phoneNumber: validatePhoneNumber,\n  time: validateTime,\n  titulo: validateTitulo,\n  username: validateUsername\n};\nconst cpf = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.cpf(v) ? null : {\n    cpf: true\n  };\n};\nconst CPF_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CPFValidator),\n  multi: true\n};\nclass CPFValidator {\n  validate(c) {\n    return cpf(c);\n  }\n  static ɵfac = function CPFValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CPFValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CPFValidator,\n    selectors: [[\"\", \"cpf\", \"\", \"formControlName\", \"\"], [\"\", \"cpf\", \"\", \"formControl\", \"\"], [\"\", \"cpf\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([CPF_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CPFValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[cpf][formControlName],[cpf][formControl],[cpf][ngModel]',\n      providers: [CPF_VALIDATOR]\n    }]\n  }], null, null);\n})();\nconst dollarSign = '$';\nconst emptyString$4 = '';\nconst comma = ',';\nconst period = '.';\nconst minus = '-';\nconst minusRegExp = /-/;\nconst nonDigitsRegExp = /\\D+/g;\nconst number$1 = 'number';\nconst digitRegExp = /\\d/;\nconst caretTrap = '[]';\nfunction createNumberMask({\n  prefix = dollarSign,\n  suffix = emptyString$4,\n  includeThousandsSeparator = true,\n  thousandsSeparatorSymbol = comma,\n  allowDecimal = false,\n  decimalSymbol = period,\n  decimalLimit = 2,\n  requireDecimal = false,\n  allowNegative = false,\n  allowLeadingZeroes = false,\n  integerLimit = null\n} = {}) {\n  const prefixLength = prefix && prefix.length || 0;\n  const suffixLength = suffix && suffix.length || 0;\n  const thousandsSeparatorSymbolLength = thousandsSeparatorSymbol && thousandsSeparatorSymbol.length || 0;\n  function numberMask(rawValue = emptyString$4) {\n    const rawValueLength = rawValue.length;\n    if (rawValue === emptyString$4 || rawValue[0] === prefix[0] && rawValueLength === 1) {\n      return prefix.split(emptyString$4).concat([digitRegExp.toString()]).concat(suffix.split(emptyString$4));\n    } else if (rawValue === decimalSymbol && allowDecimal) {\n      return prefix.split(emptyString$4).concat(['0', decimalSymbol, digitRegExp.toString()]).concat(suffix.split(emptyString$4));\n    }\n    const isNegative = rawValue[0] === minus && allowNegative;\n    //If negative remove \"-\" sign\n    if (isNegative) {\n      rawValue = rawValue.toString().substr(1);\n    }\n    const indexOfLastDecimal = rawValue.lastIndexOf(decimalSymbol);\n    const hasDecimal = indexOfLastDecimal !== -1;\n    let integer;\n    let fraction;\n    let mask;\n    // remove the suffix\n    if (rawValue.slice(suffixLength * -1) === suffix) {\n      rawValue = rawValue.slice(0, suffixLength * -1);\n    }\n    if (hasDecimal && (allowDecimal || requireDecimal)) {\n      integer = rawValue.slice(rawValue.slice(0, prefixLength) === prefix ? prefixLength : 0, indexOfLastDecimal);\n      fraction = rawValue.slice(indexOfLastDecimal + 1, rawValueLength);\n      fraction = convertToMask(fraction.replace(nonDigitsRegExp, emptyString$4));\n    } else {\n      if (rawValue.slice(0, prefixLength) === prefix) {\n        integer = rawValue.slice(prefixLength);\n      } else {\n        integer = rawValue;\n      }\n    }\n    if (integerLimit && typeof integerLimit === number$1) {\n      const thousandsSeparatorRegex = thousandsSeparatorSymbol === '.' ? '[.]' : `${thousandsSeparatorSymbol}`;\n      const numberOfThousandSeparators = (integer.match(new RegExp(thousandsSeparatorRegex, 'g')) || []).length;\n      integer = integer.slice(0, integerLimit + numberOfThousandSeparators * thousandsSeparatorSymbolLength);\n    }\n    integer = integer.replace(nonDigitsRegExp, emptyString$4);\n    if (!allowLeadingZeroes) {\n      integer = integer.replace(/^0+(0$|[^0])/, '$1');\n    }\n    integer = includeThousandsSeparator ? addThousandsSeparator(integer, thousandsSeparatorSymbol) : integer;\n    mask = convertToMask(integer);\n    if (hasDecimal && allowDecimal || requireDecimal === true) {\n      if (rawValue[indexOfLastDecimal - 1] !== decimalSymbol) {\n        mask.push(caretTrap);\n      }\n      mask.push(decimalSymbol, caretTrap);\n      if (fraction) {\n        if (typeof decimalLimit === number$1) {\n          fraction = fraction.slice(0, decimalLimit);\n        }\n        mask = mask.concat(fraction);\n      }\n      if (requireDecimal === true && rawValue[indexOfLastDecimal - 1] === decimalSymbol) {\n        mask.push(digitRegExp);\n      }\n    }\n    if (prefixLength > 0) {\n      mask = prefix.split(emptyString$4).concat(mask);\n    }\n    if (isNegative) {\n      // If user is entering a negative number, add a mask placeholder spot to attract the caret to it.\n      if (mask.length === prefixLength) {\n        mask.push(digitRegExp);\n      }\n      mask = [minusRegExp].concat(mask);\n    }\n    if (suffix.length > 0) {\n      mask = mask.concat(suffix.split(emptyString$4));\n    }\n    return mask;\n  }\n  numberMask.instanceOf = 'createNumberMask';\n  return numberMask;\n}\nfunction convertToMask(strNumber) {\n  return strNumber.split(emptyString$4).map(char => digitRegExp.test(char) ? digitRegExp : char);\n}\n// http://stackoverflow.com/a/10899795/604296\nfunction addThousandsSeparator(n, thousandsSeparatorSymbol) {\n  return n.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandsSeparatorSymbol);\n}\nconst maskNumber = {\n  decimalLimit: 2,\n  thousandsSeparatorSymbol: '.',\n  decimalSymbol: ',',\n  allowDecimal: true,\n  integerLimit: 17,\n  prefix: '',\n  suffix: ''\n};\nconst MASKS = {\n  aih: {\n    text: '000000000000-0',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\n  },\n  cartaocredito: {\n    text: '0000 0000 0000 0000 00/00 000',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, '/', /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/]\n  },\n  cellphone: {\n    text: '(00) 00000-0000',\n    textMask: ['(', /[1-9]/, /\\d/, ')', ' ', /[5-9]/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  cep: {\n    text: '00.000-000',\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]\n  },\n  certidao: {\n    text: '000000.00.00.0000.0.00000.000.0000000-00',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, '.', /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n  },\n  chassi: {\n    text: 'AAA AAAAAA AA AA0000',\n    textMask: [/[1-9]/, /\\w/, /\\w/, ' ', /\\w/, /\\w/, /\\w/, /\\w/, /\\w/, /\\w/, ' ', /\\w/, /\\w/, ' ', /\\w/, /\\w/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  cid: {\n    textMask: false\n  },\n  cnae: {\n    text: '0000-0/00',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, '/', /\\d/, /\\d/]\n  },\n  cnh: {\n    text: '000000000-00',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n  },\n  renachseguranca: {\n    text: '00000000000',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  renachestadual: {\n    text: 'AA000000000',\n    textMask: [/[A-S]/, /[A-Z]/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  cnhespelho: {\n    text: '0000000000',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  cnpj: {\n    text: '00.000.000/0000-00',\n    textMask: [/\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n  },\n  cns: {\n    text: '000 0000 0000 00-00',\n    textMask: [/[1|2|7|8|9]/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, '-', /\\d/, /\\d/]\n  },\n  contabanco: {\n    text: '000 00000-0 00000-0',\n    textMask: [/\\d/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\n  },\n  cpf: {\n    text: '000.000.000-00',\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n  },\n  cpfcnpj: {\n    text: '0000.0000.0000',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\n  },\n  currency: {\n    text: '0.000,00',\n    textMask: createNumberMask({\n      ...maskNumber,\n      prefix: 'R$ ',\n      allowNegative: true\n    })\n  },\n  data: {\n    text: '00/00/0000',\n    textMask: [/[0-3]/, /[0-9]/, '/', /[0-1]/, /[0-9]/, '/', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\n  },\n  date: {\n    text: '00/00/0000',\n    textMask: [/[0-1]/, /[0-9]/, '/', /[0-3]/, /[0-9]/, '/', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\n  },\n  datetime: {\n    text: '00/00/0000 00:00',\n    textMask: [/[0-1]/, /[0-9]/, '/', /[0-3]/, /[0-9]/, '/', /[0-2]/, /[0-9]/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, ':', /[0-5]/, /\\d/]\n  },\n  datahora: {\n    text: '00/00/0000 00:00',\n    textMask: [/[0-3]/, /[0-9]/, '/', /[0-1]/, /[0-9]/, '/', /[0-2]/, /[0-9]/, /\\d/, /\\d/, ' ', /\\d/, /\\d/, ':', /[0-5]/, /\\d/]\n  },\n  ect: {\n    text: '00000000-0',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/]\n  },\n  endereco: {\n    text: '0000.0000.0000',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\n  },\n  iptu: {\n    text: '0000.0000.0000',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\n  },\n  number: {\n    text: '0.000,00',\n    textMask: createNumberMask(maskNumber)\n  },\n  porcentagem: {\n    text: '00,00%',\n    textMask: createNumberMask({\n      ...maskNumber,\n      suffix: '%'\n    })\n  },\n  pispasep: {\n    text: '000.00000.00-0',\n    textMask: [/\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, '-', /\\d/]\n  },\n  licensePlate: {\n    text: 'AAA-0000',\n    textMask: [/[A-Za-z]/, /[A-Za-z]/, /[A-Za-z]/, '-', /\\d/, /[A-Za-z\\d]/, /\\d/, /\\d/]\n  },\n  processo: {\n    text: '0000000-00.0000.AAA.0000',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[A-Za-z]/, /[A-Za-z]/, /[A-Za-z]/, '.', /\\d/, /\\d/, /\\d/, /\\d/]\n  },\n  renavam: {\n    text: '0000000000-00',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/],\n    textMaskFunction: function mask(userInput) {\n      const numbers = userInput.match(/\\d/g);\n      let numberLength = 0;\n      if (numbers) {\n        numberLength = numbers.join('').length;\n      }\n      if (!userInput || numberLength < 9) {\n        return [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/];\n      } else {\n        return [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/];\n      }\n    }\n  },\n  rg: {\n    text: 'AA-00.000.000',\n    textMask: [/[A-Za-z]/, /[A-Za-z]/, '-', /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/]\n  },\n  sped: {\n    text: '0000.0000.0000',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\n  },\n  phoneNumber: {\n    text: '(00) 00000-0000',\n    textMask: ['(', /[1-9]/, /\\d/, ')', ' ', /[1-9]/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/],\n    textMaskFunction: function mask(userInput) {\n      const numbers = userInput.match(/\\d/g);\n      let numberLength = 0;\n      if (numbers) {\n        numberLength = numbers.join('').length;\n      }\n      if (!userInput || numberLength > 10) {\n        return ['(', /[1-9]/, /\\d/, ')', ' ', /[1-9]/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\n      } else {\n        return ['(', /[1-9]/, /\\d/, ')', ' ', /[1-9]/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/];\n      }\n    }\n  },\n  time: {\n    text: '00:00',\n    textMask: [/\\d/, /\\d/, ':', /[0-5]/, /\\d/]\n  },\n  titulo: {\n    text: '0000.0000.0000',\n    textMask: [/\\d/, /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, /\\d/, '.', /[0-2]/, /[0-9]/, /\\d/, /\\d/]\n  },\n  utils: {\n    numberToString: n => {\n      if (!n || typeof n === 'string') {\n        return n;\n      }\n      return n.toString().replace('.', ',');\n    },\n    textMask: false\n  }\n};\nconst makeGeneric = key => {\n  return value => {\n    if (!value) {\n      return '';\n    }\n    let mask = MASKS[key].textMask;\n    let textMaskFunction = MASKS[key].textMaskFunction;\n    if (typeof textMaskFunction === 'function') {\n      mask = textMaskFunction(value);\n    }\n    return conformToMask$2(value, mask, {\n      guide: false\n    }).conformedValue;\n  };\n};\nfunction formatNumber(maskType, numberValue, decimalsFormat = 2) {\n  if (!numberValue && numberValue !== 0) {\n    return '';\n  }\n  if (typeof numberValue !== 'string') {\n    numberValue = numberValue.toString().replace('.', ',');\n  }\n  const vals = numberValue.split(',');\n  if (!maskType.textMask || typeof maskType.textMask !== 'function') {\n    return '';\n  }\n  const mask = maskType.textMask(vals[0]);\n  let formattedValue = conformToMask$2(numberValue, mask, {\n    guide: false\n  }).conformedValue;\n  let decimalPart = vals[1] && decimalsFormat > 0 ? ',' + vals[1].padEnd(decimalsFormat, '0') : '';\n  return formattedValue + decimalPart;\n}\nconst maskBr = {\n  aih: makeGeneric('aih'),\n  cartaocredito: makeGeneric('cartaocredito'),\n  cellphone: makeGeneric('cellphone'),\n  cep: makeGeneric('cep'),\n  certidao: makeGeneric('certidao'),\n  chassi: makeGeneric('chassi'),\n  cnae: makeGeneric('cnae'),\n  cnh: makeGeneric('cnh'),\n  renachseguranca: makeGeneric('renachseguranca'),\n  renachestadual: makeGeneric('renachestadual'),\n  cnhespelho: makeGeneric('cnhespelho'),\n  cnpj: makeGeneric('cnpj'),\n  cns: makeGeneric('cns'),\n  contabanco: makeGeneric('contabanco'),\n  cpf: makeGeneric('cpf'),\n  cpfcnpj: makeGeneric('cpfcnpj'),\n  currency: (currencyValueInput, decimalsFormat = 2) => {\n    return formatNumber(MASKS['currency'], currencyValueInput, decimalsFormat);\n  },\n  data: makeGeneric('data'),\n  date: makeGeneric('date'),\n  datetime: makeGeneric('datetime'),\n  datahora: makeGeneric('datahora'),\n  ect: makeGeneric('ect'),\n  endereco: makeGeneric('endereco'),\n  inscricaoestadual: (inscricaoestadualValue, estado) => {\n    const ie = MASKSIE;\n    const ieState = ie[estado];\n    if (!inscricaoestadualValue || !estado || !ieState || !ieState.textMask) {\n      return '';\n    }\n    let mask = ieState.textMask;\n    let textMaskFunction = ieState.textMaskFunction;\n    if (typeof textMaskFunction === 'function') {\n      mask = textMaskFunction(inscricaoestadualValue);\n    }\n    return conformToMask$2(inscricaoestadualValue, mask, {\n      guide: false\n    }).conformedValue;\n  },\n  iptu: (iptuValue, estado, cidade) => {\n    const mask = maskIptu(iptuValue, estado, cidade);\n    if (!mask || typeof mask === 'string') {\n      return '';\n    }\n    return conformToMask$2(iptuValue, mask.textMask, {\n      guide: false\n    }).conformedValue;\n  },\n  number: (numberValue, decimalsFormat = 2) => {\n    return formatNumber(MASKS['number'], numberValue, decimalsFormat);\n  },\n  porcentagem: (porcentagemValue, decimalsFormat = 2) => {\n    return formatNumber(MASKS['porcentagem'], porcentagemValue, decimalsFormat);\n  },\n  pispasep: makeGeneric('pispasep'),\n  licensePlate: makeGeneric('licensePlate'),\n  processo: makeGeneric('processo'),\n  renavam: makeGeneric('renavam'),\n  rg: makeGeneric('rg'),\n  sped: makeGeneric('sped'),\n  phoneNumber: makeGeneric('phoneNumber'),\n  time: value => {\n    if (value instanceof Date) {\n      value = value.toTimeString().split(' ')[0];\n    }\n    return makeGeneric('time')(value);\n  },\n  titulo: makeGeneric('titulo')\n};\n/**\n * FROM TEXT-MASK\n */\nconst placeholderChar$1 = '_';\nconst strFunction$1 = 'function';\nconst defaultPlaceholderChar = placeholderChar$1;\nconst emptyArray$2 = [];\nconst emptyString$3 = '';\nfunction conformToMask$2(inputValue = emptyString$3, mask = emptyArray$2, config = {}) {\n  let rawValue = inputValue.toString();\n  if (typeof inputValue === 'number') {\n    rawValue = inputValue.toString();\n  }\n  if (inputValue instanceof Date) {\n    rawValue = inputValue.toLocaleString(\"pt-br\");\n  }\n  if (!isArray$1(mask)) {\n    if (typeof mask === strFunction$1) {\n      mask = mask(inputValue, config);\n      mask = processCaretTraps$1(mask).maskWithoutCaretTraps;\n    } else {\n      throw new Error('Text-mask:conformToMask; The mask property must be an array.');\n    }\n  }\n  const guide = config.guide || true;\n  const previousConformedValue = config.previousConformedValue || emptyString$3;\n  const placeholder = convertMaskToPlaceholder$1(mask, placeholderChar$1);\n  const currentCaretPosition = config.currentCaretPosition;\n  const keepCharPositions = config.keepCharPositions;\n  const suppressGuide = guide === false && previousConformedValue !== undefined;\n  const rawValueLength = rawValue.length;\n  const previousConformedValueLength = previousConformedValue.length;\n  const placeholderLength = placeholder.length;\n  const maskLength = mask.length;\n  const editDistance = rawValueLength - previousConformedValueLength;\n  const isAddition = editDistance > 0;\n  const indexOfFirstChange = currentCaretPosition + (isAddition ? -editDistance : 0);\n  const indexOfLastChange = indexOfFirstChange + Math.abs(editDistance);\n  if (keepCharPositions === true && !isAddition) {\n    let compensatingPlaceholderChars = emptyString$3;\n    for (let i = indexOfFirstChange; i < indexOfLastChange; i++) {\n      if (placeholder[i] === placeholderChar$1) {\n        compensatingPlaceholderChars += placeholderChar$1;\n      }\n    }\n    rawValue = rawValue.slice(0, indexOfFirstChange) + compensatingPlaceholderChars + rawValue.slice(indexOfFirstChange, rawValueLength);\n  }\n  const rawValueArr = rawValue.split(emptyString$3).map((char, i) => ({\n    char,\n    isNew: i >= indexOfFirstChange && i < indexOfLastChange\n  }));\n  for (let i = rawValueLength - 1; i >= 0; i--) {\n    const {\n      char\n    } = rawValueArr[i];\n    if (char !== placeholderChar$1) {\n      const shouldOffset = i >= indexOfFirstChange && previousConformedValueLength === maskLength;\n      if (char === placeholder[shouldOffset ? i - editDistance : i]) {\n        rawValueArr.splice(i, 1);\n      }\n    }\n  }\n  let conformedValue = emptyString$3;\n  let someCharsRejected = false;\n  placeholderLoop: for (let i = 0; i < placeholderLength; i++) {\n    const charInPlaceholder = placeholder[i];\n    if (charInPlaceholder === placeholderChar$1) {\n      if (rawValueArr.length > 0) {\n        while (rawValueArr.length > 0) {\n          const shift = rawValueArr.shift();\n          let rawValueChar = '',\n            isNew = false;\n          if (shift) {\n            rawValueChar = shift.char;\n            isNew = shift.isNew;\n          }\n          if (rawValueChar === placeholderChar$1 && suppressGuide !== true) {\n            conformedValue += placeholderChar$1;\n            continue placeholderLoop;\n          } else if (mask[i].test(rawValueChar)) {\n            if (keepCharPositions !== true || isNew === false || previousConformedValue === emptyString$3 || guide === false || !isAddition) {\n              conformedValue += rawValueChar;\n            } else {\n              const rawValueArrLength = rawValueArr.length;\n              let indexOfNextAvailablePlaceholderChar = null;\n              for (let i = 0; i < rawValueArrLength; i++) {\n                const charData = rawValueArr[i];\n                if (charData.char !== placeholderChar$1 && charData.isNew === false) {\n                  break;\n                }\n                if (charData.char === placeholderChar$1) {\n                  indexOfNextAvailablePlaceholderChar = i;\n                  break;\n                }\n              }\n              if (indexOfNextAvailablePlaceholderChar !== null) {\n                conformedValue += rawValueChar;\n                rawValueArr.splice(indexOfNextAvailablePlaceholderChar, 1);\n              } else {\n                i--;\n              }\n            }\n            continue placeholderLoop;\n          } else {\n            someCharsRejected = true;\n          }\n        }\n      }\n      if (suppressGuide === false) {\n        conformedValue += placeholder.substr(i, placeholderLength);\n      }\n      break;\n    } else {\n      conformedValue += charInPlaceholder;\n    }\n  }\n  if (suppressGuide && isAddition === false) {\n    let indexOfLastFilledPlaceholderChar = null;\n    for (let i = 0; i < conformedValue.length; i++) {\n      if (placeholder[i] === placeholderChar$1) {\n        indexOfLastFilledPlaceholderChar = i;\n      }\n    }\n    if (indexOfLastFilledPlaceholderChar !== null) {\n      conformedValue = conformedValue.substr(0, indexOfLastFilledPlaceholderChar + 1);\n    } else {\n      conformedValue = emptyString$3;\n    }\n  }\n  return {\n    conformedValue,\n    meta: {\n      someCharsRejected\n    }\n  };\n}\nfunction convertMaskToPlaceholder$1(mask = emptyArray$2, placeholderChar = defaultPlaceholderChar) {\n  if (!isArray$1(mask)) {\n    throw new Error('Text-mask:convertMaskToPlaceholder; The mask property must be an array.');\n  }\n  if (mask.indexOf(placeholderChar) !== -1) {\n    throw new Error('Placeholder character must not be used as part of the mask. Please specify a character ' + 'that is not present in your mask as your placeholder character.\\n\\n' + `The placeholder character that was received is: ${JSON.stringify(placeholderChar)}\\n\\n` + `The mask that was received is: ${JSON.stringify(mask)}`);\n  }\n  return mask.map(char => char instanceof RegExp ? placeholderChar : char).join('');\n}\nclass CPFPipe {\n  transform(cpfValue) {\n    return maskBr.cpf(cpfValue);\n  }\n  static ɵfac = function CPFPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CPFPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"cpf\",\n    type: CPFPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CPFPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'cpf'\n    }]\n  }], null, null);\n})();\nconst cnpj = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.cnpj(v) ? null : {\n    cnpj: true\n  };\n};\nconst CNPJ_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CNPJValidator),\n  multi: true\n};\nclass CNPJValidator {\n  validate(c) {\n    return cnpj(c);\n  }\n  static ɵfac = function CNPJValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CNPJValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CNPJValidator,\n    selectors: [[\"\", \"cnpj\", \"\", \"formControlName\", \"\"], [\"\", \"cnpj\", \"\", \"formControl\", \"\"], [\"\", \"cnpj\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([CNPJ_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CNPJValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[cnpj][formControlName],[cnpj][formControl],[cnpj][ngModel]',\n      providers: [CNPJ_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass CNPJPipe {\n  transform(cnpjValue) {\n    return maskBr.cnpj(cnpjValue);\n  }\n  static ɵfac = function CNPJPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CNPJPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"cnpj\",\n    type: CNPJPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CNPJPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'cnpj'\n    }]\n  }], null, null);\n})();\nconst phoneNumber = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.phoneNumber(v) ? null : {\n    phoneNumber: true\n  };\n};\nconst PHONENUMBER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => PhoneNumberValidator),\n  multi: true\n};\nclass PhoneNumberValidator {\n  validate(c) {\n    return phoneNumber(c);\n  }\n  static ɵfac = function PhoneNumberValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PhoneNumberValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: PhoneNumberValidator,\n    selectors: [[\"\", \"phoneNumber\", \"\", \"formControlName\", \"\"], [\"\", \"phoneNumber\", \"\", \"formControl\", \"\"], [\"\", \"phoneNumber\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([PHONENUMBER_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PhoneNumberValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[phoneNumber][formControlName],[phoneNumber][formControl],[phoneNumber][ngModel]',\n      providers: [PHONENUMBER_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass PhoneNumberPipe {\n  transform(phoneNumberValue) {\n    return maskBr.phoneNumber(phoneNumberValue);\n  }\n  static ɵfac = function PhoneNumberPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PhoneNumberPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"phoneNumber\",\n    type: PhoneNumberPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PhoneNumberPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'phoneNumber'\n    }]\n  }], null, null);\n})();\nconst cellphone = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.cellphone(v) ? null : {\n    cellphone: true\n  };\n};\nconst CELLPHONE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CellphoneValidator),\n  multi: true\n};\nclass CellphoneValidator {\n  validate(c) {\n    return cellphone(c);\n  }\n  static ɵfac = function CellphoneValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CellphoneValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CellphoneValidator,\n    selectors: [[\"\", \"cellphone\", \"\", \"formControlName\", \"\"], [\"\", \"cellphone\", \"\", \"formControl\", \"\"], [\"\", \"cellphone\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([CELLPHONE_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CellphoneValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[cellphone][formControlName],[cellphone][formControl],[cellphone][ngModel]',\n      providers: [CELLPHONE_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass CellphonePipe {\n  transform(cellphoneValue) {\n    return maskBr.cellphone(cellphoneValue);\n  }\n  static ɵfac = function CellphonePipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CellphonePipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"cellphone\",\n    type: CellphonePipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CellphonePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'cellphone'\n    }]\n  }], null, null);\n})();\nconst inscricaoestadual = estado => {\n  return control => {\n    if (utilsBr.isPresent(Validators.required(control))) {\n      return null;\n    }\n    const v = control.value;\n    return validateBr.inscricaoestadual(v, estado) ? null : {\n      inscricaoestadual: true\n    };\n  };\n};\nconst INSCRICAOESTADUAL_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => InscricaoEstadualValidator),\n  multi: true\n};\nclass InscricaoEstadualValidator {\n  validate(c) {\n    return inscricaoestadual('mg')(c);\n  }\n  static ɵfac = function InscricaoEstadualValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || InscricaoEstadualValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: InscricaoEstadualValidator,\n    selectors: [[\"\", \"inscricaoestadual\", \"\", \"formControlName\", \"\"], [\"\", \"inscricaoestadual\", \"\", \"formControl\", \"\"], [\"\", \"inscricaoestadual\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([INSCRICAOESTADUAL_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InscricaoEstadualValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[inscricaoestadual][formControlName],[inscricaoestadual][formControl],[inscricaoestadual][ngModel]',\n      providers: [INSCRICAOESTADUAL_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass InscricaoEstadualPipe {\n  transform(inscricaoestadualValue, estado) {\n    return maskBr.inscricaoestadual(inscricaoestadualValue, estado);\n  }\n  static ɵfac = function InscricaoEstadualPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || InscricaoEstadualPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"inscricaoestadual\",\n    type: InscricaoEstadualPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InscricaoEstadualPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'inscricaoestadual'\n    }]\n  }], null, null);\n})();\nconst cep = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.cep(v) ? null : {\n    cep: true\n  };\n};\nconst CEP_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CEPValidator),\n  multi: true\n};\nclass CEPValidator {\n  validate(c) {\n    return cep(c);\n  }\n  static ɵfac = function CEPValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CEPValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CEPValidator,\n    selectors: [[\"\", \"cep\", \"\", \"formControlName\", \"\"], [\"\", \"cep\", \"\", \"formControl\", \"\"], [\"\", \"cep\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([CEP_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CEPValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[cep][formControlName],[cep][formControl],[cep][ngModel]',\n      providers: [CEP_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass CEPPipe {\n  transform(cepValue) {\n    return maskBr.cep(cepValue);\n  }\n  static ɵfac = function CEPPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CEPPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"cep\",\n    type: CEPPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CEPPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'cep'\n    }]\n  }], null, null);\n})();\nconst currency = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.currency(v) ? null : {\n    currency: true\n  };\n};\nconst CURRENCY_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => CURRENCYValidator),\n  multi: true\n};\nclass CURRENCYValidator {\n  validate(c) {\n    return currency(c);\n  }\n  static ɵfac = function CURRENCYValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CURRENCYValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CURRENCYValidator,\n    selectors: [[\"\", \"currency\", \"\", \"formControlName\", \"\"], [\"\", \"currency\", \"\", \"formControl\", \"\"], [\"\", \"currency\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([CURRENCY_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CURRENCYValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[currency][formControlName],[currency][formControl],[currency][ngModel]',\n      providers: [CURRENCY_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass CURRENCYPipe {\n  transform(currencyValue, decimalValue = 2) {\n    return maskBr.currency(currencyValue, decimalValue);\n  }\n  static ɵfac = function CURRENCYPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CURRENCYPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"currencyBrazil\",\n    type: CURRENCYPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CURRENCYPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'currencyBrazil'\n    }]\n  }], null, null);\n})();\nconst number = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.number(v) ? null : {\n    number: true\n  };\n};\nconst NUMBER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => NUMBERValidator),\n  multi: true\n};\nclass NUMBERValidator {\n  validate(c) {\n    return number(c);\n  }\n  static ɵfac = function NUMBERValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NUMBERValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NUMBERValidator,\n    selectors: [[\"\", \"number\", \"\", \"formControlName\", \"\"], [\"\", \"number\", \"\", \"formControl\", \"\"], [\"\", \"number\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([NUMBER_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NUMBERValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[number][formControlName],[number][formControl],[number][ngModel]',\n      providers: [NUMBER_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass NUMBERPipe {\n  transform(numberValue, decimalValue = 2) {\n    return maskBr.number(numberValue, decimalValue);\n  }\n  static ɵfac = function NUMBERPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NUMBERPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"numberBrazil\",\n    type: NUMBERPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NUMBERPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'numberBrazil'\n    }]\n  }], null, null);\n})();\nconst licensePlate = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.licensePlate(v) ? null : {\n    licensePlate: true\n  };\n};\nconst LICENSEPLATE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  /* tslint:disable: no-use-before-declare */\n  useExisting: forwardRef(() => LICENSEPLATEValidator),\n  multi: true\n};\nclass LICENSEPLATEValidator {\n  validate(c) {\n    return licensePlate(c);\n  }\n  static ɵfac = function LICENSEPLATEValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || LICENSEPLATEValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LICENSEPLATEValidator,\n    selectors: [[\"\", \"license-plate\", \"\", \"formControlName\", \"\"], [\"\", \"license-plate\", \"\", \"formControl\", \"\"], [\"\", \"license-plate\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([LICENSEPLATE_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LICENSEPLATEValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[license-plate][formControlName],[license-plate][formControl],[license-plate][ngModel]',\n      providers: [LICENSEPLATE_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass LICENSEPLATEPipe {\n  transform(licensePlateValue) {\n    return maskBr.licensePlate(licensePlateValue).toUpperCase();\n  }\n  static ɵfac = function LICENSEPLATEPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || LICENSEPLATEPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"licensePlate\",\n    type: LICENSEPLATEPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LICENSEPLATEPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'licensePlate'\n    }]\n  }], null, null);\n})();\nconst percentage = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.porcentagem(v) ? null : {\n    percentage: true\n  };\n};\nconst PERCENTAGE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => PERCENTAGEValidator),\n  multi: true\n};\nclass PERCENTAGEValidator {\n  validate(c) {\n    return percentage(c);\n  }\n  static ɵfac = function PERCENTAGEValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PERCENTAGEValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: PERCENTAGEValidator,\n    selectors: [[\"\", \"percentage\", \"\", \"formControlName\", \"\"], [\"\", \"percentage\", \"\", \"formControl\", \"\"], [\"\", \"percentage\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([PERCENTAGE_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PERCENTAGEValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[percentage][formControlName],[percentage][formControl],[percentage][ngModel]',\n      providers: [PERCENTAGE_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass PERCENTAGEPipe {\n  transform(percentageValue, decimalValue) {\n    return maskBr.porcentagem(percentageValue, decimalValue);\n  }\n  static ɵfac = function PERCENTAGEPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PERCENTAGEPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"percentage\",\n    type: PERCENTAGEPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PERCENTAGEPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'percentage'\n    }]\n  }], null, null);\n})();\nconst renavam = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.renavam(v) ? null : {\n    renavam: true\n  };\n};\nconst RENAVAM_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => RenavamValidator),\n  multi: true\n};\nclass RenavamValidator {\n  validate(c) {\n    return renavam(c);\n  }\n  static ɵfac = function RenavamValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RenavamValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: RenavamValidator,\n    selectors: [[\"\", \"renavam\", \"\", \"formControlName\", \"\"], [\"\", \"renavam\", \"\", \"formControl\", \"\"], [\"\", \"renavam\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([RENAVAM_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RenavamValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[renavam][formControlName],[renavam][formControl],[renavam][ngModel]',\n      providers: [RENAVAM_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass RenavamPipe {\n  transform(renavamValue) {\n    return maskBr.renavam(renavamValue);\n  }\n  static ɵfac = function RenavamPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RenavamPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"renavam\",\n    type: RenavamPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RenavamPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'renavam'\n    }]\n  }], null, null);\n})();\nconst pispasep = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.pispasep(v) ? null : {\n    pispasep: true\n  };\n};\nconst PISPASE_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => PispasepValidator),\n  multi: true\n};\nclass PispasepValidator {\n  validate(c) {\n    return pispasep(c);\n  }\n  static ɵfac = function PispasepValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PispasepValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: PispasepValidator,\n    selectors: [[\"\", \"pispasep\", \"\", \"formControlName\", \"\"], [\"\", \"pispasep\", \"\", \"formControl\", \"\"], [\"\", \"pispasep\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([PISPASE_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PispasepValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[pispasep][formControlName],[pispasep][formControl],[pispasep][ngModel]',\n      providers: [PISPASE_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass PispasepPipe {\n  transform(pispasepValue) {\n    return maskBr.pispasep(pispasepValue);\n  }\n  static ɵfac = function PispasepPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PispasepPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"pispasep\",\n    type: PispasepPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PispasepPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'pispasep'\n    }]\n  }], null, null);\n})();\nconst rg = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.rg(v) ? null : {\n    rg: true\n  };\n};\nconst RG_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => RGValidator),\n  multi: true\n};\nclass RGValidator {\n  validate(c) {\n    return rg(c);\n  }\n  static ɵfac = function RGValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RGValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: RGValidator,\n    selectors: [[\"\", \"rg\", \"\", \"formControlName\", \"\"], [\"\", \"rg\", \"\", \"formControl\", \"\"], [\"\", \"rg\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([RG_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RGValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[rg][formControlName],[rg][formControl],[rg][ngModel]',\n      providers: [RG_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass RGPipe {\n  transform(rgValue) {\n    return maskBr.rg(rgValue);\n  }\n  static ɵfac = function RGPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RGPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"rg\",\n    type: RGPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RGPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'rg'\n    }]\n  }], null, null);\n})();\nconst time = control => {\n  if (utilsBr.isPresent(Validators.required(control))) {\n    return null;\n  }\n  const v = control.value;\n  return validateBr.time(v) ? null : {\n    time: true\n  };\n};\nconst TIME_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => TIMEValidator),\n  multi: true\n};\nclass TIMEValidator {\n  validate(c) {\n    return time(c);\n  }\n  static ɵfac = function TIMEValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TIMEValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TIMEValidator,\n    selectors: [[\"\", \"time\", \"\", \"formControlName\", \"\"], [\"\", \"time\", \"\", \"formControl\", \"\"], [\"\", \"time\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([TIME_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TIMEValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[time][formControlName],[time][formControl],[time][ngModel]',\n      providers: [TIME_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass TIMEPipe {\n  transform(timeValue) {\n    return maskBr.time(timeValue);\n  }\n  static ɵfac = function TIMEPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TIMEPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"time\",\n    type: TIMEPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TIMEPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'time'\n    }]\n  }], null, null);\n})();\nconst titulo = control => {\n  if (utilsBr.isPresent(Validators.required(control))) return null;\n  const v = control.value;\n  return validateBr.titulo(v) ? null : {\n    titulo: true\n  };\n};\nconst TITULO_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => TITULOValidator),\n  multi: true\n};\nclass TITULOValidator {\n  validate(c) {\n    return titulo(c);\n  }\n  static ɵfac = function TITULOValidator_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TITULOValidator)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TITULOValidator,\n    selectors: [[\"\", \"titulo\", \"\", \"formControlName\", \"\"], [\"\", \"titulo\", \"\", \"formControl\", \"\"], [\"\", \"titulo\", \"\", \"ngModel\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([TITULO_VALIDATOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TITULOValidator, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line:directive-selector\n      selector: '[titulo][formControlName],[titulo][formControl],[titulo][ngModel]',\n      providers: [TITULO_VALIDATOR]\n    }]\n  }], null, null);\n})();\nclass TITULOPipe {\n  transform(tituloValue) {\n    return maskBr.titulo(tituloValue);\n  }\n  static ɵfac = function TITULOPipe_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TITULOPipe)();\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"titulo\",\n    type: TITULOPipe,\n    pure: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TITULOPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'titulo'\n    }]\n  }], null, null);\n})();\nconst placeholderChar = '_';\nconst strFunction = 'function';\nconst emptyArray$1 = [];\nfunction convertMaskToPlaceholder(mask = emptyArray$1, localPlaceholderChar = placeholderChar) {\n  if (!isArray(mask)) {\n    throw new Error('Text-mask:convertMaskToPlaceholder; The mask property must be an array.');\n  }\n  if (mask.indexOf(localPlaceholderChar) !== -1) {\n    throw new Error('Placeholder character must not be used as part of the mask. Please specify a character ' + 'that is not present in your mask as your placeholder character.\\n\\n' + `The placeholder character that was received is: ${JSON.stringify(localPlaceholderChar)}\\n\\n` + `The mask that was received is: ${JSON.stringify(mask)}`);\n  }\n  return mask.map(char => {\n    return char instanceof RegExp ? localPlaceholderChar : char;\n  }).join('');\n}\nfunction isArray(value) {\n  return Array.isArray && Array.isArray(value) || value instanceof Array;\n}\nfunction isString(value) {\n  return typeof value === 'string' || value instanceof String;\n}\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\nfunction isNil(value) {\n  return typeof value === 'undefined' || value === null;\n}\nconst strCaretTrap = '[]';\nfunction processCaretTraps(mask) {\n  const indexes = [];\n  let indexOfCaretTrap;\n  while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) {\n    // eslint-disable-line\n    indexes.push(indexOfCaretTrap);\n    mask.splice(indexOfCaretTrap, 1);\n  }\n  return {\n    maskWithoutCaretTraps: mask,\n    indexes\n  };\n}\nconst emptyArray = [];\nconst emptyString$2 = '';\nfunction conformToMask$1(rawValue = emptyString$2, mask = emptyArray, config = {}) {\n  if (!isArray(mask)) {\n    // If someone passes a function as the mask property, we should call the\n    // function to get the mask array - Normally this is handled by the\n    // `createTextMaskInputElement:update` function - this allows mask functions\n    // to be used directly with `conformToMask`\n    if (typeof mask === strFunction) {\n      // call the mask function to get the mask array\n      mask = mask(rawValue, config);\n      // mask functions can setup caret traps to have some control over how the caret moves. We need to process\n      // the mask for any caret traps. `processCaretTraps` will remove the caret traps from the mask\n      mask = processCaretTraps(mask).maskWithoutCaretTraps;\n    } else {\n      throw new Error('Text-mask:conformToMask; The mask property must be an array.');\n    }\n  }\n  // These configurations tell us how to conform the mask\n  const {\n    guide = true,\n    previousConformedValue = emptyString$2,\n    placeholderChar: placeholderChar$1 = placeholderChar,\n    placeholder = convertMaskToPlaceholder(mask, placeholderChar$1),\n    currentCaretPosition,\n    keepCharPositions\n  } = config;\n  // The configs below indicate that the user wants the algorithm to work in *no guide* mode\n  const suppressGuide = guide === false && previousConformedValue !== undefined;\n  // Calculate lengths once for performance\n  const rawValueLength = rawValue.length;\n  const previousConformedValueLength = previousConformedValue.length;\n  const placeholderLength = placeholder.length;\n  const maskLength = mask.length;\n  // This tells us the number of edited characters and the direction in which they were edited (+/-)\n  const editDistance = rawValueLength - previousConformedValueLength;\n  // In *no guide* mode, we need to know if the user is trying to add a character or not\n  const isAddition = editDistance > 0;\n  // Tells us the index of the first change. For (438) 394-4938 to (38) 394-4938, that would be 1\n  const indexOfFirstChange = currentCaretPosition + (isAddition ? -editDistance : 0);\n  // We're also gonna need the index of last change, which we can derive as follows...\n  const indexOfLastChange = indexOfFirstChange + Math.abs(editDistance);\n  // If `conformToMask` is configured to keep character positions, that is, for mask 111, previous value\n  // _2_ and raw value 3_2_, the new conformed value should be 32_, not 3_2 (default behavior). That's in the case of\n  // addition. And in the case of deletion, previous value _23, raw value _3, the new conformed string should be\n  // __3, not _3_ (default behavior)\n  //\n  // The next block of logic handles keeping character positions for the case of deletion. (Keeping\n  // character positions for the case of addition is further down since it is handled differently.)\n  // To do this, we want to compensate for all characters that were deleted\n  if (keepCharPositions === true && !isAddition) {\n    // We will be storing the new placeholder characters in this variable.\n    let compensatingPlaceholderChars = emptyString$2;\n    // For every character that was deleted from a placeholder position, we add a placeholder char\n    for (let i = indexOfFirstChange; i < indexOfLastChange; i++) {\n      if (placeholder[i] === placeholderChar$1) {\n        compensatingPlaceholderChars += placeholderChar$1;\n      }\n    }\n    // Now we trick our algorithm by modifying the raw value to make it contain additional placeholder characters\n    // That way when the we start laying the characters again on the mask, it will keep the non-deleted characters\n    // in their positions.\n    rawValue = rawValue.slice(0, indexOfFirstChange) + compensatingPlaceholderChars + rawValue.slice(indexOfFirstChange, rawValueLength);\n  }\n  // Convert `rawValue` string to an array, and mark characters based on whether they are newly added or have\n  // existed in the previous conformed value. Identifying new and old characters is needed for `conformToMask`\n  // to work if it is configured to keep character positions.\n  const rawValueArr = rawValue.split(emptyString$2).map((char, i) => ({\n    char,\n    isNew: i >= indexOfFirstChange && i < indexOfLastChange\n  }));\n  // The loop below removes masking characters from user input. For example, for mask\n  // `00 (111)`, the placeholder would be `00 (___)`. If user input is `00 (234)`, the loop below\n  // would remove all characters but `234` from the `rawValueArr`. The rest of the algorithm\n  // then would lay `234` on top of the available placeholder positions in the mask.\n  for (let i = rawValueLength - 1; i >= 0; i--) {\n    const {\n      char\n    } = rawValueArr[i];\n    if (char !== placeholderChar$1) {\n      const shouldOffset = i >= indexOfFirstChange && previousConformedValueLength === maskLength;\n      if (char === placeholder[shouldOffset ? i - editDistance : i]) {\n        rawValueArr.splice(i, 1);\n      }\n    }\n  }\n  // This is the variable that we will be filling with characters as we figure them out\n  // in the algorithm below\n  let conformedValue = emptyString$2;\n  let someCharsRejected = false;\n  // Ok, so first we loop through the placeholder looking for placeholder characters to fill up.\n  placeholderLoop: for (let i = 0; i < placeholderLength; i++) {\n    const charInPlaceholder = placeholder[i];\n    // We see one. Let's find out what we can put in it.\n    if (charInPlaceholder === placeholderChar$1) {\n      // But before that, do we actually have any user characters that need a place?\n      if (rawValueArr.length > 0) {\n        // We will keep chipping away at user input until either we run out of characters\n        // or we find at least one character that we can map.\n        while (rawValueArr.length > 0) {\n          // Let's retrieve the first user character in the queue of characters we have left\n          const {\n            char: rawValueChar,\n            isNew\n          } = rawValueArr.shift();\n          // If the character we got from the user input is a placeholder character (which happens\n          // regularly because user input could be something like (540) 90_-____, which includes\n          // a bunch of `_` which are placeholder characters) and we are not in *no guide* mode,\n          // then we map this placeholder character to the current spot in the placeholder\n          if (rawValueChar === placeholderChar$1 && suppressGuide !== true) {\n            conformedValue += placeholderChar$1;\n            // And we go to find the next placeholder character that needs filling\n            continue placeholderLoop;\n            // Else if, the character we got from the user input is not a placeholder, let's see\n            // if the current position in the mask can accept it.\n          } else if (mask[i].test(rawValueChar)) {\n            // we map the character differently based on whether we are keeping character positions or not.\n            // If any of the conditions below are met, we simply map the raw value character to the\n            // placeholder position.\n            if (keepCharPositions !== true || isNew === false || previousConformedValue === emptyString$2 || guide === false || !isAddition) {\n              conformedValue += rawValueChar;\n            } else {\n              // We enter this block of code if we are trying to keep character positions and none of the conditions\n              // above is met. In this case, we need to see if there's an available spot for the raw value character\n              // to be mapped to. If we couldn't find a spot, we will discard the character.\n              //\n              // For example, for mask `1111`, previous conformed value `_2__`, raw value `942_2__`. We can map the\n              // `9`, to the first available placeholder position, but then, there are no more spots available for the\n              // `4` and `2`. So, we discard them and end up with a conformed value of `92__`.\n              const rawValueArrLength = rawValueArr.length;\n              let indexOfNextAvailablePlaceholderChar = -1;\n              // Let's loop through the remaining raw value characters. We are looking for either a suitable spot, ie,\n              // a placeholder character or a non-suitable spot, ie, a non-placeholder character that is not new.\n              // If we see a suitable spot first, we store its position and exit the loop. If we see a non-suitable\n              // spot first, we exit the loop and our `indexOfNextAvailablePlaceholderChar` will stay as `null`.\n              for (let i = 0; i < rawValueArrLength; i++) {\n                const charData = rawValueArr[i];\n                if (charData.char !== placeholderChar$1 && charData.isNew === false) {\n                  break;\n                }\n                if (charData.char === placeholderChar$1) {\n                  indexOfNextAvailablePlaceholderChar = i;\n                  break;\n                }\n              }\n              // If `indexOfNextAvailablePlaceholderChar` is not `null`, that means the character is not blocked.\n              // We can map it. And to keep the character positions, we remove the placeholder character\n              // from the remaining characters\n              if (indexOfNextAvailablePlaceholderChar !== null) {\n                conformedValue += rawValueChar;\n                rawValueArr.splice(indexOfNextAvailablePlaceholderChar, 1);\n                // If `indexOfNextAvailablePlaceholderChar` is `null`, that means the character is blocked. We have to\n                // discard it.\n              } else {\n                i--;\n              }\n            }\n            // Since we've mapped this placeholder position. We move on to the next one.\n            continue placeholderLoop;\n          } else {\n            someCharsRejected = true;\n          }\n        }\n      }\n      // We reach this point when we've mapped all the user input characters to placeholder\n      // positions in the mask. In *guide* mode, we append the left over characters in the\n      // placeholder to the `conformedString`, but in *no guide* mode, we don't wanna do that.\n      //\n      // That is, for mask `(111)` and user input `2`, we want to return `(2`, not `(2__)`.\n      if (suppressGuide === false) {\n        conformedValue += placeholder.substr(i, placeholderLength);\n      }\n      // And we break\n      break;\n      // Else, the charInPlaceholder is not a placeholderChar. That is, we cannot fill it\n      // with user input. So we just map it to the final output\n    } else {\n      conformedValue += charInPlaceholder;\n    }\n  }\n  // The following logic is needed to deal with the case of deletion in *no guide* mode.\n  //\n  // Consider the silly mask `(111) /// 1`. What if user tries to delete the last placeholder\n  // position? Something like `(589) /// `. We want to conform that to `(589`. Not `(589) /// `.\n  // That's why the logic below finds the last filled placeholder character, and removes everything\n  // from that point on.\n  if (suppressGuide && isAddition === false) {\n    let indexOfLastFilledPlaceholderChar = -1;\n    // Find the last filled placeholder position and substring from there\n    for (let i = 0; i < conformedValue.length; i++) {\n      if (placeholder[i] === placeholderChar$1) {\n        indexOfLastFilledPlaceholderChar = i;\n      }\n    }\n    if (indexOfLastFilledPlaceholderChar !== null) {\n      // We substring from the beginning until the position after the last filled placeholder char.\n      conformedValue = conformedValue.substr(0, indexOfLastFilledPlaceholderChar + 1);\n    } else {\n      // If we couldn't find `indexOfLastFilledPlaceholderChar` that means the user deleted\n      // the first character in the mask. So we return an empty string.\n      conformedValue = emptyString$2;\n    }\n  }\n  return {\n    conformedValue,\n    meta: {\n      someCharsRejected\n    }\n  };\n}\nconst defaultArray = [];\nconst emptyString$1 = '';\nfunction adjustCaretPosition({\n  previousConformedValue = emptyString$1,\n  previousPlaceholder = emptyString$1,\n  currentCaretPosition = 0,\n  conformedValue,\n  rawValue,\n  placeholderChar,\n  placeholder,\n  indexesOfPipedChars = defaultArray,\n  caretTrapIndexes = defaultArray\n}) {\n  if (currentCaretPosition === 0 || !rawValue.length) {\n    return 0;\n  }\n  // Store lengths for faster performance?\n  const rawValueLength = rawValue.length;\n  const previousConformedValueLength = previousConformedValue.length;\n  const placeholderLength = placeholder.length;\n  const conformedValueLength = conformedValue.length;\n  // This tells us how long the edit is. If user modified input from `(2__)` to `(243__)`,\n  // we know the user in this instance pasted two characters\n  const editLength = rawValueLength - previousConformedValueLength;\n  // If the edit length is positive, that means the user is adding characters, not deleting.\n  const isAddition = editLength > 0;\n  // This is the first raw value the user entered that needs to be conformed to mask\n  const isFirstRawValue = previousConformedValueLength === 0;\n  // A partial multi-character edit happens when the user makes a partial selection in their\n  // input and edits that selection. That is going from `(123) 432-4348` to `() 432-4348` by\n  // selecting the first 3 digits and pressing backspace.\n  //\n  // Such cases can also happen when the user presses the backspace while holding down the ALT\n  // key.\n  const isPartialMultiCharEdit = editLength > 1 && !isAddition && !isFirstRawValue;\n  // This algorithm doesn't support all cases of multi-character edits, so we just return\n  // the current caret position.\n  //\n  // This works fine for most cases.\n  if (isPartialMultiCharEdit) {\n    return currentCaretPosition;\n  }\n  // For a mask like (111), if the `previousConformedValue` is (1__) and user attempts to enter\n  // `f` so the `rawValue` becomes (1f__), the new `conformedValue` would be (1__), which is the\n  // same as the original `previousConformedValue`. We handle this case differently for caret\n  // positioning.\n  const possiblyHasRejectedChar = isAddition && (previousConformedValue === conformedValue || conformedValue === placeholder);\n  let startingSearchIndex = 0;\n  let trackRightCharacter;\n  let targetChar;\n  if (possiblyHasRejectedChar) {\n    startingSearchIndex = currentCaretPosition - editLength;\n  } else {\n    // At this point in the algorithm, we want to know where the caret is right before the raw input\n    // has been conformed, and then see if we can find that same spot in the conformed input.\n    //\n    // We do that by seeing what character lies immediately before the caret, and then look for that\n    // same character in the conformed input and place the caret there.\n    // First, we need to normalize the inputs so that letter capitalization between raw input and\n    // conformed input wouldn't matter.\n    const normalizedConformedValue = conformedValue.toLowerCase();\n    const normalizedRawValue = rawValue.toLowerCase();\n    // Then we take all characters that come before where the caret currently is.\n    const leftHalfChars = normalizedRawValue.substr(0, currentCaretPosition).split(emptyString$1);\n    // Now we find all the characters in the left half that exist in the conformed input\n    // This step ensures that we don't look for a character that was filtered out or rejected by `conformToMask`.\n    const intersection = leftHalfChars.filter(char => normalizedConformedValue.indexOf(char) !== -1);\n    // The last character in the intersection is the character we want to look for in the conformed\n    // value and the one we want to adjust the caret close to\n    targetChar = intersection[intersection.length - 1];\n    // Calculate the number of mask characters in the previous placeholder\n    // from the start of the string up to the place where the caret is\n    const previousLeftMaskChars = previousPlaceholder.substr(0, intersection.length).split(emptyString$1).filter(char => char !== placeholderChar).length;\n    // Calculate the number of mask characters in the current placeholder\n    // from the start of the string up to the place where the caret is\n    const leftMaskChars = placeholder.substr(0, intersection.length).split(emptyString$1).filter(char => char !== placeholderChar).length;\n    // Has the number of mask characters up to the caret changed?\n    const masklengthChanged = leftMaskChars !== previousLeftMaskChars;\n    // Detect if `targetChar` is a mask character and has moved to the left\n    const targetIsMaskMovingLeft = previousPlaceholder[intersection.length - 1] !== undefined && placeholder[intersection.length - 2] !== undefined && previousPlaceholder[intersection.length - 1] !== placeholderChar && previousPlaceholder[intersection.length - 1] !== placeholder[intersection.length - 1] && previousPlaceholder[intersection.length - 1] === placeholder[intersection.length - 2];\n    // If deleting and the `targetChar` `is a mask character and `masklengthChanged` is true\n    // or the mask is moving to the left, we can't use the selected `targetChar` any longer\n    // if we are not at the end of the string.\n    // In this case, change tracking strategy and track the character to the right of the caret.\n    if (!isAddition && (masklengthChanged || targetIsMaskMovingLeft) && previousLeftMaskChars > 0 && placeholder.indexOf(targetChar) > -1 && rawValue[currentCaretPosition] !== undefined) {\n      trackRightCharacter = true;\n      targetChar = rawValue[currentCaretPosition];\n    }\n    // It is possible that `targetChar` will appear multiple times in the conformed value.\n    // We need to know not to select a character that looks like our target character from the placeholder or\n    // the piped characters, so we inspect the piped characters and the placeholder to see if they contain\n    // characters that match our target character.\n    // If the `conformedValue` got piped, we need to know which characters were piped in so that when we look for\n    // our `targetChar`, we don't select a piped char by mistake\n    const pipedChars = indexesOfPipedChars.map(index => normalizedConformedValue[index]);\n    // We need to know how many times the `targetChar` occurs in the piped characters.\n    const countTargetCharInPipedChars = pipedChars.filter(char => char === targetChar).length;\n    // We need to know how many times it occurs in the intersection\n    const countTargetCharInIntersection = intersection.filter(char => char === targetChar).length;\n    // We need to know if the placeholder contains characters that look like\n    // our `targetChar`, so we don't select one of those by mistake.\n    const countTargetCharInPlaceholder = placeholder.substr(0, placeholder.indexOf(placeholderChar)).split(emptyString$1).filter((char, index) =>\n    // Check if `char` is the same as our `targetChar`, so we account for it\n    char === targetChar &&\n    // but also make sure that both the `rawValue` and placeholder don't have the same character at the same\n    // index because if they are equal, that means we are already counting those characters in\n    // `countTargetCharInIntersection`\n    rawValue[index] !== char).length;\n    // The number of times we need to see occurrences of the `targetChar` before we know it is the one we're looking\n    // for is:\n    const requiredNumberOfMatches = countTargetCharInPlaceholder + countTargetCharInIntersection + countTargetCharInPipedChars + (\n    // The character to the right of the caret isn't included in `intersection`\n    // so add one if we are tracking the character to the right\n    trackRightCharacter ? 1 : 0);\n    // Now we start looking for the location of the `targetChar`.\n    // We keep looping forward and store the index in every iteration. Once we have encountered\n    // enough occurrences of the target character, we break out of the loop\n    // If are searching for the second `1` in `1214`, `startingSearchIndex` will point at `4`.\n    let numberOfEncounteredMatches = 0;\n    for (let i = 0; i < conformedValueLength; i++) {\n      const conformedValueChar = normalizedConformedValue[i];\n      startingSearchIndex = i + 1;\n      if (conformedValueChar === targetChar) {\n        numberOfEncounteredMatches++;\n      }\n      if (numberOfEncounteredMatches >= requiredNumberOfMatches) {\n        break;\n      }\n    }\n  }\n  // At this point, if we simply return `startingSearchIndex` as the adjusted caret position,\n  // most cases would be handled. However, we want to fast forward or rewind the caret to the\n  // closest placeholder character if it happens to be in a non-editable spot. That's what the next\n  // logic is for.\n  // In case of addition, we fast forward.\n  if (isAddition) {\n    // We want to remember the last placeholder character encountered so that if the mask\n    // contains more characters after the last placeholder character, we don't forward the caret\n    // that far to the right. Instead, we stop it at the last encountered placeholder character.\n    let lastPlaceholderChar = startingSearchIndex;\n    for (let i = startingSearchIndex; i <= placeholderLength; i++) {\n      if (placeholder[i] === placeholderChar) {\n        lastPlaceholderChar = i;\n      }\n      if (\n      // If we're adding, we can position the caret at the next placeholder character.\n      placeholder[i] === placeholderChar ||\n      // If a caret trap was set by a mask function, we need to stop at the trap.\n      caretTrapIndexes.indexOf(i) !== -1 ||\n      // This is the end of the placeholder. We cannot move any further. Let's put the caret there.\n      i === placeholderLength) {\n        return lastPlaceholderChar;\n      }\n    }\n  } else {\n    // In case of deletion, we rewind.\n    if (trackRightCharacter) {\n      // Searching for the character that was to the right of the caret\n      // We start at `startingSearchIndex` - 1 because it includes one character extra to the right\n      for (let i = startingSearchIndex - 1; i >= 0; i--) {\n        // If tracking the character to the right of the cursor, we move to the left until\n        // we found the character and then place the caret right before it\n        if (\n        // `targetChar` should be in `conformedValue`, since it was in `rawValue`, just\n        // to the right of the caret\n        conformedValue[i] === targetChar ||\n        // If a caret trap was set by a mask function, we need to stop at the trap.\n        caretTrapIndexes.indexOf(i) !== -1 ||\n        // This is the beginning of the placeholder. We cannot move any further.\n        // Let's put the caret there.\n        i === 0) {\n          return i;\n        }\n      }\n    } else {\n      // Searching for the first placeholder or caret trap to the left\n      for (let i = startingSearchIndex; i >= 0; i--) {\n        // If we're deleting, we stop the caret right before the placeholder character.\n        // For example, for mask `(111) 11`, current conformed input `(456) 86`. If user\n        // modifies input to `(456 86`. That is, they deleted the `)`, we place the caret\n        // right after the first `6`\n        if (\n        // If we're deleting, we can position the caret right before the placeholder character\n        placeholder[i - 1] === placeholderChar ||\n        // If a caret trap was set by a mask function, we need to stop at the trap.\n        caretTrapIndexes.indexOf(i) !== -1 ||\n        // This is the beginning of the placeholder. We cannot move any further.\n        // Let's put the caret there.\n        i === 0) {\n          return i;\n        }\n      }\n    }\n  }\n  return 0;\n}\nconst emptyString = '';\nconst strNone = 'none';\nconst strObject = 'object';\nconst isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\nconst defer = typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame : setTimeout;\nfunction createTextMaskInputElement(config) {\n  // Anything that we will need to keep between `update` calls, we will store in this `state` object.\n  const state = {\n    previousConformedValue: undefined,\n    previousPlaceholder: undefined\n  };\n  return {\n    state,\n    // `update` is called by framework components whenever they want to update the `value` of the input element.\n    // The caller can send a `rawValue` to be conformed and set on the input element. However, the default use-case\n    // is for this to be read from the `inputElement` directly.\n    update(rawValue, {\n      inputElement,\n      mask: providedMask,\n      guide,\n      pipe,\n      placeholderChar: placeholderChar$1 = placeholderChar,\n      keepCharPositions = false,\n      showMask = false\n    } = config) {\n      // if `rawValue` is `undefined`, read from the `inputElement`\n      if (typeof rawValue === 'undefined') {\n        rawValue = inputElement.value;\n      }\n      // If `rawValue` equals `state.previousConformedValue`, we don't need to change anything. So, we return.\n      // This check is here to handle controlled framework components that repeat the `update` call on every render.\n      if (rawValue === state.previousConformedValue) {\n        return;\n      }\n      // Text Mask accepts masks that are a combination of a `mask` and a `pipe` that work together. If such a `mask` is\n      // passed, we destructure it below, so the rest of the code can work normally as if a separate `mask` and a `pipe`\n      // were passed.\n      if (typeof providedMask === strObject && providedMask.pipe !== undefined && providedMask.mask !== undefined) {\n        pipe = providedMask.pipe;\n        providedMask = providedMask.mask;\n      }\n      // The `placeholder` is an essential piece of how Text Mask works. For a mask like `(111)`, the placeholder would\n      // be `(___)` if the `placeholderChar` is set to `_`.\n      let placeholder;\n      // We don't know what the mask would be yet. If it is an array, we take it as is, but if it's a function, we will\n      // have to call that function to get the mask array.\n      let mask;\n      // If the provided mask is an array, we can call `convertMaskToPlaceholder` here once and we'll always have the\n      // correct `placeholder`.\n      if (providedMask instanceof Array) {\n        placeholder = convertMaskToPlaceholder(providedMask, placeholderChar$1);\n      }\n      // In framework components that support reactivity, it's possible to turn off masking by passing\n      // `false` for `mask` after initialization. See https://github.com/text-mask/text-mask/pull/359\n      if (providedMask === false) {\n        return;\n      }\n      // We check the provided `rawValue` before moving further.\n      // If it's something we can't work with `getSafeRawValue` will throw.\n      const safeRawValue = getSafeRawValue(rawValue);\n      // `selectionEnd` indicates to us where the caret position is after the user has typed into the input\n      const {\n        selectionEnd: currentCaretPosition\n      } = inputElement;\n      // We need to know what the `previousConformedValue` and `previousPlaceholder` is from the previous `update` call\n      const {\n        previousConformedValue,\n        previousPlaceholder\n      } = state;\n      let caretTrapIndexes;\n      // If the `providedMask` is a function. We need to call it at every `update` to get the `mask` array.\n      // Then we also need to get the `placeholder`\n      if (typeof providedMask === strFunction) {\n        mask = providedMask(safeRawValue, {\n          currentCaretPosition,\n          previousConformedValue,\n          placeholderChar: placeholderChar$1\n        });\n        // disable masking if `mask` is `false`\n        if (mask === false) {\n          return;\n        }\n        // mask functions can setup caret traps to have some control over how the caret moves. We need to process\n        // the mask for any caret traps. `processCaretTraps` will remove the caret traps from the mask and return\n        // the indexes of the caret traps.\n        const {\n          maskWithoutCaretTraps,\n          indexes\n        } = processCaretTraps(mask);\n        mask = maskWithoutCaretTraps; // The processed mask is what we're interested in\n        caretTrapIndexes = indexes; // And we need to store these indexes because they're needed by `adjustCaretPosition`\n        placeholder = convertMaskToPlaceholder(mask, placeholderChar$1);\n        // If the `providedMask` is not a function, we just use it as-is.\n      } else {\n        mask = providedMask;\n      }\n      // The following object will be passed to `conformToMask` to determine how the `rawValue` will be conformed\n      const conformToMaskConfig = {\n        previousConformedValue,\n        guide,\n        placeholderChar: placeholderChar$1,\n        pipe,\n        placeholder,\n        currentCaretPosition,\n        keepCharPositions\n      };\n      // `conformToMask` returns `conformedValue` as part of an object for future API flexibility\n      const {\n        conformedValue\n      } = conformToMask$1(safeRawValue, mask, conformToMaskConfig);\n      // The following few lines are to support the `pipe` feature.\n      const piped = typeof pipe === strFunction;\n      let pipeResults = {};\n      // If `pipe` is a function, we call it.\n      if (piped) {\n        // `pipe` receives the `conformedValue` and the configurations with which `conformToMask` was called.\n        pipeResults = pipe(conformedValue, {\n          rawValue: safeRawValue,\n          ...conformToMaskConfig\n        });\n        // `pipeResults` should be an object. But as a convenience, we allow the pipe author to just return `false` to\n        // indicate rejection. Or return just a string when there are no piped characters.\n        // If the `pipe` returns `false` or a string, the block below turns it into an object that the rest\n        // of the code can work with.\n        if (pipeResults === false) {\n          // If the `pipe` rejects `conformedValue`, we use the `previousConformedValue`, and set `rejected` to `true`.\n          pipeResults = {\n            value: previousConformedValue,\n            rejected: true\n          };\n        } else if (isString(pipeResults)) {\n          pipeResults = {\n            value: pipeResults\n          };\n        }\n      }\n      // Before we proceed, we need to know which conformed value to use, the one returned by the pipe or the one\n      // returned by `conformToMask`.\n      const finalConformedValue = piped ? pipeResults.value : conformedValue;\n      // After determining the conformed value, we will need to know where to set\n      // the caret position. `adjustCaretPosition` will tell us.\n      const adjustedCaretPosition = adjustCaretPosition({\n        previousConformedValue,\n        previousPlaceholder,\n        conformedValue: finalConformedValue,\n        placeholder,\n        rawValue: safeRawValue,\n        currentCaretPosition,\n        placeholderChar: placeholderChar$1,\n        indexesOfPipedChars: pipeResults.indexesOfPipedChars,\n        caretTrapIndexes\n      });\n      // Text Mask sets the input value to an empty string when the condition below is set. It provides a better UX.\n      const inputValueShouldBeEmpty = finalConformedValue === placeholder && adjustedCaretPosition === 0;\n      const emptyValue = showMask ? placeholder : emptyString;\n      const inputElementValue = inputValueShouldBeEmpty ? emptyValue : finalConformedValue;\n      state.previousConformedValue = inputElementValue; // store value for access for next time\n      state.previousPlaceholder = placeholder;\n      // In some cases, this `update` method will be repeatedly called with a raw value that has already been conformed\n      // and set to `inputElement.value`. The below check guards against needlessly readjusting the input state.\n      // See https://github.com/text-mask/text-mask/issues/231\n      if (inputElement.value === inputElementValue) {\n        return;\n      }\n      inputElement.value = inputElementValue; // set the input value\n      safeSetSelection(inputElement, adjustedCaretPosition); // adjust caret position\n    }\n  };\n}\nfunction safeSetSelection(element, selectionPosition) {\n  if (document.activeElement === element) {\n    if (isAndroid) {\n      defer(() => element.setSelectionRange(selectionPosition, selectionPosition, strNone));\n    } else {\n      element.setSelectionRange(selectionPosition, selectionPosition, strNone);\n    }\n  }\n}\nfunction getSafeRawValue(inputValue) {\n  if (isString(inputValue)) {\n    return inputValue.toString();\n  } else if (isNumber(inputValue)) {\n    return String(inputValue);\n  } else if (inputValue === undefined || inputValue === null) {\n    return emptyString;\n  } else {\n    throw new Error(\"The 'value' provided to Text Mask needs to be a string or a number. The value \" + `received was:\\n\\n ${JSON.stringify(inputValue)}`);\n  }\n}\nconst conformToMask = conformToMask$1;\nclass TextMaskConfig {\n  mask;\n  guide;\n  placeholderChar;\n  pipe;\n  keepCharPositions;\n  showMask;\n}\nconst MASKEDINPUT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable: no-use-before-declare */\n  useExisting: forwardRef(() => MaskedInputDirective),\n  multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n  const userAgent = _getDOM() ? _getDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\nclass MaskedInputDirective {\n  _elementRef;\n  _compositionMode;\n  textMaskConfig = {\n    mask: [],\n    guide: true,\n    placeholderChar: '_',\n    pipe: undefined,\n    keepCharPositions: false\n  };\n  textMaskInputElement;\n  inputElement;\n  _renderer;\n  /** Whether the user is creating a composition string (IME events). */\n  _composing = false;\n  constructor(rendererFactory, _elementRef, _compositionMode) {\n    this._elementRef = _elementRef;\n    this._compositionMode = _compositionMode;\n    this._renderer = rendererFactory.createRenderer(null, null);\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid();\n    }\n  }\n  onChange = _ => {};\n  onTouched = () => {};\n  ngOnChanges(changes) {\n    this._setupMask(true);\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(this.inputElement.value);\n    }\n  }\n  writeValue(value) {\n    this._setupMask();\n    // set the initial value for cases where the mask is disabled\n    const normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this.inputElement, 'value', normalizedValue);\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(value);\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  setDisabledState(isDisabled) {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n  _handleInput(value) {\n    if (!this._compositionMode || this._compositionMode && !this._composing) {\n      this._setupMask();\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(value);\n        // get the updated value\n        value = this.inputElement.value;\n        this.onChange(value);\n      }\n    }\n  }\n  _setupMask(create = false) {\n    if (!this.inputElement) {\n      if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n        // `textMask` directive is used directly on an input element\n        this.inputElement = this._elementRef.nativeElement;\n      } else {\n        // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n        this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];\n      }\n    }\n    if (this.inputElement && create) {\n      this.textMaskInputElement = createTextMaskInputElement(Object.assign({\n        inputElement: this.inputElement\n      }, this.textMaskConfig));\n    }\n  }\n  _compositionStart() {\n    this._composing = true;\n  }\n  _compositionEnd(value) {\n    this._composing = false;\n    if (this._compositionMode) {\n      this._handleInput(value);\n    }\n  }\n  static ɵfac = function MaskedInputDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MaskedInputDirective)(i0.ɵɵdirectiveInject(i0.RendererFactory2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MaskedInputDirective,\n    selectors: [[\"\", \"textMask\", \"\"]],\n    hostBindings: function MaskedInputDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function MaskedInputDirective_input_HostBindingHandler($event) {\n          return ctx._handleInput($event.target.value);\n        })(\"blur\", function MaskedInputDirective_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        })(\"compositionstart\", function MaskedInputDirective_compositionstart_HostBindingHandler() {\n          return ctx._compositionStart();\n        })(\"compositionend\", function MaskedInputDirective_compositionend_HostBindingHandler($event) {\n          return ctx._compositionEnd($event.target.value);\n        });\n      }\n    },\n    inputs: {\n      textMaskConfig: [0, \"textMask\", \"textMaskConfig\"]\n    },\n    exportAs: [\"textMask\"],\n    features: [i0.ɵɵProvidersFeature([MASKEDINPUT_VALUE_ACCESSOR]), i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaskedInputDirective, [{\n    type: Directive,\n    args: [{\n      host: {\n        '(input)': '_handleInput($event.target.value)',\n        '(blur)': 'onTouched()',\n        '(compositionstart)': '_compositionStart()',\n        '(compositionend)': '_compositionEnd($event.target.value)'\n      },\n      /* tslint:disable: directive-selector */\n      selector: '[textMask]',\n      exportAs: 'textMask',\n      providers: [MASKEDINPUT_VALUE_ACCESSOR]\n    }]\n  }], () => [{\n    type: i0.RendererFactory2\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [COMPOSITION_BUFFER_MODE]\n    }]\n  }], {\n    textMaskConfig: [{\n      type: Input,\n      args: ['textMask']\n    }]\n  });\n})();\nconst NgxBrazilValidators = {\n  cpf,\n  cnpj,\n  cellphone,\n  cep,\n  currency,\n  inscricaoestadual,\n  number,\n  pispasep,\n  licensePlate,\n  percentage,\n  renavam,\n  rg,\n  phoneNumber,\n  time,\n  titulo\n};\nconst NgxBrazilMASKS = MASKS;\nconst NgxBrazilMASKSIE = MASKSIE;\nconst NgxBrazilCustomDirectives = [CellphoneValidator, CellphonePipe, CEPValidator, CEPPipe, CNPJValidator, CNPJPipe, CPFValidator, CPFPipe, CURRENCYValidator, CURRENCYPipe, InscricaoEstadualValidator, InscricaoEstadualPipe, NUMBERValidator, NUMBERPipe, PERCENTAGEValidator, PERCENTAGEPipe, PispasepValidator, PispasepPipe, LICENSEPLATEValidator, LICENSEPLATEPipe, RGValidator, RGPipe, RenavamValidator, RenavamPipe, PhoneNumberValidator, PhoneNumberPipe, TIMEValidator, TIMEPipe, TITULOValidator, TITULOPipe, MaskedInputDirective];\nconst NgxBrazilDirectives = {\n  CellphoneValidator,\n  CellphonePipe,\n  CEPValidator,\n  CEPPipe,\n  CNPJValidator,\n  CNPJPipe,\n  CPFValidator,\n  CPFPipe,\n  CURRENCYValidator,\n  CURRENCYPipe,\n  InscricaoEstadualValidator,\n  InscricaoEstadualPipe,\n  NUMBERValidator,\n  NUMBERPipe,\n  PERCENTAGEValidator,\n  PERCENTAGEPipe,\n  PispasepValidator,\n  PispasepPipe,\n  LICENSEPLATEValidator,\n  LICENSEPLATEPipe,\n  RGValidator,\n  RGPipe,\n  RenavamValidator,\n  RenavamPipe,\n  PhoneNumberValidator,\n  PhoneNumberPipe,\n  TIMEValidator,\n  TIMEPipe,\n  TITULOValidator,\n  TITULOPipe\n};\nclass NgxBrazil {\n  static forRoot() {\n    return {\n      ngModule: NgxBrazil\n    };\n  }\n  static ɵfac = function NgxBrazil_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NgxBrazil)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxBrazil,\n    imports: [CellphoneValidator, CellphonePipe, CEPValidator, CEPPipe, CNPJValidator, CNPJPipe, CPFValidator, CPFPipe, CURRENCYValidator, CURRENCYPipe, InscricaoEstadualValidator, InscricaoEstadualPipe, NUMBERValidator, NUMBERPipe, PERCENTAGEValidator, PERCENTAGEPipe, PispasepValidator, PispasepPipe, LICENSEPLATEValidator, LICENSEPLATEPipe, RGValidator, RGPipe, RenavamValidator, RenavamPipe, PhoneNumberValidator, PhoneNumberPipe, TIMEValidator, TIMEPipe, TITULOValidator, TITULOPipe, MaskedInputDirective],\n    exports: [CellphoneValidator, CellphonePipe, CEPValidator, CEPPipe, CNPJValidator, CNPJPipe, CPFValidator, CPFPipe, CURRENCYValidator, CURRENCYPipe, InscricaoEstadualValidator, InscricaoEstadualPipe, NUMBERValidator, NUMBERPipe, PERCENTAGEValidator, PERCENTAGEPipe, PispasepValidator, PispasepPipe, LICENSEPLATEValidator, LICENSEPLATEPipe, RGValidator, RGPipe, RenavamValidator, RenavamPipe, PhoneNumberValidator, PhoneNumberPipe, TIMEValidator, TIMEPipe, TITULOValidator, TITULOPipe, MaskedInputDirective]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxBrazil, [{\n    type: NgModule,\n    args: [{\n      declarations: [],\n      imports: [NgxBrazilCustomDirectives],\n      exports: [NgxBrazilCustomDirectives]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CEPPipe, CEPValidator, CNPJPipe, CNPJValidator, CPFPipe, CPFValidator, CURRENCYPipe, CURRENCYValidator, CellphonePipe, CellphoneValidator, InscricaoEstadualPipe, InscricaoEstadualValidator, LICENSEPLATEPipe, LICENSEPLATEValidator, MaskedInputDirective, NUMBERPipe, NUMBERValidator, NgxBrazil, NgxBrazilCustomDirectives, NgxBrazilDirectives, NgxBrazilMASKS, NgxBrazilMASKSIE, NgxBrazilValidators, PERCENTAGEPipe, PERCENTAGEValidator, PhoneNumberPipe, PhoneNumberValidator, PispasepPipe, PispasepValidator, RGPipe, RGValidator, RenavamPipe, RenavamValidator, TIMEPipe, TIMEValidator, TITULOPipe, TITULOValidator, cellphone, cep, cnpj, cpf, currency, inscricaoestadual, licensePlate, number, percentage, phoneNumber, pispasep, renavam, rg, time, titulo };\n"],
  "mappings": "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",
  "names": ["mask", "index", "mask", "number", "renavam", "titulo", "cnpj", "cnpj", "number", "renavam", "titulo", "cnpj", "number", "mask", "number", "cep", "number", "cnpj", "titulo", "renavam", "rg", "time", "currency", "licensePlate", "number", "mask", "i", "placeholderChar", "mask", "placeholderChar$1", "i", "placeholderChar"]
}
